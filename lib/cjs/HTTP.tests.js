"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HTTP_1 = require("./HTTP");
const TestUtils_1 = require("./TestUtils");
describe("posting data to json endpoint", function () {
    test("200 response returns de-serialized data", function () {
        const http = new HTTP_1.default(TestUtils_1.createFakeFetch("/foobar", { status: 200, data: { name: "foo" } }));
        return http.post("/foobar", {}).then(function (response_data) {
            expect(response_data).toEqual({ name: "foo" });
        });
    });
    test("posted data is serialized", function () {
        const fakeFetch = TestUtils_1.createFakeFetch("/foo", {});
        const http = new HTTP_1.default(fakeFetch);
        return http.post("/foo", { text: "foobar" }).then(function (response) {
            expect(fakeFetch.mock.calls[0][1].body)
                .toEqual(JSON.stringify({ text: "foobar" }));
        });
    });
    test("authentication token is passed, when given", function () {
        const fakeFetch = TestUtils_1.createFakeFetch("/foo", {});
        const http = new HTTP_1.default(fakeFetch);
        return http.post("/foo", {}, "jwt").then(function (response) {
            expect(fakeFetch.mock.calls[0][1].headers["Authorization"])
                .toEqual("jwt");
        });
    });
    test("no authentication token is passed, when not given", function () {
        const fakeFetch = TestUtils_1.createFakeFetch("/foo", {});
        const http = new HTTP_1.default(fakeFetch);
        return http.post("/foo", {}).then(function (response) {
            expect(fakeFetch.mock.calls[0][1].headers["Authorization"])
                .toBeUndefined();
        });
    });
    test("bad request are handled", function () {
        const fakeFetch = TestUtils_1.createFakeFetch("/foo", {
            status: 400,
            data: "error_message"
        });
        const http = new HTTP_1.default(fakeFetch);
        return http.post("/foo", {}).then(function (response) {
            throw Error("did not handle bad request");
        }, function (error) {
            expect(error).toEqual("error_message");
        });
    });
});
describe("querying data from a json endpoint", function () {
    test("query response data is returned", function () {
        const http = new HTTP_1.default(TestUtils_1.createFakeFetch("/foobar", { status: 200, data: { name: "foo" } }));
        return http.get("/foobar").then(function (response) {
            expect(response).toEqual({ name: "foo" });
        });
    });
    test("authentication token is passed, when given", function () {
        const fakeFetch = TestUtils_1.createFakeFetch("/foo", {});
        const http = new HTTP_1.default(fakeFetch);
        return http.get("/foo", "jwt").then(function (response) {
            expect(fakeFetch.mock.calls[0][1].headers["Authorization"])
                .toEqual("jwt");
        });
    });
    test("no authentication token is passed, when not given", function () {
        const fakeFetch = TestUtils_1.createFakeFetch("/foo", {});
        const http = new HTTP_1.default(fakeFetch);
        return http.get("/foo").then(function (response) {
            expect(fakeFetch.mock.calls[0][1].headers["Authorization"])
                .toBeUndefined();
        });
    });
    test("bad request are handled", function () {
        const fakeFetch = TestUtils_1.createFakeFetch("/foo", {
            status: 400,
            data: "error_message"
        });
        const http = new HTTP_1.default(fakeFetch);
        return http.get("/foo").then(function (response) {
            throw Error("did not handle bad request");
        }, function (error) {
            expect(error).toEqual("error_message");
        });
    });
});
//# sourceMappingURL=data:application/json;base64,