"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const convertProperties = function (propsIn) {
    const propsOut = {};
    for (let propName in propsIn) {
        if (propName === "classes") {
            let classes = [];
            for (let className in propsIn.classes) {
                if (propsIn.classes[className]) {
                    classes.push(className);
                }
            }
            propsOut.className = classes.join(" ");
        }
        else {
            propsOut[propName] = propsIn[propName];
        }
    }
    return propsOut;
};
const convertChildren = function (children) {
    if (typeof children === "string") {
        return [children];
    }
    else {
        return children;
    }
};
const create = function (tagName) {
    tagName = tagName.toUpperCase();
    return function (properties = {}, children = []) {
        return {
            tagName,
            properties: convertProperties(properties),
            children: convertChildren(children)
        };
    };
};
exports.h1 = create("h1");
exports.h2 = create("h2");
exports.h3 = create("h3");
exports.hr = create("hr");
exports.a = create("a");
exports.p = create("p");
exports.div = create("div");
exports.span = create("span");
exports.ul = create("ul");
exports.li = create("li");
exports.form = create("form");
exports.input = create("input");
exports.button = create("button");
exports.select = create("select");
exports.label = create("label");
exports.fieldset = create("fieldset");
exports.body = create("body");
exports.section = create("section");
exports.header = create("header");
exports.footer = create("footer");
exports.main = create("main");
exports.canvas = create("canvas");
exports.textBox = (name, value) => exports.input({ type: "text", name: name, value: value });
exports.link = (href, text) => exports.a({ href }, [text]);
exports.buildFormField = function (field) {
    return exports.div({}, [
        exports.label({ for: field.id }, [field.label]),
        exports.input({ type: field.type, id: field.id, name: field.id, value: field.value || "" })
    ]);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSFRNTC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9IVE1MLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxpQkFBaUIsR0FBRyxVQUFXLE9BQU87SUFDeEMsTUFBTSxRQUFRLEdBQVEsRUFBRSxDQUFBO0lBRXhCLEdBQUcsQ0FBQyxDQUFFLElBQUksUUFBUSxJQUFJLE9BQVEsQ0FBQyxDQUFDLENBQUM7UUFDN0IsRUFBRSxDQUFDLENBQUUsUUFBUSxLQUFLLFNBQVUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFBO1lBQ2hCLEdBQUcsQ0FBQyxDQUFFLElBQUksU0FBUyxJQUFJLE9BQU8sQ0FBQyxPQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxFQUFFLENBQUMsQ0FBRSxPQUFPLENBQUMsT0FBTyxDQUFFLFNBQVMsQ0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDakMsT0FBTyxDQUFDLElBQUksQ0FBRSxTQUFTLENBQUUsQ0FBQTtnQkFDN0IsQ0FBQztZQUNMLENBQUM7WUFDRCxRQUFRLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUUsR0FBRyxDQUFFLENBQUE7UUFDNUMsQ0FBQztRQUNELElBQUksQ0FBQyxDQUFDO1lBQ0YsUUFBUSxDQUFFLFFBQVEsQ0FBRSxHQUFHLE9BQU8sQ0FBRSxRQUFRLENBQUUsQ0FBQTtRQUM5QyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUE7QUFDbkIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxlQUFlLEdBQUcsVUFBVyxRQUFRO0lBQ3ZDLEVBQUUsQ0FBQyxDQUFFLE9BQU8sUUFBUSxLQUFLLFFBQVMsQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLENBQUUsUUFBUSxDQUFFLENBQUE7SUFDdkIsQ0FBQztJQUNELElBQUksQ0FBQyxDQUFDO1FBQ0YsTUFBTSxDQUFDLFFBQVEsQ0FBQTtJQUNuQixDQUFDO0FB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RSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRSxDQUFFO0tBQ3hGLENBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbnZlcnRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCBwcm9wc0luICkge1xuICAgIGNvbnN0IHByb3BzT3V0OiBhbnkgPSB7fVxuXG4gICAgZm9yICggbGV0IHByb3BOYW1lIGluIHByb3BzSW4gKSB7XG4gICAgICAgIGlmICggcHJvcE5hbWUgPT09IFwiY2xhc3Nlc1wiICkge1xuICAgICAgICAgICAgbGV0IGNsYXNzZXMgPSBbXVxuICAgICAgICAgICAgZm9yICggbGV0IGNsYXNzTmFtZSBpbiBwcm9wc0luLmNsYXNzZXMgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBwcm9wc0luLmNsYXNzZXNbIGNsYXNzTmFtZSBdICkge1xuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goIGNsYXNzTmFtZSApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvcHNPdXQuY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKCBcIiBcIiApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcm9wc091dFsgcHJvcE5hbWUgXSA9IHByb3BzSW5bIHByb3BOYW1lIF1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9wc091dFxufVxuXG5jb25zdCBjb252ZXJ0Q2hpbGRyZW4gPSBmdW5jdGlvbiAoIGNoaWxkcmVuICkge1xuICAgIGlmICggdHlwZW9mIGNoaWxkcmVuID09PSBcInN0cmluZ1wiICkge1xuICAgICAgICByZXR1cm4gWyBjaGlsZHJlbiBdXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW5cbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudCB7XG4gICAgdGFnTmFtZTogc3RyaW5nLFxuICAgIHByb3BlcnRpZXM6IGFueSxcbiAgICBjaGlsZHJlbjogRWxlbWVudFtdXG59XG5cbmNvbnN0IGNyZWF0ZSA9IGZ1bmN0aW9uICggdGFnTmFtZSApIHtcbiAgICB0YWdOYW1lID0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpXG4gICAgcmV0dXJuIGZ1bmN0aW9uICggcHJvcGVydGllcyA9IHt9LCBjaGlsZHJlbiA9IFtdICk6IEVsZW1lbnQge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGFnTmFtZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGNvbnZlcnRQcm9wZXJ0aWVzKCBwcm9wZXJ0aWVzICksXG4gICAgICAgICAgICBjaGlsZHJlbjogY29udmVydENoaWxkcmVuKCBjaGlsZHJlbiApXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBoMSA9IGNyZWF0ZSggXCJoMVwiIClcbmV4cG9ydCBjb25zdCBoMiA9IGNyZWF0ZSggXCJoMlwiIClcbmV4cG9ydCBjb25zdCBoMyA9IGNyZWF0ZSggXCJoM1wiIClcblxuZXhwb3J0IGNvbnN0IGhyID0gY3JlYXRlKCBcImhyXCIgKVxuZXhwb3J0IGNvbnN0IGEgPSBjcmVhdGUoIFwiYVwiIClcblxuZXhwb3J0IGNvbnN0IHAgPSBjcmVhdGUoIFwicFwiIClcbmV4cG9ydCBjb25zdCBkaXYgPSBjcmVhdGUoIFwiZGl2XCIgKVxuZXhwb3J0IGNvbnN0IHNwYW4gPSBjcmVhdGUoIFwic3BhblwiIClcblxuZXhwb3J0IGNvbnN0IHVsID0gY3JlYXRlKCBcInVsXCIgKVxuZXhwb3J0IGNvbnN0IGxpID0gY3JlYXRlKCBcImxpXCIgKVxuXG5leHBvcnQgY29uc3QgZm9ybSA9IGNyZWF0ZSggXCJmb3JtXCIgKVxuZXhwb3J0IGNvbnN0IGlucHV0ID0gY3JlYXRlKCBcImlucHV0XCIgKVxuZXhwb3J0IGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZSggXCJidXR0b25cIiApXG5leHBvcnQgY29uc3Qgc2VsZWN0ID0gY3JlYXRlKCBcInNlbGVjdFwiIClcbmV4cG9ydCBjb25zdCBsYWJlbCA9IGNyZWF0ZSggXCJsYWJlbFwiIClcbmV4cG9ydCBjb25zdCBmaWVsZHNldCA9IGNyZWF0ZSggXCJmaWVsZHNldFwiIClcblxuZXhwb3J0IGNvbnN0IGJvZHkgPSBjcmVhdGUoIFwiYm9keVwiIClcbmV4cG9ydCBjb25zdCBzZWN0aW9uID0gY3JlYXRlKCBcInNlY3Rpb25cIiApXG5leHBvcnQgY29uc3QgaGVhZGVyID0gY3JlYXRlKCBcImhlYWRlclwiIClcbmV4cG9ydCBjb25zdCBmb290ZXIgPSBjcmVhdGUoIFwiZm9vdGVyXCIgKVxuZXhwb3J0IGNvbnN0IG1haW4gPSBjcmVhdGUoIFwibWFpblwiIClcbmV4cG9ydCBjb25zdCBjYW52YXMgPSBjcmVhdGUoIFwiY2FudmFzXCIgKVxuXG5leHBvcnQgY29uc3QgdGV4dEJveCA9ICggbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nICkgPT5cbiAgICBpbnB1dCggeyB0eXBlOiBcInRleHRcIiwgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0gKVxuXG5leHBvcnQgY29uc3QgbGluayA9ICggaHJlZjogc3RyaW5nLCB0ZXh0OiBzdHJpbmcgKSA9PlxuICAgIGEoIHsgaHJlZiB9LCBbIHRleHQgXSApXG5cbmV4cG9ydCBjb25zdCBidWlsZEZvcm1GaWVsZCA9IGZ1bmN0aW9uICggZmllbGQgKSB7XG4gICAgcmV0dXJuIGRpdigge30sIFtcbiAgICAgICAgbGFiZWwoIHsgZm9yOiBmaWVsZC5pZCB9LCBbIGZpZWxkLmxhYmVsIF0gKSxcbiAgICAgICAgaW5wdXQoIHsgdHlwZTogZmllbGQudHlwZSwgaWQ6IGZpZWxkLmlkLCBuYW1lOiBmaWVsZC5pZCwgdmFsdWU6IGZpZWxkLnZhbHVlIHx8IFwiXCIgfSApXG4gICAgXSApXG59XG5cbiJdfQ==