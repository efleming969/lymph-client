describe("message routing", function () {
    const create = function (routes) {
        return function (state) {
            return null;
        };
    };
    const view = create({
        "app:action1": (params) => (state) => state,
        "app:action2": (params) => (state) => state,
        "app:action3:*": (params) => (state) => state,
        "app:action4": (params) => (state) => state,
        "app:*": (params) => (state) => state
    });
    test("handle unknown routes", function () {
        expect(view({ path: "unknown", data: "bar" })).toEqual(null);
    });
    xtest("handle static routes", function () {
        expect(view({ name: "app:action1", data: "bar" })).toEqual("foobar");
        expect(view({ name: "app:action2", data: "bar" })).toEqual("FOOBAR");
    });
    xtest("handle wildcard routes", function () {
        expect(view({ name: "app:action3", data: "bar" })).toEqual("barfoo");
    });
    xtest("forward partial message to wildcard routes", function () {
        expect(view({ name: "app:action3:sub-action1", data: "" })).toEqual("sub-action1");
    });
    xtest("pass an event object", function () {
        expect(view({ name: "app:action4", data: "", event: "event-object" })).toEqual("event-object");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlld1JvdXRlci50ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9WaWV3Um91dGVyLnRlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRTtJQUV6QixNQUFNLE1BQU0sR0FBRyxVQUFXLE1BQU07UUFDNUIsTUFBTSxDQUFDLFVBQVcsS0FBSztZQUNuQixNQUFNLENBQUMsSUFBSSxDQUFBO1FBQ2YsQ0FBQyxDQUFBO0lBQ0wsQ0FBQyxDQUFBO0lBRUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFFO1FBQ2pCLGFBQWEsRUFBRSxDQUFFLE1BQU0sRUFBRyxFQUFFLENBQUMsQ0FBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLEtBQUs7UUFDL0MsYUFBYSxFQUFFLENBQUUsTUFBTSxFQUFHLEVBQUUsQ0FBQyxDQUFFLEtBQUssRUFBRyxFQUFFLENBQUMsS0FBSztRQUMvQyxlQUFlLEVBQUUsQ0FBRSxNQUFNLEVBQUcsRUFBRSxDQUFDLENBQUUsS0FBSyxFQUFHLEVBQUUsQ0FBQyxLQUFLO1FBQ2pELGFBQWEsRUFBRSxDQUFFLE1BQU0sRUFBRyxFQUFFLENBQUMsQ0FBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLEtBQUs7UUFDL0MsT0FBTyxFQUFFLENBQUUsTUFBTSxFQUFHLEVBQUUsQ0FBQyxDQUFFLEtBQUssRUFBRyxFQUFFLENBQUMsS0FBSztLQUM1QyxDQUFFLENBQUE7SUFFSCxJQUFJLENBQUUsdUJBQXVCLEVBQUU7UUFDM0IsTUFBTSxDQUFFLElBQUksQ0FBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFFLENBQUE7SUFDdEUsQ0FBQyxDQUFFLENBQUE7SUFFSCxLQUFLLENBQUUsc0JBQXNCLEVBQUU7UUFDM0IsTUFBTSxDQUFFLElBQUksQ0FBRSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsUUFBUSxDQUFFLENBQUE7UUFDMUUsTUFBTSxDQUFFLElBQUksQ0FBRSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsUUFBUSxDQUFFLENBQUE7SUFDOUUsQ0FBQyxDQUFFLENBQUE7SUFFSCxLQUFLLENBQUUsd0JBQXdCLEVBQUU7UUFDN0IsTUFBTSxDQUFFLElBQUksQ0FBRSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsUUFBUSxDQUFFLENBQUE7SUFDOUUsQ0FBQyxDQUFFLENBQUE7SUFFSCxLQUFLLENBQUUsNENBQTRDLEVBQUU7UUFDakQsTUFBTSxDQUFFLElBQUksQ0FBRSxFQUFFLElBQUksRUFBRSx5QkFBeUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUUsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxhQUFhLENBQUUsQ0FBQTtJQUM1RixDQUFDLENBQUUsQ0FBQTtJQUVILEtBQUssQ0FBRSxzQkFBc0IsRUFBRTtRQUMzQixNQUFNLENBQUUsSUFBSSxDQUFFLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsQ0FBRSxDQUFFLENBQUMsT0FBTyxDQUFFLGNBQWMsQ0FBRSxDQUFBO0lBQ3hHLENBQUMsQ0FBRSxDQUFBO0FBQ1AsQ0FBQyxDQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJkZXNjcmliZSggXCJtZXNzYWdlIHJvdXRpbmdcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgY29uc3QgY3JlYXRlID0gZnVuY3Rpb24gKCByb3V0ZXMgKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoIHN0YXRlICkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHZpZXcgPSBjcmVhdGUoIHtcbiAgICAgICAgXCJhcHA6YWN0aW9uMVwiOiAoIHBhcmFtcyApID0+ICggc3RhdGUgKSA9PiBzdGF0ZSxcbiAgICAgICAgXCJhcHA6YWN0aW9uMlwiOiAoIHBhcmFtcyApID0+ICggc3RhdGUgKSA9PiBzdGF0ZSxcbiAgICAgICAgXCJhcHA6YWN0aW9uMzoqXCI6ICggcGFyYW1zICkgPT4gKCBzdGF0ZSApID0+IHN0YXRlLFxuICAgICAgICBcImFwcDphY3Rpb240XCI6ICggcGFyYW1zICkgPT4gKCBzdGF0ZSApID0+IHN0YXRlLFxuICAgICAgICBcImFwcDoqXCI6ICggcGFyYW1zICkgPT4gKCBzdGF0ZSApID0+IHN0YXRlXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcImhhbmRsZSB1bmtub3duIHJvdXRlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV4cGVjdCggdmlldyggeyBwYXRoOiBcInVua25vd25cIiwgZGF0YTogXCJiYXJcIiB9ICkgKS50b0VxdWFsKCBudWxsIClcbiAgICB9IClcblxuICAgIHh0ZXN0KCBcImhhbmRsZSBzdGF0aWMgcm91dGVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KCB2aWV3KCB7IG5hbWU6IFwiYXBwOmFjdGlvbjFcIiwgZGF0YTogXCJiYXJcIiB9ICkgKS50b0VxdWFsKCBcImZvb2JhclwiIClcbiAgICAgICAgZXhwZWN0KCB2aWV3KCB7IG5hbWU6IFwiYXBwOmFjdGlvbjJcIiwgZGF0YTogXCJiYXJcIiB9ICkgKS50b0VxdWFsKCBcIkZPT0JBUlwiIClcbiAgICB9IClcblxuICAgIHh0ZXN0KCBcImhhbmRsZSB3aWxkY2FyZCByb3V0ZXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QoIHZpZXcoIHsgbmFtZTogXCJhcHA6YWN0aW9uM1wiLCBkYXRhOiBcImJhclwiIH0gKSApLnRvRXF1YWwoIFwiYmFyZm9vXCIgKVxuICAgIH0gKVxuXG4gICAgeHRlc3QoIFwiZm9yd2FyZCBwYXJ0aWFsIG1lc3NhZ2UgdG8gd2lsZGNhcmQgcm91dGVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KCB2aWV3KCB7IG5hbWU6IFwiYXBwOmFjdGlvbjM6c3ViLWFjdGlvbjFcIiwgZGF0YTogXCJcIiB9ICkgKS50b0VxdWFsKCBcInN1Yi1hY3Rpb24xXCIgKVxuICAgIH0gKVxuXG4gICAgeHRlc3QoIFwicGFzcyBhbiBldmVudCBvYmplY3RcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QoIHZpZXcoIHsgbmFtZTogXCJhcHA6YWN0aW9uNFwiLCBkYXRhOiBcIlwiLCBldmVudDogXCJldmVudC1vYmplY3RcIiB9ICkgKS50b0VxdWFsKCBcImV2ZW50LW9iamVjdFwiIClcbiAgICB9IClcbn0gKVxuIl19