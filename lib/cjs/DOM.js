"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const createNodeFrom = function (window, spec) {
    let element = null;
    if (typeof spec === "string") {
        element = window.document.createTextNode(spec);
    }
    else {
        element = window.document.createElement(spec.tagName);
        updateProperties(window, element, spec);
        for (let i = 0, len = spec.children.length; i < len; i++) {
            element.appendChild(createNodeFrom(window, spec.children[i]));
        }
    }
    return element;
};
exports.updateChildren = function (window, oldNode, spec) {
    let oldLength = oldNode.childNodes.length;
    let newLength = spec.children.length;
    for (let i1 = 0; i1 < newLength; i1++) {
        exports.patch(window, oldNode, oldNode.childNodes[i1], spec.children[i1]);
    }
    for (let i2 = 0; i2 < (oldLength - newLength); i2++) {
        oldNode.removeChild(oldNode.lastChild);
    }
};
const updateProperties = function (window, oldNode, spec) {
    if (oldNode._properties) {
        for (let propName of oldNode._properties) {
            if (propName.startsWith("on"))
                oldNode[propName] = function () {
                };
        }
    }
    oldNode._properties = [];
    for (let propName in spec.properties) {
        oldNode._properties.push(propName);
        if (propName.startsWith("on")) {
            oldNode[propName] = (function ([name, data]) {
                return function (event) {
                    const lymph_config = window["lymphConfig"] || { actionName: "action" };
                    this.dispatchEvent(new window["CustomEvent"](lymph_config.actionName, {
                        detail: { name, data, event },
                        bubbles: true,
                        cancelable: true
                    }));
                };
            })(spec.properties[propName]);
        }
        else if (oldNode[propName] !== spec.properties[propName]) {
            oldNode[propName] = spec.properties[propName];
        }
    }
};
exports.patch = function (window, parent, oldNode, spec) {
    if (oldNode === undefined) {
        parent.appendChild(createNodeFrom(window, spec));
    }
    else {
        if (typeof spec === "string" && oldNode.nodeType === Node.TEXT_NODE) {
            if (oldNode.nodeValue !== spec) {
                oldNode.nodeValue = spec;
            }
        }
        else if (oldNode.nodeType === Node.ELEMENT_NODE) {
            if (oldNode.tagName !== spec.tagName) {
                parent.replaceChild(createNodeFrom(window, spec), oldNode);
            }
            else {
                updateProperties(window, oldNode, spec);
                exports.updateChildren(window, oldNode, spec);
            }
        }
        else if (oldNode.nodeType === Node.TEXT_NODE) {
            parent.replaceChild(createNodeFrom(window, spec), oldNode);
        }
        else {
            throw "unknown node";
        }
    }
};
//# sourceMappingURL=data:application/json;base64,