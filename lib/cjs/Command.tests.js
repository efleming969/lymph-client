"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Command = require("./Command");
const TestUtils_1 = require("./TestUtils");
describe("Command", function () {
    test("execute remote command", function (done) {
        const command = Command.execute("/api/post1", { name: "foobar" }, "command-done");
        const window = TestUtils_1.createWindow();
        window.fetch = TestUtils_1.createFakeFetch("/api/post1", { status: 200, data: {} });
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({ name: "command-done", data: {} });
            done();
        });
        Command.process(window, [command]);
    });
    test("execute remote query", function (done) {
        const command = Command.query("/api/get1", "query-done");
        const window = TestUtils_1.createWindow();
        window.fetch = TestUtils_1.createFakeFetch("/api/get1", {
            status: 200,
            data: { name: "response-data" }
        });
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({
                name: "query-done",
                data: { name: "response-data" }
            });
            done();
        });
        Command.process(window, [command]);
    });
    test("save data to local storage", function (done) {
        const command = Command.save("some-data", { name: "some-data" }, "save-done");
        const window = TestUtils_1.createWindow();
        window.localStorage = { setItem: jest.fn() };
        window.addEventListener("action", function (e) {
            expect(window.localStorage.setItem)
                .toHaveBeenCalledWith("some-data", JSON.stringify({ name: "some-data" }));
            done();
        });
        Command.process(window, [command]);
    });
    test("load data from local storage", function (done) {
        const command = Command.load("some-data", "load-done");
        const window = TestUtils_1.createWindow();
        window.localStorage = { getItem: () => JSON.stringify({ name: "some-data" }) };
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({
                name: "load-done",
                data: { name: "some-data" }
            });
            done();
        });
        Command.process(window, [command]);
    });
    test("redirect", function () {
        const window = { location: { assign: jest.fn() } };
        Command.process(window, [Command.redirect("/some/path")]);
        expect(window.location.assign).toHaveBeenCalledWith("/some/path");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZC50ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21tYW5kLnRlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQW9DO0FBQ3BDLDJDQUEyRDtBQUUzRCxRQUFRLENBQUUsU0FBUyxFQUFFO0lBRWpCLElBQUksQ0FBRSx3QkFBd0IsRUFBRSxVQUFXLElBQUk7UUFDM0MsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsY0FBYyxDQUFFLENBQUE7UUFDbkYsTUFBTSxNQUFNLEdBQUcsd0JBQVksRUFBRSxDQUFBO1FBRTdCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsMkJBQWUsQ0FBRSxZQUFZLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBRSxDQUFBO1FBRXpFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFRLEVBQUUsVUFBVyxDQUFDO1lBQzNDLE1BQU0sQ0FBRSxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsT0FBTyxDQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUUsQ0FBQTtZQUNoRSxJQUFJLEVBQUUsQ0FBQTtRQUNWLENBQUMsQ0FBRSxDQUFBO1FBRUgsT0FBTyxDQUFDLE9BQU8sQ0FBRSxNQUFNLEVBQUUsQ0FBRSxPQUFPLENBQUUsQ0FBRSxDQUFBO0lBQzFDLENBQUMsQ0FBRSxDQUFBO0lBRUgsSUFBSSxDQUFFLHNCQUFzQixFQUFFLFVBQVcsSUFBSTtRQUN6QyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFFLFdBQVcsRUFBRSxZQUFZLENBQUUsQ0FBQTtRQUMxRCxNQUFNLE1BQU0sR0FBRyx3QkFBWSxFQUFFLENBQUE7UUFFN0IsTUFBTSxDQUFDLEtBQUssR0FBRywyQkFBZSxDQUFFLFdB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Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQ29tbWFuZCBmcm9tIFwiLi9Db21tYW5kXCJcbmltcG9ydCB7IGNyZWF0ZUZha2VGZXRjaCwgY3JlYXRlV2luZG93IH0gZnJvbSBcIi4vVGVzdFV0aWxzXCJcblxuZGVzY3JpYmUoIFwiQ29tbWFuZFwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICB0ZXN0KCBcImV4ZWN1dGUgcmVtb3RlIGNvbW1hbmRcIiwgZnVuY3Rpb24gKCBkb25lICkge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gQ29tbWFuZC5leGVjdXRlKCBcIi9hcGkvcG9zdDFcIiwgeyBuYW1lOiBcImZvb2JhclwiIH0sIFwiY29tbWFuZC1kb25lXCIgKVxuICAgICAgICBjb25zdCB3aW5kb3cgPSBjcmVhdGVXaW5kb3coKVxuXG4gICAgICAgIHdpbmRvdy5mZXRjaCA9IGNyZWF0ZUZha2VGZXRjaCggXCIvYXBpL3Bvc3QxXCIsIHsgc3RhdHVzOiAyMDAsIGRhdGE6IHt9IH0gKVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImFjdGlvblwiLCBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICBleHBlY3QoIGUuZGV0YWlsICkudG9FcXVhbCggeyBuYW1lOiBcImNvbW1hbmQtZG9uZVwiLCBkYXRhOiB7fSB9IClcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9IClcblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgWyBjb21tYW5kIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJleGVjdXRlIHJlbW90ZSBxdWVyeVwiLCBmdW5jdGlvbiAoIGRvbmUgKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBDb21tYW5kLnF1ZXJ5KCBcIi9hcGkvZ2V0MVwiLCBcInF1ZXJ5LWRvbmVcIiApXG4gICAgICAgIGNvbnN0IHdpbmRvdyA9IGNyZWF0ZVdpbmRvdygpXG5cbiAgICAgICAgd2luZG93LmZldGNoID0gY3JlYXRlRmFrZUZldGNoKCBcIi9hcGkvZ2V0MVwiLCB7XG4gICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgIGRhdGE6IHsgbmFtZTogXCJyZXNwb25zZS1kYXRhXCIgfVxuICAgICAgICB9IClcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJhY3Rpb25cIiwgZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgZXhwZWN0KCBlLmRldGFpbCApLnRvRXF1YWwoIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInF1ZXJ5LWRvbmVcIixcbiAgICAgICAgICAgICAgICBkYXRhOiB7IG5hbWU6IFwicmVzcG9uc2UtZGF0YVwiIH1cbiAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBbIGNvbW1hbmQgXSApXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcInNhdmUgZGF0YSB0byBsb2NhbCBzdG9yYWdlXCIsIGZ1bmN0aW9uICggZG9uZSApIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IENvbW1hbmQuc2F2ZSggXCJzb21lLWRhdGFcIiwgeyBuYW1lOiBcInNvbWUtZGF0YVwiIH0sIFwic2F2ZS1kb25lXCIgKVxuICAgICAgICBjb25zdCB3aW5kb3cgPSBjcmVhdGVXaW5kb3coKVxuXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UgPSB7IHNldEl0ZW06IGplc3QuZm4oKSB9XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwiYWN0aW9uXCIsIGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgIGV4cGVjdCggd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtIClcbiAgICAgICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZFdpdGgoIFwic29tZS1kYXRhXCIsIEpTT04uc3RyaW5naWZ5KCB7IG5hbWU6IFwic29tZS1kYXRhXCIgfSApIClcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9IClcblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgWyBjb21tYW5kIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJsb2FkIGRhdGEgZnJvbSBsb2NhbCBzdG9yYWdlXCIsIGZ1bmN0aW9uICggZG9uZSApIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IENvbW1hbmQubG9hZCggXCJzb21lLWRhdGFcIiwgXCJsb2FkLWRvbmVcIiApXG4gICAgICAgIGNvbnN0IHdpbmRvdyA9IGNyZWF0ZVdpbmRvdygpXG5cbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZSA9IHsgZ2V0SXRlbTogKCkgPT4gSlNPTi5zdHJpbmdpZnkoIHsgbmFtZTogXCJzb21lLWRhdGFcIiB9ICkgfVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImFjdGlvblwiLCBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICBleHBlY3QoIGUuZGV0YWlsICkudG9FcXVhbCgge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwibG9hZC1kb25lXCIsXG4gICAgICAgICAgICAgICAgZGF0YTogeyBuYW1lOiBcInNvbWUtZGF0YVwiIH1cbiAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBbIGNvbW1hbmQgXSApXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcInJlZGlyZWN0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgd2luZG93ID0geyBsb2NhdGlvbjogeyBhc3NpZ246IGplc3QuZm4oKSB9IH1cblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgWyBDb21tYW5kLnJlZGlyZWN0KCBcIi9zb21lL3BhdGhcIiApIF0gKVxuXG4gICAgICAgIGV4cGVjdCggd2luZG93LmxvY2F0aW9uLmFzc2lnbiApLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCBcIi9zb21lL3BhdGhcIiApXG4gICAgfSApXG59ICkiXX0=