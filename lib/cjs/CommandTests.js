"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Command = require("./Command");
var TestUtils_1 = require("./TestUtils");
describe("Command", function () {
    test("execute remote command", function (done) {
        var command = Command.execute("/api/post1", { name: "foobar" }, "command-done");
        var window = TestUtils_1.createWindow();
        window.fetch = TestUtils_1.createFakeFetch({ status: 200, data: {} });
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({ name: "command-done", data: {} });
            done();
        });
        Command.process(window, [command]);
    });
    test("execute remote query", function (done) {
        var command = Command.query("/api/get1", "query-done");
        var window = TestUtils_1.createWindow();
        window.fetch = TestUtils_1.createFakeFetch({ status: 200, data: { name: "response-data" } });
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({ name: "query-done", data: { name: "response-data" } });
            done();
        });
        Command.process(window, [command]);
    });
    test("save data to local storage", function (done) {
        var command = Command.save("some-data", { name: "some-data" }, "save-done");
        var window = TestUtils_1.createWindow();
        window.localStorage = { setItem: jest.fn() };
        window.addEventListener("action", function (e) {
            expect(window.localStorage.setItem)
                .toHaveBeenCalledWith("some-data", JSON.stringify({ name: "some-data" }));
            done();
        });
        Command.process(window, [command]);
    });
    test("load data from local storage", function (done) {
        var command = Command.load("some-data", "load-done");
        var window = TestUtils_1.createWindow();
        window.localStorage = { getItem: function () { return JSON.stringify({ name: "some-data" }); } };
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({ name: "load-done", data: { name: "some-data" } });
            done();
        });
        Command.process(window, [command]);
    });
    test("redirect", function () {
        var window = { location: { assign: jest.fn() } };
        Command.process(window, [Command.redirect("/some/path")]);
        expect(window.location.assign).toHaveBeenCalledWith("/some/path");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZFRlc3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0NvbW1hbmRUZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFvQztBQUNwQyx5Q0FBMkQ7QUFFM0QsUUFBUSxDQUFFLFNBQVMsRUFBRTtJQUVqQixJQUFJLENBQUUsd0JBQXdCLEVBQUUsVUFBVyxJQUFJO1FBQzNDLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUUsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLGNBQWMsQ0FBRSxDQUFBO1FBQ25GLElBQU0sTUFBTSxHQUFHLHdCQUFZLEVBQUUsQ0FBQTtRQUU3QixNQUFNLENBQUMsS0FBSyxHQUFHLDJCQUFlLENBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBRSxDQUFBO1FBRTNELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFRLEVBQUUsVUFBVyxDQUFDO1lBQzNDLE1BQU0sQ0FBRSxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsT0FBTyxDQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUUsQ0FBQTtZQUNoRSxJQUFJLEVBQUUsQ0FBQTtRQUNWLENBQUMsQ0FBRSxDQUFBO1FBRUgsT0FBTyxDQUFDLE9BQU8sQ0FBRSxNQUFNLEVBQUUsQ0FBRSxPQUFPLENBQUUsQ0FBRSxDQUFBO0lBQzFDLENBQUMsQ0FBRSxDQUFBO0lBRUgsSUFBSSxDQUFFLHNCQUFzQixFQUFFLFVBQVcsSUFBSTtRQUN6QyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFFLFdBQVcsRUFBRSxZQUFZLENBQUUsQ0FBQTtRQUMxRCxJQUFNLE1BQU0sR0FBRyx3QkFBWSxFQUFFLENBQUE7UUFFN0IsTUFBTSxDQUFDLEtBQUssR0FBRywyQkFBZSxDQUFFLEVBQUUsTUFBTSxFQUFF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b3J0ICogYXMgQ29tbWFuZCBmcm9tIFwiLi9Db21tYW5kXCJcbmltcG9ydCB7IGNyZWF0ZUZha2VGZXRjaCwgY3JlYXRlV2luZG93IH0gZnJvbSBcIi4vVGVzdFV0aWxzXCJcblxuZGVzY3JpYmUoIFwiQ29tbWFuZFwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICB0ZXN0KCBcImV4ZWN1dGUgcmVtb3RlIGNvbW1hbmRcIiwgZnVuY3Rpb24gKCBkb25lICkge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gQ29tbWFuZC5leGVjdXRlKCBcIi9hcGkvcG9zdDFcIiwgeyBuYW1lOiBcImZvb2JhclwiIH0sIFwiY29tbWFuZC1kb25lXCIgKVxuICAgICAgICBjb25zdCB3aW5kb3cgPSBjcmVhdGVXaW5kb3coKVxuXG4gICAgICAgIHdpbmRvdy5mZXRjaCA9IGNyZWF0ZUZha2VGZXRjaCggeyBzdGF0dXM6IDIwMCwgZGF0YToge30gfSApXG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwiYWN0aW9uXCIsIGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgIGV4cGVjdCggZS5kZXRhaWwgKS50b0VxdWFsKCB7IG5hbWU6IFwiY29tbWFuZC1kb25lXCIsIGRhdGE6IHt9IH0gKVxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBbIGNvbW1hbmQgXSApXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcImV4ZWN1dGUgcmVtb3RlIHF1ZXJ5XCIsIGZ1bmN0aW9uICggZG9uZSApIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IENvbW1hbmQucXVlcnkoIFwiL2FwaS9nZXQxXCIsIFwicXVlcnktZG9uZVwiIClcbiAgICAgICAgY29uc3Qgd2luZG93ID0gY3JlYXRlV2luZG93KClcblxuICAgICAgICB3aW5kb3cuZmV0Y2ggPSBjcmVhdGVGYWtlRmV0Y2goIHsgc3RhdHVzOiAyMDAsIGRhdGE6IHsgbmFtZTogXCJyZXNwb25zZS1kYXRhXCIgfSB9IClcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJhY3Rpb25cIiwgZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgZXhwZWN0KCBlLmRldGFpbCApLnRvRXF1YWwoIHsgbmFtZTogXCJxdWVyeS1kb25lXCIsIGRhdGE6IHsgbmFtZTogXCJyZXNwb25zZS1kYXRhXCIgfSB9IClcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9IClcblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgWyBjb21tYW5kIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJzYXZlIGRhdGEgdG8gbG9jYWwgc3RvcmFnZVwiLCBmdW5jdGlvbiAoIGRvbmUgKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBDb21tYW5kLnNhdmUoIFwic29tZS1kYXRhXCIsIHsgbmFtZTogXCJzb21lLWRhdGFcIiB9LCBcInNhdmUtZG9uZVwiIClcbiAgICAgICAgY29uc3Qgd2luZG93ID0gY3JlYXRlV2luZG93KClcblxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlID0geyBzZXRJdGVtOiBqZXN0LmZuKCkgfVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImFjdGlvblwiLCBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICBleHBlY3QoIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSApXG4gICAgICAgICAgICAgICAgLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCBcInNvbWUtZGF0YVwiLCBKU09OLnN0cmluZ2lmeSggeyBuYW1lOiBcInNvbWUtZGF0YVwiIH0gKSApXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSApXG5cbiAgICAgICAgQ29tbWFuZC5wcm9jZXNzKCB3aW5kb3csIFsgY29tbWFuZCBdIClcbiAgICB9IClcblxuICAgIHRlc3QoIFwibG9hZCBkYXRhIGZyb20gbG9jYWwgc3RvcmFnZVwiLCBmdW5jdGlvbiAoIGRvbmUgKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBDb21tYW5kLmxvYWQoIFwic29tZS1kYXRhXCIsIFwibG9hZC1kb25lXCIgKVxuICAgICAgICBjb25zdCB3aW5kb3cgPSBjcmVhdGVXaW5kb3coKVxuXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UgPSB7IGdldEl0ZW06ICgpID0+IEpTT04uc3RyaW5naWZ5KCB7IG5hbWU6IFwic29tZS1kYXRhXCIgfSApIH1cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJhY3Rpb25cIiwgZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgZXhwZWN0KCBlLmRldGFpbCApLnRvRXF1YWwoIHsgbmFtZTogXCJsb2FkLWRvbmVcIiwgZGF0YTogeyBuYW1lOiBcInNvbWUtZGF0YVwiIH0gfSApXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSApXG5cbiAgICAgICAgQ29tbWFuZC5wcm9jZXNzKCB3aW5kb3csIFsgY29tbWFuZCBdIClcbiAgICB9IClcblxuICAgIHRlc3QoIFwicmVkaXJlY3RcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCB3aW5kb3cgPSB7IGxvY2F0aW9uOiB7IGFzc2lnbjogamVzdC5mbigpIH0gfVxuXG4gICAgICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBbIENvbW1hbmQucmVkaXJlY3QoIFwiL3NvbWUvcGF0aFwiICkgXSApXG5cbiAgICAgICAgZXhwZWN0KCB3aW5kb3cubG9jYXRpb24uYXNzaWduICkudG9IYXZlQmVlbkNhbGxlZFdpdGgoIFwiL3NvbWUvcGF0aFwiIClcbiAgICB9IClcbn0gKSJdfQ==