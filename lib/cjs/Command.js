"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = require("./Utils");
var HTTP = require("./HTTP");
exports.process = function (window, command) {
    var dispatchAction = Utils.dispatchAction(window);
    var sendCommand = HTTP.sendCommand(window.fetch);
    var sendQuery = HTTP.sendQuery(window.fetch);
    if (command != null) {
        if (command.type === "execute") {
            sendCommand(command.url, command.data, command.token).then(function (response) {
                dispatchAction({
                    name: command.action,
                    data: { body: response.data, status: response.status }
                });
            });
        }
        else if (command.type === "query") {
            sendQuery(command.url, command.token).then(function (response) {
                dispatchAction({
                    name: command.action,
                    data: { body: response.data, status: response.status }
                });
            });
        }
        else if (command.type === "load") {
            setTimeout(function () {
                var data = JSON.parse(window.localStorage.getItem(command.location));
                dispatchAction({ name: command.action, data: data });
            }, 0);
        }
        else if (command.type === "save") {
            setTimeout(function () {
                window.localStorage.setItem(command.location, JSON.stringify(command.data));
                if (command.action)
                    dispatchAction({ name: command.action });
            }, 0);
        }
        else if (command.type === "redirect") {
            console.log("redirecting", command.path);
            setTimeout(function () {
                window.location.assign(command.path);
            }, 0);
        }
        // else if ( window.config.commands && window.config.commands[ command.type ] ) {
        //     window.config.commands[ command.type ]( command )
        // }
    }
};
exports.execute = function (url, data, action, token) {
    return { type: "execute", url: url, data: data, action: action, token: token };
};
exports.query = function (url, action, token) {
    return { type: "query", url: url, action: action, token: token };
};
exports.redirect = function (path) {
    return { type: "redirect", path: path };
};
exports.load = function (location, action) {
    return { type: "load", location: location, action: action };
};
exports.save = function (location, data, action) {
    return { type: "save", location: location, data: data, action: action };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQWdDO0FBQ2hDLDZCQUE4QjtBQUVqQixRQUFBLE9BQU8sR0FBRyxVQUFXLE1BQU0sRUFBRSxPQUFPO0lBQzdDLElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUUsTUFBTSxDQUFFLENBQUE7SUFDckQsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUE7SUFDcEQsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUE7SUFFaEQsRUFBRSxDQUFDLENBQUUsT0FBTyxJQUFJLElBQUssQ0FBQyxDQUFDLENBQUM7UUFDcEIsRUFBRSxDQUFDLENBQUUsT0FBTyxDQUFDLElBQUksS0FBSyxTQUFVLENBQUMsQ0FBQyxDQUFDO1lBQy9CLFdBQVcsQ0FBRSxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFXLFFBQVE7Z0JBQzdFLGNBQWMsQ0FBRTtvQkFDWixJQUFJLEVBQUUsT0FBTyxDQUFDLE1BQU07b0JBQ3BCLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTSxFQUFFO2lCQUN6RCxDQUFFLENBQUE7WUFDUCxDQUFDLENBQUUsQ0FBQTtRQUNQLENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUUsT0FBTyxDQUFDLElBQUksS0FBSyxPQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLFNBQVMsQ0FBRSxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUUsQ0FBQyxJQUFJLENBQUUsVUFBVyxR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RSxRQUFRLFVBQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFBO0FBQ25ELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCJcbmltcG9ydCAqIGFzIEhUVFAgZnJvbSBcIi4vSFRUUFwiXG5cbmV4cG9ydCBjb25zdCBwcm9jZXNzID0gZnVuY3Rpb24gKCB3aW5kb3csIGNvbW1hbmQgKSB7XG4gICAgY29uc3QgZGlzcGF0Y2hBY3Rpb24gPSBVdGlscy5kaXNwYXRjaEFjdGlvbiggd2luZG93IClcbiAgICBjb25zdCBzZW5kQ29tbWFuZCA9IEhUVFAuc2VuZENvbW1hbmQoIHdpbmRvdy5mZXRjaCApXG4gICAgY29uc3Qgc2VuZFF1ZXJ5ID0gSFRUUC5zZW5kUXVlcnkoIHdpbmRvdy5mZXRjaCApXG5cbiAgICBpZiAoIGNvbW1hbmQgIT0gbnVsbCApIHtcbiAgICAgICAgaWYgKCBjb21tYW5kLnR5cGUgPT09IFwiZXhlY3V0ZVwiICkge1xuICAgICAgICAgICAgc2VuZENvbW1hbmQoIGNvbW1hbmQudXJsLCBjb21tYW5kLmRhdGEsIGNvbW1hbmQudG9rZW4gKS50aGVuKCBmdW5jdGlvbiAoIHJlc3BvbnNlICkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoQWN0aW9uKCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGNvbW1hbmQuYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGJvZHk6IHJlc3BvbnNlLmRhdGEsIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzIH1cbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCBjb21tYW5kLnR5cGUgPT09IFwicXVlcnlcIiApIHtcbiAgICAgICAgICAgIHNlbmRRdWVyeSggY29tbWFuZC51cmwsIGNvbW1hbmQudG9rZW4gKS50aGVuKCBmdW5jdGlvbiAoIHJlc3BvbnNlICkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoQWN0aW9uKCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGNvbW1hbmQuYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGJvZHk6IHJlc3BvbnNlLmRhdGEsIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzIH1cbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCBjb21tYW5kLnR5cGUgPT09IFwibG9hZFwiICkge1xuICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKCB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oIGNvbW1hbmQubG9jYXRpb24gKSApXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hBY3Rpb24oIHsgbmFtZTogY29tbWFuZC5hY3Rpb24sIGRhdGEgfSApXG4gICAgICAgICAgICB9LCAwIClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggY29tbWFuZC50eXBlID09PSBcInNhdmVcIiApIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oIGNvbW1hbmQubG9jYXRpb24sIEpTT04uc3RyaW5naWZ5KCBjb21tYW5kLmRhdGEgKSApXG4gICAgICAgICAgICAgICAgaWYgKCBjb21tYW5kLmFjdGlvbiApXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoQWN0aW9uKCB7IG5hbWU6IGNvbW1hbmQuYWN0aW9uIH0gKVxuICAgICAgICAgICAgfSwgMCApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIGNvbW1hbmQudHlwZSA9PT0gXCJyZWRpcmVjdFwiICkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coIFwicmVkaXJlY3RpbmdcIiwgY29tbWFuZC5wYXRoIClcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKCBjb21tYW5kLnBhdGggKVxuICAgICAgICAgICAgfSwgMCApXG4gICAgICAgIH1cbiAgICAgICAgLy8gZWxzZSBpZiAoIHdpbmRvdy5jb25maWcuY29tbWFuZHMgJiYgd2luZG93LmNvbmZpZy5jb21tYW5kc1sgY29tbWFuZC50eXBlIF0gKSB7XG4gICAgICAgIC8vICAgICB3aW5kb3cuY29uZmlnLmNvbW1hbmRzWyBjb21tYW5kLnR5cGUgXSggY29tbWFuZCApXG4gICAgICAgIC8vIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlID0gZnVuY3Rpb24gKCB1cmwsIGRhdGEsIGFjdGlvbiwgdG9rZW4/ICkge1xuICAgIHJldHVybiB7IHR5cGU6IFwiZXhlY3V0ZVwiLCB1cmwsIGRhdGEsIGFjdGlvbiwgdG9rZW4gfVxufVxuXG5leHBvcnQgY29uc3QgcXVlcnkgPSBmdW5jdGlvbiAoIHVybCwgYWN0aW9uLCB0b2tlbj8gKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJxdWVyeVwiLCB1cmwsIGFjdGlvbiwgdG9rZW4gfVxufVxuXG5leHBvcnQgY29uc3QgcmVkaXJlY3QgPSBmdW5jdGlvbiAoIHBhdGggKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJyZWRpcmVjdFwiLCBwYXRoIH1cbn1cblxuZXhwb3J0IGNvbnN0IGxvYWQgPSBmdW5jdGlvbiAoIGxvY2F0aW9uLCBhY3Rpb24gKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJsb2FkXCIsIGxvY2F0aW9uLCBhY3Rpb24gfVxufVxuXG5leHBvcnQgY29uc3Qgc2F2ZSA9IGZ1bmN0aW9uICggbG9jYXRpb24sIGRhdGEsIGFjdGlvbj8gKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJzYXZlXCIsIGxvY2F0aW9uLCBkYXRhLCBhY3Rpb24gfVxufVxuXG4iXX0=