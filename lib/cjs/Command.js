"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Execute {
    constructor(url, data, action, token) {
        this.url = url;
        this.data = data;
        this.action = action;
        this.token = token;
    }
    executeIn(environment) {
        const action_name = this.action;
        environment.post(this.url, this.data, this.token)
            .then(function (response_data) {
            environment.dispatch(action_name, response_data);
        });
    }
}
exports.Execute = Execute;
exports.execute = function (url, data, action, token) {
    return new Execute(url, data, action, token);
};
class Query {
    constructor(url, action, token) {
        this.url = url;
        this.action = action;
        this.token = token;
    }
    executeIn(environment) {
        const action_name = this.action;
        environment.get(this.url, this.token).then(function (response_data) {
            environment.dispatch(action_name, response_data);
        });
    }
}
exports.Query = Query;
exports.query = function (url, action, token) {
    return new Query(url, action, token);
};
class ReadStorage {
    constructor(location, action) {
        this.location = location;
        this.action = action;
    }
    executeIn(environment) {
        const data = JSON.parse(environment.readStorage(this.location));
        environment.dispatch(this.action, data);
    }
}
exports.ReadStorage = ReadStorage;
exports.read = function (location, action) {
    return new ReadStorage(location, action);
};
class WriteStorage {
    constructor(location, data, action) {
        this.location = location;
        this.data = data;
        this.action = action;
    }
    executeIn(environment) {
        environment.writeStorage(this.location, JSON.stringify(this.data));
        if (this.action)
            environment.dispatch(this.action, this.data);
    }
}
exports.WriteStorage = WriteStorage;
exports.write = function (location, data, action) {
    return new WriteStorage(location, data, action);
};
class Redirect {
    constructor(path) {
        this.path = path;
    }
    executeIn(environment) {
        environment.changeLocation(this.path);
    }
}
exports.Redirect = Redirect;
exports.redirect = function (path) {
    return new Redirect(path);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUE7SUFDSSxZQUFzQixHQUFXLEVBQ1gsSUFBUyxFQUNULE1BQWMsRUFDZCxLQUF5QjtRQUh6QixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQ1gsU0FBSSxHQUFKLElBQUksQ0FBSztRQUNULFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxVQUFLLEdBQUwsS0FBSyxDQUFvQjtJQUMvQyxDQUFDO0lBRUQsU0FBUyxDQUFHLFdBQXdCO1FBQ2hDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7UUFFL0IsV0FBVyxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBRTthQUM5QyxJQUFJLENBQUUsVUFBVyxhQUFhO1lBQzNCLFdBQVcsQ0FBQyxRQUFRLENBQUUsV0FBVyxFQUFFLGFBQWEsQ0FBRSxDQUFBO1FBQ3RELENBQUMsQ0FBRSxDQUFBO0lBQ1gsQ0FBQztDQUNKO0FBZkQsMEJBZUM7QUFFWSxRQUFBLE9BQU8sR0FBRyxVQUFXLEdBQVcsRUFBRSxJQUFTLEVBQUUsTUFBYyxFQUFFLEtBQWM7SUFDcEYsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBRSxDQUFBO0FBQ2xELENBQUMsQ0FBQTtBQUVEO0lBQ0ksWUFBc0IsR0FBVyxFQUNYLE1BQWMsRUFDZCxLQUF5QjtRQUZ6QixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQ1gsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFVBQUssR0FBTCxLQUFLLENBQW9CO0lBQy9DLENBQUM7SUFFRCxTQUFTLENBQUcsV0FBd0I7UUFDaEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUUvQixXQUFXLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFXLGFBQWE7WUFDbEUsV0FBVyxDQUFDLFFBQVEsQ0FBRSxXQUFXLEVBQUUsYUFBYSxDQUFFLENBQUE7UUFDdEQsQ0FBQyxDQUFFLENBQUE7SUFDUCxDQUFDO0NBQ0o7QUFiRCxzQkFhQztBQUVZLFFBQUEsS0FBSyxHQUFHLFVBQVcsR0FBVyxFQUFFLE1BQWMsRUFBRSxLQUFjO0lBQ3ZFLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBRSxDQUFBO0FBQzFDLENBQUMsQ0FBQTtBQUVEO0lBQ0ksWUFBc0IsUUFBZ0IsRUFDaEIsTUFBYztRQURkLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUNwQyxDQUFDO0lBRUQsU0FBUyxDQUFHLFdBQXdCO1FBQ2hDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBRSxJQUFJLENBQUMsUUFBUSxDQUFFLENBQUUsQ0FBQTtRQUNuRSxXQUFXLENBQUMsUUFBUSxDQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFFLENBQUE7SUFDN0MsQ0FBQztDQUNKO0FBVEQsa0NBU0M7QUFFWSxRQUFBLElBQUksR0FBRyxVQUFXLFFBQWdCLEVBQUUsTUFBYztJQUMzRCxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBRSxDQUFBO0FBQzlDLENBQUMsQ0FBQTtBQUVEO0lBQ0ksWUFBc0IsUUFBZ0IsRUFDaEIsSUFBUyxFQUNULE1BQTBCO1FBRjFCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsU0FBSSxHQUFKLElBQUksQ0FBSztRQUNULFdBQU0sR0FBTixNQUFNLENBQW9CO0lBQ2hELENBQUM7SUFFRCxTQUFTLENBQUcsV0FBd0I7UUFDaEMsV0FBVyxDQUFDLFlBQVksQ0FBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFFLENBQUE7UUFDdEUsRUFBRSxDQUFDLENBQUUsSUFBSSxDQUFDLE1BQU8sQ0FBQztZQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFFLENBQUE7SUFDckUsQ0FBQztDQUNKO0FBVkQsb0NBVUM7QUFFWSxRQUFBLEtBQUssR0FBRyxVQUFXLFFBQWdCLEVBQUUsSUFBUyxFQUFFLE1BQWU7SUFDeEUsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFFLENBQUE7QUFDckQsQ0FBQyxDQUFBO0FBRUQ7SUFDSSxZQUFzQixJQUFZO1FBQVosU0FBSSxHQUFKLElBQUksQ0FBUTtJQUNsQyxDQUFDO0lBRUQsU0FBUyxDQUFHLFdBQXdCO1FBQ2hDLFdBQVcsQ0FBQyxjQUFjLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFBO0lBQzNDLENBQUM7Q0FDSjtBQVBELDRCQU9DO0FBRVksUUFBQSxRQUFRLEdBQUcsVUFBVyxJQUFZO0lBQzNDLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBRSxJQUFJLENBQUUsQ0FBQTtBQUMvQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gXCIuL0Vudmlyb25tZW50XCJcblxuZXhwb3J0IGludGVyZmFjZSBDb21tYW5kIHtcbiAgICBleGVjdXRlSW4oIGVudmlyb25tZW50OiBFbnZpcm9ubWVudCApOiB2b2lkXG59XG5cbmV4cG9ydCBjbGFzcyBFeGVjdXRlIGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCBwcml2YXRlIHVybDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBkYXRhOiBhbnksXG4gICAgICAgICAgICAgICAgICBwcml2YXRlIGFjdGlvbjogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgcHJpdmF0ZSB0b2tlbjogc3RyaW5nIHwgdW5kZWZpbmVkICkge1xuICAgIH1cblxuICAgIGV4ZWN1dGVJbiAoIGVudmlyb25tZW50OiBFbnZpcm9ubWVudCApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYWN0aW9uX25hbWUgPSB0aGlzLmFjdGlvblxuXG4gICAgICAgIGVudmlyb25tZW50LnBvc3QoIHRoaXMudXJsLCB0aGlzLmRhdGEsIHRoaXMudG9rZW4gKVxuICAgICAgICAgICAgLnRoZW4oIGZ1bmN0aW9uICggcmVzcG9uc2VfZGF0YSApIHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudC5kaXNwYXRjaCggYWN0aW9uX25hbWUsIHJlc3BvbnNlX2RhdGEgKVxuICAgICAgICAgICAgfSApXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZSA9IGZ1bmN0aW9uICggdXJsOiBzdHJpbmcsIGRhdGE6IGFueSwgYWN0aW9uOiBzdHJpbmcsIHRva2VuPzogc3RyaW5nICkge1xuICAgIHJldHVybiBuZXcgRXhlY3V0ZSggdXJsLCBkYXRhLCBhY3Rpb24sIHRva2VuIClcbn1cblxuZXhwb3J0IGNsYXNzIFF1ZXJ5IGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCBwcml2YXRlIHVybDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBhY3Rpb246IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgIHByaXZhdGUgdG9rZW46IHN0cmluZyB8IHVuZGVmaW5lZCApIHtcbiAgICB9XG5cbiAgICBleGVjdXRlSW4gKCBlbnZpcm9ubWVudDogRW52aXJvbm1lbnQgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGFjdGlvbl9uYW1lID0gdGhpcy5hY3Rpb25cblxuICAgICAgICBlbnZpcm9ubWVudC5nZXQoIHRoaXMudXJsLCB0aGlzLnRva2VuICkudGhlbiggZnVuY3Rpb24gKCByZXNwb25zZV9kYXRhICkge1xuICAgICAgICAgICAgZW52aXJvbm1lbnQuZGlzcGF0Y2goIGFjdGlvbl9uYW1lLCByZXNwb25zZV9kYXRhIClcbiAgICAgICAgfSApXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgcXVlcnkgPSBmdW5jdGlvbiAoIHVybDogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgdG9rZW4/OiBzdHJpbmcgKSB7XG4gICAgcmV0dXJuIG5ldyBRdWVyeSggdXJsLCBhY3Rpb24sIHRva2VuIClcbn1cblxuZXhwb3J0IGNsYXNzIFJlYWRTdG9yYWdlIGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCBwcml2YXRlIGxvY2F0aW9uOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICBwcml2YXRlIGFjdGlvbjogc3RyaW5nICkge1xuICAgIH1cblxuICAgIGV4ZWN1dGVJbiAoIGVudmlyb25tZW50OiBFbnZpcm9ubWVudCApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoIGVudmlyb25tZW50LnJlYWRTdG9yYWdlKCB0aGlzLmxvY2F0aW9uICkgKVxuICAgICAgICBlbnZpcm9ubWVudC5kaXNwYXRjaCggdGhpcy5hY3Rpb24sIGRhdGEgKVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlYWQgPSBmdW5jdGlvbiAoIGxvY2F0aW9uOiBzdHJpbmcsIGFjdGlvbjogc3RyaW5nICkge1xuICAgIHJldHVybiBuZXcgUmVhZFN0b3JhZ2UoIGxvY2F0aW9uLCBhY3Rpb24gKVxufVxuXG5leHBvcnQgY2xhc3MgV3JpdGVTdG9yYWdlIGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCBwcml2YXRlIGxvY2F0aW9uOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICBwcml2YXRlIGRhdGE6IGFueSxcbiAgICAgICAgICAgICAgICAgIHByaXZhdGUgYWN0aW9uOiBzdHJpbmcgfCB1bmRlZmluZWQgKSB7XG4gICAgfVxuXG4gICAgZXhlY3V0ZUluICggZW52aXJvbm1lbnQ6IEVudmlyb25tZW50ICk6IHZvaWQge1xuICAgICAgICBlbnZpcm9ubWVudC53cml0ZVN0b3JhZ2UoIHRoaXMubG9jYXRpb24sIEpTT04uc3RyaW5naWZ5KCB0aGlzLmRhdGEgKSApXG4gICAgICAgIGlmICggdGhpcy5hY3Rpb24gKSBlbnZpcm9ubWVudC5kaXNwYXRjaCggdGhpcy5hY3Rpb24sIHRoaXMuZGF0YSApXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3Qgd3JpdGUgPSBmdW5jdGlvbiAoIGxvY2F0aW9uOiBzdHJpbmcsIGRhdGE6IGFueSwgYWN0aW9uPzogc3RyaW5nICkge1xuICAgIHJldHVybiBuZXcgV3JpdGVTdG9yYWdlKCBsb2NhdGlvbiwgZGF0YSwgYWN0aW9uIClcbn1cblxuZXhwb3J0IGNsYXNzIFJlZGlyZWN0IGltcGxlbWVudHMgQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCBwcml2YXRlIHBhdGg6IHN0cmluZyApIHtcbiAgICB9XG5cbiAgICBleGVjdXRlSW4gKCBlbnZpcm9ubWVudDogRW52aXJvbm1lbnQgKSB7XG4gICAgICAgIGVudmlyb25tZW50LmNoYW5nZUxvY2F0aW9uKCB0aGlzLnBhdGggKVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlZGlyZWN0ID0gZnVuY3Rpb24gKCBwYXRoOiBzdHJpbmcgKTogUmVkaXJlY3Qge1xuICAgIHJldHVybiBuZXcgUmVkaXJlY3QoIHBhdGggKVxufVxuIl19