"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HTTP_1 = require("./HTTP");
class Execute {
    constructor(url, data, action, token) {
        this.url = url;
        this.data = data;
        this.action = action;
        this.token = token;
    }
    executeIn(environment) {
        const fetch_options = HTTP_1.createFetchOptions("POST", this.token, this.data);
        const action_name = this.action;
        environment.fetch(this.url, fetch_options).then(function (response) {
            return response.json().then(function (response_data) {
                if (response.status === 400)
                    throw response_data;
                environment.dispatch(action_name, response_data);
            });
        });
    }
}
exports.Execute = Execute;
exports.execute = function (url, data, action, token) {
    return new Execute(url, data, action, token);
};
class Query {
    constructor(url, action, token) {
        this.url = url;
        this.action = action;
        this.token = token;
    }
    executeIn(environment) {
        const fetch_options = HTTP_1.createFetchOptions("GET", this.token, null);
        const action_name = this.action;
        environment.fetch(this.url, fetch_options).then(function (response) {
            return response.json().then(function (response_data) {
                if (response.status === 400)
                    throw response_data;
                environment.dispatch(action_name, response_data);
            });
        });
    }
}
exports.Query = Query;
exports.query = function (url, action, token) {
    return new Query(url, action, token);
};
class ReadStorage {
    constructor(location, action) {
        this.location = location;
        this.action = action;
    }
    executeIn(environment) {
        const data = JSON.parse(environment.readStorage(this.location));
        environment.dispatch(this.action, data);
    }
}
exports.ReadStorage = ReadStorage;
exports.read = function (location, action) {
    return new ReadStorage(location, action);
};
class WriteStorage {
    constructor(location, data, action) {
        this.location = location;
        this.data = data;
        this.action = action;
    }
    executeIn(environment) {
        environment.writeStorage(this.location, JSON.stringify(this.data));
        if (this.action)
            environment.dispatch(this.action, this.data);
    }
}
exports.WriteStorage = WriteStorage;
exports.write = function (location, data, action) {
    return new WriteStorage(location, data, action);
};
class Redirect {
    constructor(path) {
        this.path = path;
    }
    executeIn(environment) {
        environment.changeLocation(this.path);
    }
}
exports.Redirect = Redirect;
exports.redirect = function (path) {
    return new Redirect(path);
};
class None {
    executeIn(environment) {
    }
}
exports.None = None;
exports.none = new None();
//# sourceMappingURL=data:application/json;base64,