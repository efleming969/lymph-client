"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = require("./Utils");
var HTTP = require("./HTTP");
exports.process = function (window, commands) {
    var dispatchAction = Utils.dispatchAction(window);
    var sendCommand = HTTP.sendCommand(window.fetch);
    var sendQuery = HTTP.sendQuery(window.fetch);
    if (commands !== undefined) {
        var _loop_1 = function (i) {
            var command = commands[i];
            if (command.type === "execute") {
                sendCommand(command.url, command.data, command.token).then(function (response) {
                    dispatchAction({
                        name: command.action,
                        data: { body: response.data, status: response.status }
                    });
                });
            }
            else if (command.type === "query") {
                sendQuery(command.url, command.token).then(function (response) {
                    dispatchAction({
                        name: command.action,
                        data: { body: response.data, status: response.status }
                    });
                });
            }
            else if (command.type === "load") {
                setTimeout(function () {
                    var data = JSON.parse(window.localStorage.getItem(command.location));
                    dispatchAction({ name: command.action, data: data });
                }, 0);
            }
            else if (command.type === "save") {
                setTimeout(function () {
                    window.localStorage.setItem(command.location, JSON.stringify(command.data));
                    if (command.action)
                        dispatchAction({ name: command.action });
                }, 0);
            }
            else if (command.type === "redirect") {
                console.log("redirecting", command.path);
                setTimeout(function () {
                    window.location.assign(command.path);
                }, 0);
            }
            else if (window.config.commands && window.config.commands[command.type]) {
                window.config.commands[command.type](command);
            }
        };
        for (var i = 0; i < commands.length; i++) {
            _loop_1(i);
        }
    }
};
exports.execute = function (url, data, action, token) {
    return { type: "execute", url: url, data: data, action: action, token: token };
};
exports.query = function (url, action, token) {
    return { type: "query", url: url, action: action, token: token };
};
exports.redirect = function (path) {
    return { type: "redirect", path: path };
};
exports.load = function (location, action) {
    return { type: "load", location: location, action: action };
};
exports.save = function (location, data, action) {
    return { type: "save", location: location, data: data, action: action };
};
//# sourceMappingURL=data:application/json;base64,