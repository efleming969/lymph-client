"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HTTP_1 = require("./HTTP");
const Utils = require("./Utils");
exports.process = function (window, command) {
    const http = new HTTP_1.default(window.fetch);
    const dispatchAction = Utils.dispatchAction(window);
    if (command != null) {
        if (command.type === "execute") {
            http.execute(command.url, command.data, command.token).then(function (response) {
                dispatchAction({
                    name: command.action,
                    data: { body: response.data, status: response.status }
                });
            });
        }
        else if (command.type === "query") {
            http.query(command.url, command.token).then(function (response) {
                dispatchAction({
                    name: command.action,
                    data: { body: response.data, status: response.status }
                });
            });
        }
        else if (command.type === "load") {
            setTimeout(function () {
                const data = JSON.parse(window.localStorage.getItem(command.location));
                dispatchAction({ name: command.action, data });
            }, 0);
        }
        else if (command.type === "save") {
            setTimeout(function () {
                window.localStorage.setItem(command.location, JSON.stringify(command.data));
                if (command.action)
                    dispatchAction({ name: command.action });
            }, 0);
        }
        else if (command.type === "redirect") {
            console.log("redirecting", command.path);
            setTimeout(function () {
                window.location.assign(command.path);
            }, 0);
        }
        // else if ( window.config.commands && window.config.commands[ command.type ] ) {
        //     window.config.commands[ command.type ]( command )
        // }
    }
};
exports.execute = function (url, data, action, token) {
    return { type: "execute", url, data, action, token };
};
exports.query = function (url, action, token) {
    return { type: "query", url, action, token };
};
exports.redirect = function (path) {
    return { type: "redirect", path };
};
exports.load = function (location, action) {
    return { type: "load", location, action };
};
exports.save = function (location, data, action) {
    return { type: "save", location, data, action };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQXlCO0FBQ3pCLGlDQUFnQztBQUVuQixRQUFBLE9BQU8sR0FBRyxVQUFXLE1BQU0sRUFBRSxPQUFPO0lBQzdDLE1BQU0sSUFBSSxHQUFHLElBQUksY0FBSSxDQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUUsQ0FBQTtJQUNyQyxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFFLE1BQU0sQ0FBRSxDQUFBO0lBRXJELEVBQUUsQ0FBQyxDQUFFLE9BQU8sSUFBSSxJQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxJQUFJLEtBQUssU0FBVSxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFFLENBQUMsSUFBSSxDQUFFLFVBQVcsUUFBUTtnQkFDOUUsY0FBYyxDQUFFO29CQUNaLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTTtvQkFDcEIsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQUU7aUJBQ3pELENBQUUsQ0FBQTtZQUNQLENBQUMsQ0FBRSxDQUFBO1FBQ1AsQ0FBQztRQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBRSxPQUFPLENBQUMsSUFBSSxLQUFLLE9BQVEsQ0FBQyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBRSxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUUsQ0FBQyxJQUFJLENBQUUsVUFBVyxRQUFRO2dCQUM5RCxjQUFjLENBQUU7b0JBQ1osSUFBSSxFQUFFLE9BQU8sQ0FBQyxNQUFN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cnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiXG5cbmV4cG9ydCBjb25zdCBwcm9jZXNzID0gZnVuY3Rpb24gKCB3aW5kb3csIGNvbW1hbmQgKSB7XG4gICAgY29uc3QgaHR0cCA9IG5ldyBIVFRQKCB3aW5kb3cuZmV0Y2ggKVxuICAgIGNvbnN0IGRpc3BhdGNoQWN0aW9uID0gVXRpbHMuZGlzcGF0Y2hBY3Rpb24oIHdpbmRvdyApXG5cbiAgICBpZiAoIGNvbW1hbmQgIT0gbnVsbCApIHtcbiAgICAgICAgaWYgKCBjb21tYW5kLnR5cGUgPT09IFwiZXhlY3V0ZVwiICkge1xuICAgICAgICAgICAgaHR0cC5leGVjdXRlKCBjb21tYW5kLnVybCwgY29tbWFuZC5kYXRhLCBjb21tYW5kLnRva2VuICkudGhlbiggZnVuY3Rpb24gKCByZXNwb25zZSApIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEFjdGlvbigge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBjb21tYW5kLmFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBib2R5OiByZXNwb25zZS5kYXRhLCBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggY29tbWFuZC50eXBlID09PSBcInF1ZXJ5XCIgKSB7XG4gICAgICAgICAgICBodHRwLnF1ZXJ5KCBjb21tYW5kLnVybCwgY29tbWFuZC50b2tlbiApLnRoZW4oIGZ1bmN0aW9uICggcmVzcG9uc2UgKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hBY3Rpb24oIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogY29tbWFuZC5hY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgYm9keTogcmVzcG9uc2UuZGF0YSwgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMgfVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIGNvbW1hbmQudHlwZSA9PT0gXCJsb2FkXCIgKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSggY29tbWFuZC5sb2NhdGlvbiApIClcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEFjdGlvbiggeyBuYW1lOiBjb21tYW5kLmFjdGlvbiwgZGF0YSB9IClcbiAgICAgICAgICAgIH0sIDAgKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCBjb21tYW5kLnR5cGUgPT09IFwic2F2ZVwiICkge1xuICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSggY29tbWFuZC5sb2NhdGlvbiwgSlNPTi5zdHJpbmdpZnkoIGNvbW1hbmQuZGF0YSApIClcbiAgICAgICAgICAgICAgICBpZiAoIGNvbW1hbmQuYWN0aW9uIClcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hBY3Rpb24oIHsgbmFtZTogY29tbWFuZC5hY3Rpb24gfSApXG4gICAgICAgICAgICB9LCAwIClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggY29tbWFuZC50eXBlID09PSBcInJlZGlyZWN0XCIgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyggXCJyZWRpcmVjdGluZ1wiLCBjb21tYW5kLnBhdGggKVxuICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oIGNvbW1hbmQucGF0aCApXG4gICAgICAgICAgICB9LCAwIClcbiAgICAgICAgfVxuICAgICAgICAvLyBlbHNlIGlmICggd2luZG93LmNvbmZpZy5jb21tYW5kcyAmJiB3aW5kb3cuY29uZmlnLmNvbW1hbmRzWyBjb21tYW5kLnR5cGUgXSApIHtcbiAgICAgICAgLy8gICAgIHdpbmRvdy5jb25maWcuY29tbWFuZHNbIGNvbW1hbmQudHlwZSBdKCBjb21tYW5kIClcbiAgICAgICAgLy8gfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGUgPSBmdW5jdGlvbiAoIHVybCwgZGF0YSwgYWN0aW9uLCB0b2tlbj8gKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJleGVjdXRlXCIsIHVybCwgZGF0YSwgYWN0aW9uLCB0b2tlbiB9XG59XG5cbmV4cG9ydCBjb25zdCBxdWVyeSA9IGZ1bmN0aW9uICggdXJsLCBhY3Rpb24sIHRva2VuPyApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcInF1ZXJ5XCIsIHVybCwgYWN0aW9uLCB0b2tlbiB9XG59XG5cbmV4cG9ydCBjb25zdCByZWRpcmVjdCA9IGZ1bmN0aW9uICggcGF0aCApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcInJlZGlyZWN0XCIsIHBhdGggfVxufVxuXG5leHBvcnQgY29uc3QgbG9hZCA9IGZ1bmN0aW9uICggbG9jYXRpb24sIGFjdGlvbiApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcImxvYWRcIiwgbG9jYXRpb24sIGFjdGlvbiB9XG59XG5cbmV4cG9ydCBjb25zdCBzYXZlID0gZnVuY3Rpb24gKCBsb2NhdGlvbiwgZGF0YSwgYWN0aW9uPyApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcInNhdmVcIiwgbG9jYXRpb24sIGRhdGEsIGFjdGlvbiB9XG59XG5cbiJdfQ==