"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateId = (function () {
    var ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var ID_LENGTH = 8;
    return function () {
        var rtn = "";
        for (var i = 0; i < ID_LENGTH; i++) {
            rtn += ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length));
        }
        return rtn;
    };
})();
exports.objectFromPair = function (pair) {
    var obj = {};
    obj[pair[0]] = pair[1];
    return obj;
};
exports.merge = function (obj1, obj2) {
    return Object.assign({}, obj1, obj2);
};
var sendQuery = function (path) {
    var options = { method: "GET" };
    var handleErrors = function (response) {
        if (!response.ok)
            throw new Error("whatup dog!");
        return response;
    };
    return fetch(path, options)
        .then(handleErrors)
        .then(function (response) { return response.json(); });
};
var sendCommand = function (name, events, data) {
    return { type: "RemoteCommand", name: name, data: data, events: events };
};
var loadStorage = function (name, events) {
    return { type: "LoadStorage", name: name, events: events };
};
var sendRedirect = function (path) {
    return { type: "Redirect", events: [], path: path };
};
exports.dispatchAction = function (window) {
    return function (event) {
        window.dispatchEvent(new window.CustomEvent("action", { detail: event, bubbles: true, cancelable: true }));
    };
};
var send = function (name, data) {
    return { name: name, data: data };
};
exports.sendForm = function (name) {
    return { type: "form", name: name };
};
exports.evolve = function (transformations, object) {
    var result = {};
    for (var key in object) {
        var transformation = transformations[key];
        if (typeof transformation === "function") {
            result[key] = transformation(object[key]);
        }
        else if (typeof transformation === "object") {
            result[key] = exports.evolve(transformation, object[key]);
        }
        else {
            result[key] = object[key];
        }
    }
    return result;
};
exports.currentTarget = function (message) {
    return message.event.currentTarget;
};
var forEach = function (fn, iterable) {
    for (var i = 0; i < iterable.length; i++) {
        fn(iterable[i]);
    }
};
exports.extractFormData = function (form) {
    var fields = {};
    var copyProp = function (element, propName) {
        fields[element.name] = element[propName];
    };
    forEach(function (element) {
        if (element.type === "text" || element.type === "password") {
            copyProp(element, "value");
        }
        else if (element.type === "radio" && element.checked) {
            copyProp(element, "value");
        }
        else if (element.type === "checkbox") {
            copyProp(element, "checked");
        }
        else if (element.nodeName === "SELECT") {
            copyProp(element, "value");
        }
    }, form.elements);
    return fields;
};
exports.currentForm = function (message) {
    return exports.extractFormData(exports.currentTarget(message));
};
exports.find = function (array, condition) {
    var result;
    for (var i = 0; i < array.length; i++) {
        if (condition(array[i])) {
            return array[i];
        }
    }
    return result;
};
exports.mapObjectToArray = function (object, fn) {
    return Object.keys(object).map(function (key) {
        return fn(key, object[key]);
    });
};
var extractMessage = function (parent_message, message) {
    return exports.merge(message, { name: message.name.replace(":" + parent_message, "") });
};
exports.createUpdater = function (routeDefinitions) {
    return function (message, state) {
        for (var name_1 in routeDefinitions) {
            if (message.name.indexOf(":" + name_1) === 0) {
                return routeDefinitions[name_1](extractMessage(name_1, message), state);
            }
        }
        return [state, undefined];
    };
};
exports.createContext = function (names) {
    if (names === void 0) { names = []; }
    return {
        createComponent: function (component, component_name) {
            var _a = component.create(exports.createContext(names.concat(component_name))), init = _a.init, updater = _a.updater, render = _a.render;
            return { init: init, update: exports.createUpdater(updater), render: render };
        },
        send: function (name) {
            return ":" + names.slice(1).concat(name).join(":");
        }
    };
};
//# sourceMappingURL=data:application/json;base64,