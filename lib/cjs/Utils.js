"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateId = (function () {
    const ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const ID_LENGTH = 8;
    return function () {
        let rtn = "";
        for (let i = 0; i < ID_LENGTH; i++) {
            rtn += ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length));
        }
        return rtn;
    };
})();
exports.objectFromPair = function (pair) {
    const obj = {};
    obj[pair[0]] = pair[1];
    return obj;
};
exports.merge = function (obj1, obj2) {
    return Object.assign({}, obj1, obj2);
};
exports.dispatchAction = function (window) {
    return function (event) {
        window.dispatchEvent(new window.CustomEvent("action", { detail: event, bubbles: true, cancelable: true }));
    };
};
exports.evolve = function (transformations, object) {
    const result = {};
    for (const key in object) {
        let transformation = transformations[key];
        if (typeof transformation === "function") {
            result[key] = transformation(object[key]);
        }
        else if (typeof transformation === "object") {
            result[key] = exports.evolve(transformation, object[key]);
        }
        else {
            result[key] = object[key];
        }
    }
    return result;
};
exports.currentTarget = function (message) {
    return message.event.currentTarget;
};
const forEach = function (fn, iterable) {
    for (let i = 0; i < iterable.length; i++) {
        fn(iterable[i]);
    }
};
exports.extractFormData = function (form) {
    const fields = {};
    const copyProp = function (element, propName) {
        fields[element.name] = element[propName];
    };
    forEach(function (element) {
        if (element.type === "text" || element.type === "password") {
            copyProp(element, "value");
        }
        else if (element.type === "radio" && element.checked) {
            copyProp(element, "value");
        }
        else if (element.type === "checkbox") {
            copyProp(element, "checked");
        }
        else if (element.nodeName === "SELECT") {
            copyProp(element, "value");
        }
    }, form.elements);
    return fields;
};
exports.currentForm = function (message) {
    return exports.extractFormData(exports.currentTarget(message));
};
exports.find = function (array, condition) {
    let result;
    for (let i = 0; i < array.length; i++) {
        if (condition(array[i])) {
            return array[i];
        }
    }
    return result;
};
exports.mapObjectToArray = function (object, fn) {
    return Object.keys(object).map(function (key) {
        return fn(key, object[key]);
    });
};
const extractMessage = function (parent_message, message) {
    return exports.merge(message, { name: message.name.replace(":" + parent_message, "") });
};
exports.createUpdater = function (routeDefinitions) {
    return function (message, state) {
        for (let name in routeDefinitions) {
            if (message.name.indexOf(":" + name) === 0) {
                return routeDefinitions[name](extractMessage(name, message), state);
            }
        }
        return [state, undefined];
    };
};
exports.createContext = function (names = []) {
    return {
        createComponent: function (component, component_name) {
            const { init, updater, render } = component.create(exports.createContext(names.concat(component_name)));
            return { init, update: exports.createUpdater(updater), render };
        },
        send: function (name) {
            return ":" + names.slice(1).concat(name).join(":");
        }
    };
};
exports.createActionHandler = window => function (action, callback) {
    window.addEventListener("action", function (e) {
        if (e["detail"].name === action)
            callback(e["detail"]);
    });
};
//# sourceMappingURL=data:application/json;base64,