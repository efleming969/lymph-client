"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Utils = require("./Utils");
const MessageRouter = require("./MessageRouter");
describe("message routing", function () {
    const actions = {
        Action1: "action1",
        Action2: "action2",
        Action3: "action3",
        Action4: "action4"
    };
    const sub_actions = {
        Action1: "action1",
        Action2: "action2"
    };
    const sub_routes = MessageRouter.create({
        [sub_actions.Action1]: (message, state) => ["sub_action1"],
        [sub_actions.Action2]: (message, state) => ["sub_action2" + state]
    });
    const routes = MessageRouter.create({
        [actions.Action1]: (message, state) => [state + message.data],
        [actions.Action2]: (message, state) => [(state + message.data).toUpperCase()],
        [actions.Action3]: (message, state) => sub_routes(message, state),
        [actions.Action4]: (message, state) => [message.event]
    });
    test("unknown routes just returns the state", function () {
        expect(routes({ name: "unknown", data: "bar" }, "foo")).toEqual(["foo", undefined]);
    });
    test("handle static routes", function () {
        expect(routes({ name: ":action1", data: "bar" }, "foo")).toEqual(["foobar"]);
        expect(routes({ name: ":action2", data: "bar" }, "foo")).toEqual(["FOOBAR"]);
    });
    test("handle child routes", function () {
        expect(routes({ name: ":action3:action1", data: "" }, "")).toEqual(["sub_action1"]);
    });
    test("send state to child routes", function () {
        expect(routes({ name: ":action3:action2", data: "" }, "foo")).toEqual(["sub_action2foo"]);
    });
    test("pass an event object", function () {
        expect(routes({ name: ":action4", data: "", event: "event-object" }, "")).toEqual(["event-object"]);
    });
});
describe("utils", function () {
    it('maps an object to an array of things', function () {
        const result = Utils.mapObjectToArray({ "some-name": () => "some function" }, function (key, value) {
            return { name: key, fn: value };
        });
        expect(result[0].fn()).toEqual("some function");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZVJvdXRpbmcudGVzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvTWVzc2FnZVJvdXRpbmcudGVzdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBZ0M7QUFDaEMsaURBQWdEO0FBRWhELFFBQVEsQ0FBRSxpQkFBaUIsRUFBRTtJQUV6QixNQUFNLE9BQU8sR0FBRztRQUNaLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO0tBQ3JCLENBQUE7SUFFRCxNQUFNLFdBQVcsR0FBRztRQUNoQixPQUFPLEVBQUUsU0FBUztRQUNsQixPQUFPLEVBQUUsU0FBUztLQUNyQixDQUFBO0lBRUQsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBRTtRQUNyQyxDQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLENBQUUsYUFBYSxDQUFFO1FBQ2hFLENBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBRSxFQUFFLENBQUUsT0FBTyxFQUFFLEtBQUssRUFBRyxFQUFFLENBQUMsQ0FBRSxhQUFhLEdBQUcsS0FBSyxDQUFFO0tBQzNFLENBQUUsQ0FBQTtJQUVILE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUU7UUFDakMsQ0FBRSxPQUFPLENBQUMsT0FBTyxDQUFFLEVBQUUsQ0FBRSxPQUFPLEVBQUUsS0FBSyxFQUFHLEVBQUUsQ0FBQyxDQUFFLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFFO1FBQ25FLENBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBRSxFQUFFLENBQUUsT0FBTyxFQUFFLEtBQUssRUFBRyxFQUFFLENBQUMsQ0FBRSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUU7UUFDbkYsQ0FBRSxPQUFPLENBQUMsT0FBTyxDQUFFLEVBQUUsQ0FBRSxPQUFPLEVBQUUsS0FBSyxFQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUUsT0FBTyxFQUFFLEtBQUssQ0FBRTtRQUN2RSxDQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLENBQUUsT0FBTyxDQUFDLEtBQUssQ0FBRTtLQUMvRCxDQUFFLENBQUE7SUFFSCxJQUFJLENBQUUsdUNBQXVDLEVBQUU7UUFDM0MsTUFBTSxDQUFFLE1BQU0sQ0FBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssQ0FBRSxDQUFFLENBQUMsT0FBTyxDQUFFLENBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBRSxDQUFFLENBQUE7SUFDL0YsQ0FBQyxDQUFFLENBQUE7SUFFSCxJQUFJLENBQUUsc0JBQXNCLEVBQUU7UUFDMUIsTUFBTSxDQUFFLE1BQU0sQ0FBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssQ0FBRSxDQUFFLENBQUMsT0FBTyxDQUFFLENBQUUsUUFBUSxDQUFFLENBQUUsQ0FBQTtRQUNwRixNQUFNLENBQUUsTUFBTSxDQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBRSxRQUFRLENBQUUsQ0FBRSxDQUFBO0lBQ3hGLENBQUMsQ0FBRSxDQUFBO0lBRUgsSUFBSSxDQUFFLHFCQUFxQixFQUFFO1FBQ3pCLE1BQU0sQ0FBRSxNQUFNLENBQUUsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBRSxDQUFFLENBQUMsT0FBTyxDQUFFLENBQUUsYUFBYSxDQUFFLENBQUUsQ0FBQTtJQUMvRixDQUFDLENBQUUsQ0FBQTtJQUVILElBQUksQ0FBRSw0QkFBNEIsRUFBRTtRQUNoQyxNQUFNLENBQUUsTUFBTSxDQUFFLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxDQUFFLGdCQUFnQixDQUFFLENBQUUsQ0FBQTtJQUNyRyxDQUFDLENBQUUsQ0FBQTtJQUVILElBQUksQ0FBRSxzQkFBc0IsRUFBRTtRQUMxQixNQUFNLENBQUUsTUFBTSxDQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUUsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxDQUFFLGNBQWMsQ0FBRSxDQUFFLENBQUE7SUFDL0csQ0FBQyxDQUFFLENBQUE7QUFFUCxDQUFDLENBQUUsQ0FBQTtBQUVILFFBQVEsQ0FBRSxPQUFPLEVBQUU7SUFFZixFQUFFLENBQUUsc0NBQXNDLEVBQUU7UUFDeEMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFFLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxFQUFFLFVBQVcsR0FBRyxFQUFFLEtBQUs7WUFDaEcsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUE7UUFDbkMsQ0FBQyxDQUFFLENBQUE7UUFFSCxNQUFNLENBQUUsTUFBTSxDQUFFLENBQUMsQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUFFLENBQUMsT0FBTyxDQUFFLGVBQWUsQ0FBRSxDQUFBO0lBQ3pELENBQUMsQ0FBRSxDQUFDO0FBQ1IsQ0FBQyxDQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiXG5pbXBvcnQgKiBhcyBNZXNzYWdlUm91dGVyIGZyb20gXCIuL01lc3NhZ2VSb3V0ZXJcIlxuXG5kZXNjcmliZSggXCJtZXNzYWdlIHJvdXRpbmdcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgY29uc3QgYWN0aW9ucyA9IHtcbiAgICAgICAgQWN0aW9uMTogXCJhY3Rpb24xXCIsXG4gICAgICAgIEFjdGlvbjI6IFwiYWN0aW9uMlwiLFxuICAgICAgICBBY3Rpb24zOiBcImFjdGlvbjNcIixcbiAgICAgICAgQWN0aW9uNDogXCJhY3Rpb240XCJcbiAgICB9XG5cbiAgICBjb25zdCBzdWJfYWN0aW9ucyA9IHtcbiAgICAgICAgQWN0aW9uMTogXCJhY3Rpb24xXCIsXG4gICAgICAgIEFjdGlvbjI6IFwiYWN0aW9uMlwiXG4gICAgfVxuXG4gICAgY29uc3Qgc3ViX3JvdXRlcyA9IE1lc3NhZ2VSb3V0ZXIuY3JlYXRlKCB7XG4gICAgICAgIFsgc3ViX2FjdGlvbnMuQWN0aW9uMSBdOiAoIG1lc3NhZ2UsIHN0YXRlICkgPT4gWyBcInN1Yl9hY3Rpb24xXCIgXSxcbiAgICAgICAgWyBzdWJfYWN0aW9ucy5BY3Rpb24yIF06ICggbWVzc2FnZSwgc3RhdGUgKSA9PiBbIFwic3ViX2FjdGlvbjJcIiArIHN0YXRlIF1cbiAgICB9IClcblxuICAgIGNvbnN0IHJvdXRlcyA9IE1lc3NhZ2VSb3V0ZXIuY3JlYXRlKCB7XG4gICAgICAgIFsgYWN0aW9ucy5BY3Rpb24xIF06ICggbWVzc2FnZSwgc3RhdGUgKSA9PiBbIHN0YXRlICsgbWVzc2FnZS5kYXRhIF0sXG4gICAgICAgIFsgYWN0aW9ucy5BY3Rpb24yIF06ICggbWVzc2FnZSwgc3RhdGUgKSA9PiBbIChzdGF0ZSArIG1lc3NhZ2UuZGF0YSkudG9VcHBlckNhc2UoKSBdLFxuICAgICAgICBbIGFjdGlvbnMuQWN0aW9uMyBdOiAoIG1lc3NhZ2UsIHN0YXRlICkgPT4gc3ViX3JvdXRlcyggbWVzc2FnZSwgc3RhdGUgKSxcbiAgICAgICAgWyBhY3Rpb25zLkFjdGlvbjQgXTogKCBtZXNzYWdlLCBzdGF0ZSApID0+IFsgbWVzc2FnZS5ldmVudCBdXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcInVua25vd24gcm91dGVzIGp1c3QgcmV0dXJucyB0aGUgc3RhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QoIHJvdXRlcyggeyBuYW1lOiBcInVua25vd25cIiwgZGF0YTogXCJiYXJcIiB9LCBcImZvb1wiICkgKS50b0VxdWFsKCBbIFwiZm9vXCIsIHVuZGVmaW5lZCBdIClcbiAgICB9IClcblxuICAgIHRlc3QoIFwiaGFuZGxlIHN0YXRpYyByb3V0ZXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QoIHJvdXRlcyggeyBuYW1lOiBcIjphY3Rpb24xXCIsIGRhdGE6IFwiYmFyXCIgfSwgXCJmb29cIiApICkudG9FcXVhbCggWyBcImZvb2JhclwiIF0gKVxuICAgICAgICBleHBlY3QoIHJvdXRlcyggeyBuYW1lOiBcIjphY3Rpb24yXCIsIGRhdGE6IFwiYmFyXCIgfSwgXCJmb29cIiApICkudG9FcXVhbCggWyBcIkZPT0JBUlwiIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJoYW5kbGUgY2hpbGQgcm91dGVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KCByb3V0ZXMoIHsgbmFtZTogXCI6YWN0aW9uMzphY3Rpb24xXCIsIGRhdGE6IFwiXCIgfSwgXCJcIiApICkudG9FcXVhbCggWyBcInN1Yl9hY3Rpb24xXCIgXSApXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcInNlbmQgc3RhdGUgdG8gY2hpbGQgcm91dGVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KCByb3V0ZXMoIHsgbmFtZTogXCI6YWN0aW9uMzphY3Rpb24yXCIsIGRhdGE6IFwiXCIgfSwgXCJmb29cIiApICkudG9FcXVhbCggWyBcInN1Yl9hY3Rpb24yZm9vXCIgXSApXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcInBhc3MgYW4gZXZlbnQgb2JqZWN0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KCByb3V0ZXMoIHsgbmFtZTogXCI6YWN0aW9uNFwiLCBkYXRhOiBcIlwiLCBldmVudDogXCJldmVudC1vYmplY3RcIiB9LCBcIlwiICkgKS50b0VxdWFsKCBbIFwiZXZlbnQtb2JqZWN0XCIgXSApXG4gICAgfSApXG5cbn0gKVxuXG5kZXNjcmliZSggXCJ1dGlsc1wiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICBpdCggJ21hcHMgYW4gb2JqZWN0IHRvIGFuIGFycmF5IG9mIHRoaW5ncycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gVXRpbHMubWFwT2JqZWN0VG9BcnJheSggeyBcInNvbWUtbmFtZVwiOiAoKSA9PiBcInNvbWUgZnVuY3Rpb25cIiB9LCBmdW5jdGlvbiAoIGtleSwgdmFsdWUgKSB7XG4gICAgICAgICAgICByZXR1cm4geyBuYW1lOiBrZXksIGZuOiB2YWx1ZSB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIGV4cGVjdCggcmVzdWx0WyAwIF0uZm4oKSApLnRvRXF1YWwoIFwic29tZSBmdW5jdGlvblwiIClcbiAgICB9ICk7XG59IClcbiJdfQ==