"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DOM = require("./DOM");
const Utils = require("./Utils");
const Environment_1 = require("./Environment");
exports.run = function (window, app_component, app_name) {
    const environment = new Environment_1.WindowEnvironment(window);
    const context = Utils.createContext();
    const app = context.createComponent(app_component, app_name);
    let [viewState, command] = app.init(window.location.hash.slice(1));
    console.group("%c", "color: gray; font-weight: lighter;", ":init");
    console.log("%c next state", "color: #4CAF50; font-weight: bold;", viewState);
    console.log("%c commands", "color: #4CAF50; font-weight: bold;", command);
    console.groupEnd();
    let view = app.render(viewState);
    const lymph_config = window["lymphConfig"] || {
        actionName: "action"
    };
    window.addEventListener(lymph_config.actionName, function (e) {
        console.group("%c", "color: gray; font-weight: lighter;", e.detail.name);
        console.log("%c prev state", "color: #9E9E9E; font-weight: bold;", viewState);
        console.log("%c message", "color: #03A9F4; font-weight: bold;", e.detail);
        const [state, command] = app.update(e.detail, viewState);
        console.log("%c next state", "color: #4CAF50; font-weight: bold;", state);
        console.log("%c commands", "color: #4CAF50; font-weight: bold;", command);
        viewState = state;
        view = app.render(viewState);
        DOM.updateChildren(window, window.document.body, view);
        command.executeIn(environment);
        console.groupEnd();
    });
    window.addEventListener("hashchange", function (e) {
        window.document.dispatchEvent(new window["CustomEvent"](lymph_config.actionName, {
            detail: { name: `:route-changed`, data: window.location.hash.slice(1) },
            bubbles: true,
            cancelable: true
        }));
    });
    // because we never want to do standard submits in SPAs
    window.document.addEventListener("submit", e => e.preventDefault(), true);
    DOM.updateChildren(window, window.document.body, view);
    command.executeIn(environment);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTHltcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvTHltcGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNEI7QUFDNUIsaUNBQWdDO0FBRWhDLCtDQUFpRDtBQUVwQyxRQUFBLEdBQUcsR0FBRyxVQUFXLE1BQU0sRUFBRSxhQUFhLEVBQUUsUUFBUTtJQUN6RCxNQUFNLFdBQVcsR0FBRyxJQUFJLCtCQUFpQixDQUFFLE1BQU0sQ0FBRSxDQUFBO0lBQ25ELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUNyQyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFFLGFBQWEsRUFBRSxRQUFRLENBQUUsQ0FBQTtJQUU5RCxJQUFJLENBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBRSxDQUFFLENBQUE7SUFFeEUsT0FBTyxDQUFDLEtBQUssQ0FBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsT0FBTyxDQUFFLENBQUE7SUFDcEUsT0FBTyxDQUFDLEdBQUcsQ0FBRSxlQUFlLEVBQUUsb0NBQW9DLEVBQUUsU0FBUyxDQUFFLENBQUE7SUFDL0UsT0FBTyxDQUFDLEdBQUcsQ0FBRSxhQUFhLEVBQUUsb0NBQW9DLEVBQUUsT0FBTyxDQUFFLENBQUE7SUFDM0UsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBRWxCLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUUsU0FBUyxDQUFFLENBQUE7SUFFbEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFFLGFBQWEsQ0FBRSxJQUFJO1FBQzVDLFVBQVUsRUFBRSxRQUFRO0tBQ3ZCLENBQUE7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUUsWUFBWSxDQUFDLFVBQVUsRUFBRSxVQUFXLENBQWM7UUFDdkUsT0FBTyxDQUFDLEtBQUssQ0FBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUUsQ0FBQTtRQUUxRSxPQUFPLENBQUMsR0FBRyxDQUFFLGVBQWUsRUFBRSxvQ0FBb0MsRUFBRSxTQUFTLENBQUUsQ0FBQTtRQUMvRSxPQUFPLENBQUMsR0FBRyxDQUFFLFlBQVksRUFBRSxvQ0FBb0MsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUE7UUFFM0UsTUFBTSxDQUFFLEtBQUssRUFBRSxPQUFPLENBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFFLENBQUE7UUFFNUQsT0FBTyxDQUFDLEdBQUcsQ0FBRSxlQUFlLEVBQUUsb0NBQW9DLEVBQUUsS0FBSyxDQUFFLENBQUE7UUFDM0UsT0FBTyxDQUFDLEdBQUcsQ0FBRSxhQUFhLEVBQUUsb0NBQW9DLEVBQUUsT0FBTyxDQUFFLENBQUE7UUFFM0UsU0FBUyxHQUFHLEtBQUssQ0FBQTtRQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBRSxTQUFTLENBQUUsQ0FBQTtRQUU5QixHQUFHLENBQUMsY0FBYyxDQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQTtRQUV4RCxPQUFPLENBQUMsU0FBUyxDQUFFLFdBQVcsQ0FBRSxDQUFBO1FBRWhDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUN0QixDQUFDLENBQUUsQ0FBQTtJQUVILE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxZQUFZLEVBQUUsVUFBVyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUN6QixJQUFJLE1BQU0sQ0FBRSxhQUFhLENBQUUsQ0FBRSxZQUFZLENBQUMsVUFBVSxFQUFFO1lBQ2xELE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBRSxFQUFFO1lBQ3pFLE9BQU8sRUFBRSxJQUFJO1lBQ2IsVUFBVSxFQUFFLElBQUk7U0FDbkIsQ0FBRSxDQUNOLENBQUE7SUFDTCxDQUFDLENBQUUsQ0FBQTtJQUVILHVEQUF1RDtJQUN2RCxNQUFNLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLENBQUUsQ0FBQTtJQUUzRSxHQUFHLENBQUMsY0FBYyxDQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQTtJQUV4RCxPQUFPLENBQUMsU0FBUyxDQUFFLFdBQVcsQ0FBRSxDQUFBO0FBQ3BDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIERPTSBmcm9tIFwiLi9ET01cIlxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIlxuaW1wb3J0ICogYXMgQ29tbWFuZCBmcm9tIFwiLi9Db21tYW5kXCJcbmltcG9ydCB7IFdpbmRvd0Vudmlyb25tZW50IH0gZnJvbSBcIi4vRW52aXJvbm1lbnRcIlxuXG5leHBvcnQgY29uc3QgcnVuID0gZnVuY3Rpb24gKCB3aW5kb3csIGFwcF9jb21wb25lbnQsIGFwcF9uYW1lICkge1xuICAgIGNvbnN0IGVudmlyb25tZW50ID0gbmV3IFdpbmRvd0Vudmlyb25tZW50KCB3aW5kb3cgKVxuICAgIGNvbnN0IGNvbnRleHQgPSBVdGlscy5jcmVhdGVDb250ZXh0KClcbiAgICBjb25zdCBhcHAgPSBjb250ZXh0LmNyZWF0ZUNvbXBvbmVudCggYXBwX2NvbXBvbmVudCwgYXBwX25hbWUgKVxuXG4gICAgbGV0IFsgdmlld1N0YXRlLCBjb21tYW5kIF0gPSBhcHAuaW5pdCggd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoIDEgKSApXG5cbiAgICBjb25zb2xlLmdyb3VwKCBcIiVjXCIsIFwiY29sb3I6IGdyYXk7IGZvbnQtd2VpZ2h0OiBsaWdodGVyO1wiLCBcIjppbml0XCIgKVxuICAgIGNvbnNvbGUubG9nKCBcIiVjIG5leHQgc3RhdGVcIiwgXCJjb2xvcjogIzRDQUY1MDsgZm9udC13ZWlnaHQ6IGJvbGQ7XCIsIHZpZXdTdGF0ZSApXG4gICAgY29uc29sZS5sb2coIFwiJWMgY29tbWFuZHNcIiwgXCJjb2xvcjogIzRDQUY1MDsgZm9udC13ZWlnaHQ6IGJvbGQ7XCIsIGNvbW1hbmQgKVxuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKVxuXG4gICAgbGV0IHZpZXcgPSBhcHAucmVuZGVyKCB2aWV3U3RhdGUgKVxuXG4gICAgY29uc3QgbHltcGhfY29uZmlnID0gd2luZG93WyBcImx5bXBoQ29uZmlnXCIgXSB8fCB7XG4gICAgICAgIGFjdGlvbk5hbWU6IFwiYWN0aW9uXCJcbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggbHltcGhfY29uZmlnLmFjdGlvbk5hbWUsIGZ1bmN0aW9uICggZTogQ3VzdG9tRXZlbnQgKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoIFwiJWNcIiwgXCJjb2xvcjogZ3JheTsgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XCIsIGUuZGV0YWlsLm5hbWUgKVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCBcIiVjIHByZXYgc3RhdGVcIiwgXCJjb2xvcjogIzlFOUU5RTsgZm9udC13ZWlnaHQ6IGJvbGQ7XCIsIHZpZXdTdGF0ZSApXG4gICAgICAgIGNvbnNvbGUubG9nKCBcIiVjIG1lc3NhZ2VcIiwgXCJjb2xvcjogIzAzQTlGNDsgZm9udC13ZWlnaHQ6IGJvbGQ7XCIsIGUuZGV0YWlsIClcblxuICAgICAgICBjb25zdCBbIHN0YXRlLCBjb21tYW5kIF0gPSBhcHAudXBkYXRlKCBlLmRldGFpbCwgdmlld1N0YXRlIClcblxuICAgICAgICBjb25zb2xlLmxvZyggXCIlYyBuZXh0IHN0YXRlXCIsIFwiY29sb3I6ICM0Q0FGNTA7IGZvbnQtd2VpZ2h0OiBib2xkO1wiLCBzdGF0ZSApXG4gICAgICAgIGNvbnNvbGUubG9nKCBcIiVjIGNvbW1hbmRzXCIsIFwiY29sb3I6ICM0Q0FGNTA7IGZvbnQtd2VpZ2h0OiBib2xkO1wiLCBjb21tYW5kIClcblxuICAgICAgICB2aWV3U3RhdGUgPSBzdGF0ZVxuICAgICAgICB2aWV3ID0gYXBwLnJlbmRlciggdmlld1N0YXRlIClcblxuICAgICAgICBET00udXBkYXRlQ2hpbGRyZW4oIHdpbmRvdywgd2luZG93LmRvY3VtZW50LmJvZHksIHZpZXcgKVxuXG4gICAgICAgIGNvbW1hbmQuZXhlY3V0ZUluKCBlbnZpcm9ubWVudCApXG5cbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpXG4gICAgfSApXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJoYXNoY2hhbmdlXCIsIGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgd2luZG93LmRvY3VtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICBuZXcgd2luZG93WyBcIkN1c3RvbUV2ZW50XCIgXSggbHltcGhfY29uZmlnLmFjdGlvbk5hbWUsIHtcbiAgICAgICAgICAgICAgICBkZXRhaWw6IHsgbmFtZTogYDpyb3V0ZS1jaGFuZ2VkYCwgZGF0YTogd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoIDEgKSB9LFxuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSApXG4gICAgICAgIClcbiAgICB9IClcblxuICAgIC8vIGJlY2F1c2Ugd2UgbmV2ZXIgd2FudCB0byBkbyBzdGFuZGFyZCBzdWJtaXRzIGluIFNQQXNcbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJzdWJtaXRcIiwgZSA9PiBlLnByZXZlbnREZWZhdWx0KCksIHRydWUgKVxuXG4gICAgRE9NLnVwZGF0ZUNoaWxkcmVuKCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudC5ib2R5LCB2aWV3IClcblxuICAgIGNvbW1hbmQuZXhlY3V0ZUluKCBlbnZpcm9ubWVudCApXG59XG4iXX0=