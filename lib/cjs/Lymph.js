"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DOM = require("./DOM");
var Utils = require("./Utils");
var Command = require("./Command");
exports.run = function (window, app_component, app_name) {
    var context = Utils.createContext();
    var app = context.createComponent(app_component, app_name);
    var _a = app.init(window.location.hash.slice(1)), viewState = _a[0], command = _a[1];
    console.group("%c", "color: gray; font-weight: lighter;", ":init");
    console.log("%c next state", "color: #4CAF50; font-weight: bold;", viewState);
    console.log("%c commands", "color: #4CAF50; font-weight: bold;", command);
    console.groupEnd();
    var view = app.render(viewState);
    var lymph_config = window["lymphConfig"] || {
        actionName: "action"
    };
    window.addEventListener(lymph_config.actionName, function (e) {
        console.group("%c", "color: gray; font-weight: lighter;", e.detail.name);
        console.log("%c prev state", "color: #9E9E9E; font-weight: bold;", viewState);
        console.log("%c message", "color: #03A9F4; font-weight: bold;", e.detail);
        var _a = app.update(e.detail, viewState), state = _a[0], command = _a[1];
        console.log("%c next state", "color: #4CAF50; font-weight: bold;", state);
        console.log("%c commands", "color: #4CAF50; font-weight: bold;", command);
        viewState = state;
        view = app.render(viewState);
        DOM.updateChildren(window, window.document.body, view);
        Command.process(window, command);
        console.groupEnd();
    });
    window.addEventListener("hashchange", function (e) {
        window.document.dispatchEvent(new window["CustomEvent"](lymph_config.actionName, {
            detail: { name: ":route-changed", data: window.location.hash.slice(1) },
            bubbles: true,
            cancelable: true
        }));
    });
    // because we never want to do standard submits in SPAs
    window.document.addEventListener("submit", function (e) { return e.preventDefault(); }, true);
    DOM.updateChildren(window, window.document.body, view);
    Command.process(window, command);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTHltcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvTHltcGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQkFBNEI7QUFDNUIsK0JBQWdDO0FBQ2hDLG1DQUFvQztBQUV2QixRQUFBLEdBQUcsR0FBRyxVQUFXLE1BQU0sRUFBRSxhQUFhLEVBQUUsUUFBUTtJQUN6RCxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDckMsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBRSxhQUFhLEVBQUUsUUFBUSxDQUFFLENBQUE7SUFFMUQsSUFBQSw0Q0FBb0UsRUFBbEUsaUJBQVMsRUFBRSxlQUFPLENBQWdEO0lBRXhFLE9BQU8sQ0FBQyxLQUFLLENBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLE9BQU8sQ0FBRSxDQUFBO0lBQ3BFLE9BQU8sQ0FBQyxHQUFHLENBQUUsZUFBZSxFQUFFLG9DQUFvQyxFQUFFLFNBQVMsQ0FBRSxDQUFBO0lBQy9FLE9BQU8sQ0FBQyxHQUFHLENBQUUsYUFBYSxFQUFFLG9DQUFvQyxFQUFFLE9BQU8sQ0FBRSxDQUFBO0lBQzNFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUVsQixJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFFLFNBQVMsQ0FBRSxDQUFBO0lBRWxDLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBRSxhQUFhLENBQUUsSUFBSTtRQUM1QyxVQUFVLEVBQUUsUUFBUTtLQUN2QixDQUFBO0lBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUFFLFlBQVksQ0FBQyxVQUFVLEVBQUUsVUFBVyxDQUFjO1FBQ3ZFLE9BQU8sQ0FBQyxLQUFLLENBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFFLENBQUE7UUFFMUUsT0FBTyxDQUFDLEdBQUcsQ0FBRSxlQUFlLEVBQUUsb0NBQW9DLEVBQUUsU0FBUyxDQUFFLENBQUE7UUFDL0UsT0FBTyxDQUFDLEdBQUcsQ0FBRSxZQUFZLEVBQUUsb0NBQW9DLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBRSxDQUFBO1FBRXJFLElBQUEsb0NBQXNELEVBQXBELGFBQUssRUFBRSxlQUFPLENBQXNDO1FBRTVELE9BQU8sQ0FBQyxHQUFHLENBQUUsZUFBZSxFQUFFLG9DQUFvQyxFQUFFLEtBQUssQ0FBRSxDQUFBO1FBQzNFLE9BQU8sQ0FBQyxHQUFHLENBQUUsYUFBYSxFQUFFLG9DQUFvQyxFQUFFLE9BQU8sQ0FBRSxDQUFBO1FBRTNFLFNBQVMsR0FBRyxLQUFLLENBQUE7UUFDakIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUUsU0FBUyxDQUFFLENBQUE7UUFFOUIsR0FBRyxDQUFDLGNBQWMsQ0FBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFFLENBQUE7UUFFeEQsT0FBTyxDQUFDLE9BQU8sQ0FBRSxNQUFNLEVBQUUsT0FBTyxDQUFFLENBQUE7UUFFbEMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQ3RCLENBQUMsQ0FBRSxDQUFBO0lBRUgsTUFBTSxDQUFDLGdCQUFnQixDQUFFLFlBQVksRUFBRSxVQUFXLENBQUM7UUFDL0MsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQ3pCLElBQUksTUFBTSxDQUFFLGFBQWEsQ0FBRSxDQUFFLFlBQVksQ0FBQyxVQUFVLEVBQUU7WUFDbEQsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUUsQ0FBQyxDQUFFLEVBQUU7WUFDekUsT0FBTyxFQUFFLElBQUk7WUFDYixVQUFVLEVBQUUsSUFBSTtTQUNuQixDQUFFLENBQ04sQ0FBQTtJQUNMLENBQUMsQ0FBRSxDQUFBO0lBRUgsdURBQXVEO0lBQ3ZELE1BQU0sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUUsUUFBUSxFQUFFLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFsQixDQUFrQixFQUFFLElBQUksQ0FBRSxDQUFBO0lBRTNFLEdBQUcsQ0FBQyxjQUFjLENBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBRSxDQUFBO0lBRXhELE9BQU8sQ0FBQyxPQUFPLENBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBRSxDQUFBO0FBQ3RDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIERPTSBmcm9tIFwiLi9ET01cIlxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIlxuaW1wb3J0ICogYXMgQ29tbWFuZCBmcm9tIFwiLi9Db21tYW5kXCJcblxuZXhwb3J0IGNvbnN0IHJ1biA9IGZ1bmN0aW9uICggd2luZG93LCBhcHBfY29tcG9uZW50LCBhcHBfbmFtZSApIHtcbiAgICBjb25zdCBjb250ZXh0ID0gVXRpbHMuY3JlYXRlQ29udGV4dCgpXG4gICAgY29uc3QgYXBwID0gY29udGV4dC5jcmVhdGVDb21wb25lbnQoIGFwcF9jb21wb25lbnQsIGFwcF9uYW1lIClcblxuICAgIGxldCBbIHZpZXdTdGF0ZSwgY29tbWFuZCBdID0gYXBwLmluaXQoIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnNsaWNlKCAxICkgKVxuXG4gICAgY29uc29sZS5ncm91cCggXCIlY1wiLCBcImNvbG9yOiBncmF5OyBmb250LXdlaWdodDogbGlnaHRlcjtcIiwgXCI6aW5pdFwiIClcbiAgICBjb25zb2xlLmxvZyggXCIlYyBuZXh0IHN0YXRlXCIsIFwiY29sb3I6ICM0Q0FGNTA7IGZvbnQtd2VpZ2h0OiBib2xkO1wiLCB2aWV3U3RhdGUgKVxuICAgIGNvbnNvbGUubG9nKCBcIiVjIGNvbW1hbmRzXCIsIFwiY29sb3I6ICM0Q0FGNTA7IGZvbnQtd2VpZ2h0OiBib2xkO1wiLCBjb21tYW5kIClcbiAgICBjb25zb2xlLmdyb3VwRW5kKClcblxuICAgIGxldCB2aWV3ID0gYXBwLnJlbmRlciggdmlld1N0YXRlIClcblxuICAgIGNvbnN0IGx5bXBoX2NvbmZpZyA9IHdpbmRvd1sgXCJseW1waENvbmZpZ1wiIF0gfHwge1xuICAgICAgICBhY3Rpb25OYW1lOiBcImFjdGlvblwiXG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIGx5bXBoX2NvbmZpZy5hY3Rpb25OYW1lLCBmdW5jdGlvbiAoIGU6IEN1c3RvbUV2ZW50ICkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKCBcIiVjXCIsIFwiY29sb3I6IGdyYXk7IGZvbnQtd2VpZ2h0OiBsaWdodGVyO1wiLCBlLmRldGFpbC5uYW1lIClcblxuICAgICAgICBjb25zb2xlLmxvZyggXCIlYyBwcmV2IHN0YXRlXCIsIFwiY29sb3I6ICM5RTlFOUU7IGZvbnQtd2VpZ2h0OiBib2xkO1wiLCB2aWV3U3RhdGUgKVxuICAgICAgICBjb25zb2xlLmxvZyggXCIlYyBtZXNzYWdlXCIsIFwiY29sb3I6ICMwM0E5RjQ7IGZvbnQtd2VpZ2h0OiBib2xkO1wiLCBlLmRldGFpbCApXG5cbiAgICAgICAgY29uc3QgWyBzdGF0ZSwgY29tbWFuZCBdID0gYXBwLnVwZGF0ZSggZS5kZXRhaWwsIHZpZXdTdGF0ZSApXG5cbiAgICAgICAgY29uc29sZS5sb2coIFwiJWMgbmV4dCBzdGF0ZVwiLCBcImNvbG9yOiAjNENBRjUwOyBmb250LXdlaWdodDogYm9sZDtcIiwgc3RhdGUgKVxuICAgICAgICBjb25zb2xlLmxvZyggXCIlYyBjb21tYW5kc1wiLCBcImNvbG9yOiAjNENBRjUwOyBmb250LXdlaWdodDogYm9sZDtcIiwgY29tbWFuZCApXG5cbiAgICAgICAgdmlld1N0YXRlID0gc3RhdGVcbiAgICAgICAgdmlldyA9IGFwcC5yZW5kZXIoIHZpZXdTdGF0ZSApXG5cbiAgICAgICAgRE9NLnVwZGF0ZUNoaWxkcmVuKCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudC5ib2R5LCB2aWV3IClcblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgY29tbWFuZCApXG5cbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpXG4gICAgfSApXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJoYXNoY2hhbmdlXCIsIGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgd2luZG93LmRvY3VtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICBuZXcgd2luZG93WyBcIkN1c3RvbUV2ZW50XCIgXSggbHltcGhfY29uZmlnLmFjdGlvbk5hbWUsIHtcbiAgICAgICAgICAgICAgICBkZXRhaWw6IHsgbmFtZTogYDpyb3V0ZS1jaGFuZ2VkYCwgZGF0YTogd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoIDEgKSB9LFxuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSApXG4gICAgICAgIClcbiAgICB9IClcblxuICAgIC8vIGJlY2F1c2Ugd2UgbmV2ZXIgd2FudCB0byBkbyBzdGFuZGFyZCBzdWJtaXRzIGluIFNQQXNcbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJzdWJtaXRcIiwgZSA9PiBlLnByZXZlbnREZWZhdWx0KCksIHRydWUgKVxuXG4gICAgRE9NLnVwZGF0ZUNoaWxkcmVuKCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudC5ib2R5LCB2aWV3IClcblxuICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBjb21tYW5kIClcbn1cbiJdfQ==