import * as JSDOM from "jsdom";
import * as DOM from "./DOM";
export var createTarget = function (html) {
    var template = "<!DOCTYPE html><head></head><body>" + html + "</body>";
    var document = new JSDOM.JSDOM(template).window.document;
    return document.body.firstChild;
};
export var createWindow = function () {
    var template = "<!DOCTYPE html><head></head><body></body>";
    return new JSDOM.JSDOM(template).window;
};
export var createTestContext = function () {
    var window = createWindow();
    return {
        onAction: function (callback) {
            window.document.addEventListener("action", function (e) {
                var _a = e.detail, name = _a.name, data = _a.data, event = _a.event;
                event.preventDefault();
                callback(name, data, event);
            });
        },
        dispatch: function (event_type, selector) {
            var event = event_type === "click" ?
                new window.MouseEvent("click", {
                    bubbles: true,
                    cancelable: true
                }) : new window.Event(event_type);
            window.document.querySelector(selector).dispatchEvent(event);
        },
        render: function (view) {
            DOM.updateChildren(window, window.document.body, view);
        },
        find: function (selector) {
            return window.document.querySelector(selector);
        }
    };
};
export var createFakeFetch = function (response) {
    return function (url, options) {
        return new Promise(function (res, rej) {
            var responseToForward = {
                status: response.status,
                json: function () { return Promise.resolve(response.data); }
            };
            if (url === "/api/post1" || url === "/api/get1") {
                res(responseToForward);
            }
            else {
                rej(responseToForward);
            }
        });
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1Rlc3RVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUU5QixPQUFPLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQTtBQUU1QixNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsVUFBVyxJQUFJO0lBQ3ZDLElBQU0sUUFBUSxHQUFHLHVDQUFzQyxJQUFJLFlBQVUsQ0FBQTtJQUNyRSxJQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUUsUUFBUSxDQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQTtJQUM1RCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7QUFDbkMsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHO0lBQ3hCLElBQU0sUUFBUSxHQUFHLDJDQUEyQyxDQUFBO0lBQzVELE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUUsUUFBUSxDQUFFLENBQUMsTUFBTSxDQUFBO0FBQzdDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHO0lBQzdCLElBQU0sTUFBTSxHQUFHLFlBQVksRUFBRSxDQUFBO0lBRTdCLE1BQU0sQ0FBQztRQUNILFFBQVEsRUFBRSxVQUFXLFFBQVE7WUFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFRLEVBQUUsVUFBVyxDQUFjO2dCQUMzRCxJQUFBLGFBQWdDLEVBQTlCLGNBQUksRUFBRSxjQUFJLEVBQUUsZ0JBQUssQ0FBYTtnQkFDdEMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFBO2dCQUN0QixRQUFRLENBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUUsQ0FBQTtZQUNqQyxDQUFDLENBQUUsQ0FBQTtRQUNQLENBQUM7UUFFRCxRQUFRLEVBQUUsVUFBVyxVQUFVLEVBQUUsUUFBUTtZQUNyQyxJQUFNLEtBQUssR0FBRyxVQUFVLEtBQUssT0FBTyxDQUFDLENBQUM7Z0JBQ2xDLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBRSxPQUFPLEVBQUU7b0JBQzVCLE9BQU8sRUFBRSxJQUFJO29CQUNiLFVBQVUsRUFBRSxJQUFJO2lCQUNuQixDQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBRSxVQUFVLENBQUUsQ0FBQTtZQUV4QyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBRSxRQUFRLENBQUUsQ0FBQyxhQUFhLENBQUUsS0FBSyxDQUFFLENBQUE7UUFDcEUsQ0FBQztRQUVELE1BQU0sRUFBRSxVQUFXLElBQUk7WUFDbkIsR0FBRyxDQUFDLGNBQWMsQ0FBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFFLENBQUE7UUFDNUQsQ0FBQztRQUVELElBQUksRUFBRSxVQUFXLFFBQVE7WUFDckIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFFLFFBQVEsQ0FBRSxDQUFBO1FBQ3BELENBQUM7S0FDSixDQUFBO0FBQ0wsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLElBQU0sZUFBZSxHQUFHLFVBQVcsUUFBUTtJQUM5QyxNQUFNLENBQUMsVUFBVyxHQUFHLEVBQUUsT0FBTztRQUMxQixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUUsVUFBVyxHQUFHLEVBQUUsR0FBRztZQUNuQyxJQUFNLGlCQUFpQixHQUFHO2dCQUN0QixNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU07Z0JBQ3ZCLElBQUksRUFBRSxjQUFNLE9BQUEsT0FBTyxDQUFDLE9BQU8sQ0FBRSxRQUFRLENBQUMsSUFBSSxDQUFFLEVBQWhDLENBQWdDO2FBQy9DLENBQUE7WUFFRCxFQUFFLENBQUMsQ0FBRSxHQUFHLEtBQUssWUFBWSxJQUFJLEdBQUcsS0FBSyxXQUFZLENBQUMsQ0FBQyxDQUFDO2dCQUNoRCxHQUFHLENBQUUsaUJBQWlCLENBQUUsQ0FBQTtZQUM1QixDQUFDO1lBQ0QsSUFBSSxDQUFDLENBQUM7Z0JBQ0YsR0FBRyxDQUFFLGlCQUFpQixDQUFFLENBQUE7WUFDNUIsQ0FBQztRQUNMLENBQUMsQ0FBRSxDQUFBO0lBQ1AsQ0FBQyxDQUFBO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSlNET00gZnJvbSBcImpzZG9tXCJcblxuaW1wb3J0ICogYXMgRE9NIGZyb20gXCIuL0RPTVwiXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVUYXJnZXQgPSBmdW5jdGlvbiAoIGh0bWwgKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBgPCFET0NUWVBFIGh0bWw+PGhlYWQ+PC9oZWFkPjxib2R5PiR7IGh0bWwgfTwvYm9keT5gXG4gICAgY29uc3QgZG9jdW1lbnQgPSBuZXcgSlNET00uSlNET00oIHRlbXBsYXRlICkud2luZG93LmRvY3VtZW50XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZFxufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlV2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gYDwhRE9DVFlQRSBodG1sPjxoZWFkPjwvaGVhZD48Ym9keT48L2JvZHk+YFxuICAgIHJldHVybiBuZXcgSlNET00uSlNET00oIHRlbXBsYXRlICkud2luZG93XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVUZXN0Q29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB3aW5kb3cgPSBjcmVhdGVXaW5kb3coKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25BY3Rpb246IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJhY3Rpb25cIiwgZnVuY3Rpb24gKCBlOiBDdXN0b21FdmVudCApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG5hbWUsIGRhdGEsIGV2ZW50IH0gPSBlLmRldGFpbFxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgICBjYWxsYmFjayggbmFtZSwgZGF0YSwgZXZlbnQgKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uICggZXZlbnRfdHlwZSwgc2VsZWN0b3IgKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGV2ZW50X3R5cGUgPT09IFwiY2xpY2tcIiA/XG4gICAgICAgICAgICAgICAgbmV3IHdpbmRvdy5Nb3VzZUV2ZW50KCBcImNsaWNrXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0gKSA6IG5ldyB3aW5kb3cuRXZlbnQoIGV2ZW50X3R5cGUgKVxuXG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3Rvciggc2VsZWN0b3IgKS5kaXNwYXRjaEV2ZW50KCBldmVudCApXG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoIHZpZXcgKSB7XG4gICAgICAgICAgICBET00udXBkYXRlQ2hpbGRyZW4oIHdpbmRvdywgd2luZG93LmRvY3VtZW50LmJvZHksIHZpZXcgKVxuICAgICAgICB9LFxuXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uICggc2VsZWN0b3IgKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIHNlbGVjdG9yIClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUZha2VGZXRjaCA9IGZ1bmN0aW9uICggcmVzcG9uc2UgKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICggdXJsLCBvcHRpb25zICkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzLCByZWogKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZVRvRm9yd2FyZCA9IHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoIHJlc3BvbnNlLmRhdGEgKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHVybCA9PT0gXCIvYXBpL3Bvc3QxXCIgfHwgdXJsID09PSBcIi9hcGkvZ2V0MVwiICkge1xuICAgICAgICAgICAgICAgIHJlcyggcmVzcG9uc2VUb0ZvcndhcmQgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqKCByZXNwb25zZVRvRm9yd2FyZCApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuICAgIH1cbn1cblxuIl19