import * as DOM from "./DOM";
import * as Utils from "./Utils";
import * as Command from "./Command";
import * as HTML from "./HTML";
var run = function (window, app_component, app_name) {
    var context = Utils.createContext();
    var app = context.createComponent(app_component, app_name);
    var _a = app.init(window.location.hash.slice(1)), viewState = _a[0], commands = _a[1];
    var view = app.render(viewState);
    window.addEventListener("action", function (e) {
        console.group("%c", "color: gray; font-weight: lighter;", e.detail.name);
        console.log("%c prev state", "color: #9E9E9E; font-weight: bold;", viewState);
        console.log("%c message", "color: #03A9F4; font-weight: bold;", e.detail);
        var _a = app.update(e.detail, viewState), state = _a[0], commands = _a[1];
        console.log("%c next state", "color: #4CAF50; font-weight: bold;", state);
        console.log("%c commands", "color: #4CAF50; font-weight: bold;", commands);
        viewState = state;
        view = app.render(viewState);
        DOM.updateChildren(window, window.document.body, view);
        Command.process(window, commands);
        console.groupEnd();
    });
    window.addEventListener("hashchange", function (e) {
        window.document.dispatchEvent(new window["CustomEvent"]("action", {
            detail: { name: ":route-changed", data: window.location.hash.slice(1) },
            bubbles: true,
            cancelable: true
        }));
    });
    // because we never want to do standard submits in SPAs
    window.document.addEventListener("submit", function (e) { return e.preventDefault(); }, true);
    DOM.updateChildren(window, window.document.body, view);
    Command.process(window, commands);
};
export { run, Utils, HTML, Command };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTHltcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvTHltcGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUE7QUFDNUIsT0FBTyxLQUFLLEtBQUssTUFBTSxTQUFTLENBQUE7QUFDaEMsT0FBTyxLQUFLLE9BQU8sTUFBTSxXQUFXLENBQUE7QUFDcEMsT0FBTyxLQUFLLElBQUksTUFBTSxRQUFRLENBQUE7QUFFOUIsSUFBTSxHQUFHLEdBQUcsVUFBVyxNQUFNLEVBQUUsYUFBYSxFQUFFLFFBQVE7SUFDbEQsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3JDLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUUsYUFBYSxFQUFFLFFBQVEsQ0FBRSxDQUFBO0lBRTFELElBQUEsNENBQXFFLEVBQW5FLGlCQUFTLEVBQUUsZ0JBQVEsQ0FBZ0Q7SUFFekUsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBRSxTQUFTLENBQUUsQ0FBQTtJQUVsQyxNQUFNLENBQUMsZ0JBQWdCLENBQUUsUUFBUSxFQUFFLFVBQVcsQ0FBYztRQUN4RCxPQUFPLENBQUMsS0FBSyxDQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRSxDQUFBO1FBRTFFLE9BQU8sQ0FBQyxHQUFHLENBQUUsZUFBZSxFQUFFLG9DQUFvQyxFQUFFLFNBQVMsQ0FBRSxDQUFBO1FBQy9FLE9BQU8sQ0FBQyxHQUFHLENBQUUsWUFBWSxFQUFFLG9DQUFvQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUUsQ0FBQTtRQUVyRSxJQUFBLG9DQUF1RCxFQUFyRCxhQUFLLEVBQUUsZ0JBQVEsQ0FBc0M7UUFFN0QsT0FBTyxDQUFDLEdBQUcsQ0FBRSxlQUFlLEVBQUUsb0NBQW9DLEVBQUUsS0FBSyxDQUFFLENBQUE7UUFDM0UsT0FBTyxDQUFDLEdBQUcsQ0FBRSxhQUFhLEVBQUUsb0NBQW9DLEVBQUUsUUFBUSxDQUFFLENBQUE7UUFFNUUsU0FBUyxHQUFHLEtBQUssQ0FBQTtRQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBRSxTQUFTLENBQUUsQ0FBQTtRQUU5QixHQUFHLENBQUMsY0FBYyxDQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQTtRQUV4RCxPQUFPLENBQUMsT0FBTyxDQUFFLE1BQU0sRUFBRSxRQUFRLENBQUUsQ0FBQTtRQUVuQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDdEIsQ0FBQyxDQUFFLENBQUE7SUFFSCxNQUFNLENBQUMsZ0JBQWdCLENBQUUsWUFBWSxFQUFFLFVBQVcsQ0FBQztRQUMvQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FDekIsSUFBSSxNQUFNLENBQUUsYUFBYSxDQUFFLENBQUUsUUFBUSxFQUFFO1lBQ25DLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBRSxFQUFFO1lBQ3pFLE9BQU8sRUFBRSxJQUFJO1lBQ2IsVUFBVSxFQUFFLElBQUk7U0FDbkIsQ0FBRSxDQUNOLENBQUE7SUFDTCxDQUFDLENBQUUsQ0FBQTtJQUVILHVEQUF1RDtJQUN2RCxNQUFNLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFFLFFBQVEsRUFBRSxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBbEIsQ0FBa0IsRUFBRSxJQUFJLENBQUUsQ0FBQTtJQUUzRSxHQUFHLENBQUMsY0FBYyxDQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQTtJQUV4RCxPQUFPLENBQUMsT0FBTyxDQUFFLE1BQU0sRUFBRSxRQUFRLENBQUUsQ0FBQTtBQUN2QyxDQUFDLENBQUE7QUFFRCxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBET00gZnJvbSBcIi4vRE9NXCJcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCJcbmltcG9ydCAqIGFzIENvbW1hbmQgZnJvbSBcIi4vQ29tbWFuZFwiXG5pbXBvcnQgKiBhcyBIVE1MIGZyb20gXCIuL0hUTUxcIlxuXG5jb25zdCBydW4gPSBmdW5jdGlvbiAoIHdpbmRvdywgYXBwX2NvbXBvbmVudCwgYXBwX25hbWUgKSB7XG4gICAgY29uc3QgY29udGV4dCA9IFV0aWxzLmNyZWF0ZUNvbnRleHQoKVxuICAgIGNvbnN0IGFwcCA9IGNvbnRleHQuY3JlYXRlQ29tcG9uZW50KCBhcHBfY29tcG9uZW50LCBhcHBfbmFtZSApXG5cbiAgICBsZXQgWyB2aWV3U3RhdGUsIGNvbW1hbmRzIF0gPSBhcHAuaW5pdCggd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoIDEgKSApXG5cbiAgICBsZXQgdmlldyA9IGFwcC5yZW5kZXIoIHZpZXdTdGF0ZSApXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJhY3Rpb25cIiwgZnVuY3Rpb24gKCBlOiBDdXN0b21FdmVudCApIHtcbiAgICAgICAgY29uc29sZS5ncm91cCggXCIlY1wiLCBcImNvbG9yOiBncmF5OyBmb250LXdlaWdodDogbGlnaHRlcjtcIiwgZS5kZXRhaWwubmFtZSApXG5cbiAgICAgICAgY29uc29sZS5sb2coIFwiJWMgcHJldiBzdGF0ZVwiLCBcImNvbG9yOiAjOUU5RTlFOyBmb250LXdlaWdodDogYm9sZDtcIiwgdmlld1N0YXRlIClcbiAgICAgICAgY29uc29sZS5sb2coIFwiJWMgbWVzc2FnZVwiLCBcImNvbG9yOiAjMDNBOUY0OyBmb250LXdlaWdodDogYm9sZDtcIiwgZS5kZXRhaWwgKVxuXG4gICAgICAgIGNvbnN0IFsgc3RhdGUsIGNvbW1hbmRzIF0gPSBhcHAudXBkYXRlKCBlLmRldGFpbCwgdmlld1N0YXRlIClcblxuICAgICAgICBjb25zb2xlLmxvZyggXCIlYyBuZXh0IHN0YXRlXCIsIFwiY29sb3I6ICM0Q0FGNTA7IGZvbnQtd2VpZ2h0OiBib2xkO1wiLCBzdGF0ZSApXG4gICAgICAgIGNvbnNvbGUubG9nKCBcIiVjIGNvbW1hbmRzXCIsIFwiY29sb3I6ICM0Q0FGNTA7IGZvbnQtd2VpZ2h0OiBib2xkO1wiLCBjb21tYW5kcyApXG5cbiAgICAgICAgdmlld1N0YXRlID0gc3RhdGVcbiAgICAgICAgdmlldyA9IGFwcC5yZW5kZXIoIHZpZXdTdGF0ZSApXG5cbiAgICAgICAgRE9NLnVwZGF0ZUNoaWxkcmVuKCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudC5ib2R5LCB2aWV3IClcblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgY29tbWFuZHMgKVxuXG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKVxuICAgIH0gKVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwiaGFzaGNoYW5nZVwiLCBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgbmV3IHdpbmRvd1sgXCJDdXN0b21FdmVudFwiIF0oIFwiYWN0aW9uXCIsIHtcbiAgICAgICAgICAgICAgICBkZXRhaWw6IHsgbmFtZTogYDpyb3V0ZS1jaGFuZ2VkYCwgZGF0YTogd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoIDEgKSB9LFxuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSApXG4gICAgICAgIClcbiAgICB9IClcblxuICAgIC8vIGJlY2F1c2Ugd2UgbmV2ZXIgd2FudCB0byBkbyBzdGFuZGFyZCBzdWJtaXRzIGluIFNQQXNcbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJzdWJtaXRcIiwgZSA9PiBlLnByZXZlbnREZWZhdWx0KCksIHRydWUgKVxuXG4gICAgRE9NLnVwZGF0ZUNoaWxkcmVuKCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudC5ib2R5LCB2aWV3IClcblxuICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBjb21tYW5kcyApXG59XG5cbmV4cG9ydCB7IHJ1biwgVXRpbHMsIEhUTUwsIENvbW1hbmQgfVxuIl19