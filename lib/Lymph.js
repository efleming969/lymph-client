import * as DOM from "./DOM";
import * as Utils from "./Utils";
import * as Command from "./Command";
import * as HTML from "./HTML";
var run = function (window, app_component, app_name) {
    var context = Utils.createContext();
    var app = context.createComponent(app_component, app_name);
    var _a = app.init(window.location.hash.slice(1)), viewState = _a[0], commands = _a[1];
    var view = app.render(viewState);
    var lymph_config = window["lymphConfig"] || {
        actionName: "action"
    };
    window.addEventListener(lymph_config.actionName, function (e) {
        console.group("%c", "color: gray; font-weight: lighter;", e.detail.name);
        console.log("%c prev state", "color: #9E9E9E; font-weight: bold;", viewState);
        console.log("%c message", "color: #03A9F4; font-weight: bold;", e.detail);
        var _a = app.update(e.detail, viewState), state = _a[0], commands = _a[1];
        console.log("%c next state", "color: #4CAF50; font-weight: bold;", state);
        console.log("%c commands", "color: #4CAF50; font-weight: bold;", commands);
        viewState = state;
        view = app.render(viewState);
        DOM.updateChildren(window, window.document.body, view);
        Command.process(window, commands);
        console.groupEnd();
    });
    window.addEventListener("hashchange", function (e) {
        window.document.dispatchEvent(new window["CustomEvent"](lymph_config.actionName, {
            detail: { name: ":route-changed", data: window.location.hash.slice(1) },
            bubbles: true,
            cancelable: true
        }));
    });
    // because we never want to do standard submits in SPAs
    window.document.addEventListener("submit", function (e) { return e.preventDefault(); }, true);
    DOM.updateChildren(window, window.document.body, view);
    Command.process(window, commands);
};
export { run, Utils, HTML, Command };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTHltcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvTHltcGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUE7QUFDNUIsT0FBTyxLQUFLLEtBQUssTUFBTSxTQUFTLENBQUE7QUFDaEMsT0FBTyxLQUFLLE9BQU8sTUFBTSxXQUFXLENBQUE7QUFDcEMsT0FBTyxLQUFLLElBQUksTUFBTSxRQUFRLENBQUE7QUFFOUIsSUFBTSxHQUFHLEdBQUcsVUFBVyxNQUFNLEVBQUUsYUFBYSxFQUFFLFFBQVE7SUFDbEQsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3JDLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUUsYUFBYSxFQUFFLFFBQVEsQ0FBRSxDQUFBO0lBRTFELElBQUEsNENBQXFFLEVBQW5FLGlCQUFTLEVBQUUsZ0JBQVEsQ0FBZ0Q7SUFFekUsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBRSxTQUFTLENBQUUsQ0FBQTtJQUVsQyxJQUFNLFlBQVksR0FBRyxNQUFNLENBQUUsYUFBYSxDQUFFLElBQUk7UUFDNUMsVUFBVSxFQUFFLFFBQVE7S0FDdkIsQ0FBQTtJQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxZQUFZLENBQUMsVUFBVSxFQUFFLFVBQVcsQ0FBYztRQUN2RSxPQUFPLENBQUMsS0FBSyxDQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRSxDQUFBO1FBRTFFLE9BQU8sQ0FBQyxHQUFHLENBQUUsZUFBZSxFQUFFLG9DQUFvQyxFQUFFLFNBQVMsQ0FBRSxDQUFBO1FBQy9FLE9BQU8sQ0FBQyxHQUFHLENBQUUsWUFBWSxFQUFFLG9DQUFvQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUUsQ0FBQTtRQUVyRSxJQUFBLG9DQUF1RCxFQUFyRCxhQUFLLEVBQUUsZ0JBQVEsQ0FBc0M7UUFFN0QsT0FBTyxDQUFDLEdBQUcsQ0FBRSxlQUFlLEVBQUUsb0NBQW9DLEVBQUUsS0FBSyxDQUFFLENBQUE7UUFDM0UsT0FBTyxDQUFDLEdBQUcsQ0FBRSxhQUFhLEVBQUUsb0NBQW9DLEVBQUUsUUFBUSxDQUFFLENBQUE7UUFFNUUsU0FBUyxHQUFHLEtBQUssQ0FBQTtRQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBRSxTQUFTLENBQUUsQ0FBQTtRQUU5QixHQUFHLENBQUMsY0FBYyxDQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQTtRQUV4RCxPQUFPLENBQUMsT0FBTyxDQUFFLE1BQU0sRUFBRSxRQUFRLENBQUUsQ0FBQTtRQUVuQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDdEIsQ0FBQyxDQUFFLENBQUE7SUFFSCxNQUFNLENBQUMsZ0JBQWdCLENBQUUsWUFBWSxFQUFFLFVBQVcsQ0FBQztRQUMvQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FDekIsSUFBSSxNQUFNLENBQUUsYUFBYSxDQUFFLENBQUUsWUFBWSxDQUFDLFVBQVUsRUFBRTtZQUNsRCxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFDLENBQUUsRUFBRTtZQUN6RSxPQUFPLEVBQUUsSUFBSTtZQUNiLFVBQVUsRUFBRSxJQUFJO1NBQ25CLENBQUUsQ0FDTixDQUFBO0lBQ0wsQ0FBQyxDQUFFLENBQUE7SUFFSCx1REFBdUQ7SUFDdkQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFRLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQWxCLENBQWtCLEVBQUUsSUFBSSxDQUFFLENBQUE7SUFFM0UsR0FBRyxDQUFDLGNBQWMsQ0FBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFFLENBQUE7SUFFeEQsT0FBTyxDQUFDLE9BQU8sQ0FBRSxNQUFNLEVBQUUsUUFBUSxDQUFFLENBQUE7QUFDdkMsQ0FBQyxDQUFBO0FBRUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRE9NIGZyb20gXCIuL0RPTVwiXG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiXG5pbXBvcnQgKiBhcyBDb21tYW5kIGZyb20gXCIuL0NvbW1hbmRcIlxuaW1wb3J0ICogYXMgSFRNTCBmcm9tIFwiLi9IVE1MXCJcblxuY29uc3QgcnVuID0gZnVuY3Rpb24gKCB3aW5kb3csIGFwcF9jb21wb25lbnQsIGFwcF9uYW1lICkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBVdGlscy5jcmVhdGVDb250ZXh0KClcbiAgICBjb25zdCBhcHAgPSBjb250ZXh0LmNyZWF0ZUNvbXBvbmVudCggYXBwX2NvbXBvbmVudCwgYXBwX25hbWUgKVxuXG4gICAgbGV0IFsgdmlld1N0YXRlLCBjb21tYW5kcyBdID0gYXBwLmluaXQoIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnNsaWNlKCAxICkgKVxuXG4gICAgbGV0IHZpZXcgPSBhcHAucmVuZGVyKCB2aWV3U3RhdGUgKVxuXG4gICAgY29uc3QgbHltcGhfY29uZmlnID0gd2luZG93WyBcImx5bXBoQ29uZmlnXCIgXSB8fCB7XG4gICAgICAgIGFjdGlvbk5hbWU6IFwiYWN0aW9uXCJcbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggbHltcGhfY29uZmlnLmFjdGlvbk5hbWUsIGZ1bmN0aW9uICggZTogQ3VzdG9tRXZlbnQgKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoIFwiJWNcIiwgXCJjb2xvcjogZ3JheTsgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XCIsIGUuZGV0YWlsLm5hbWUgKVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCBcIiVjIHByZXYgc3RhdGVcIiwgXCJjb2xvcjogIzlFOUU5RTsgZm9udC13ZWlnaHQ6IGJvbGQ7XCIsIHZpZXdTdGF0ZSApXG4gICAgICAgIGNvbnNvbGUubG9nKCBcIiVjIG1lc3NhZ2VcIiwgXCJjb2xvcjogIzAzQTlGNDsgZm9udC13ZWlnaHQ6IGJvbGQ7XCIsIGUuZGV0YWlsIClcblxuICAgICAgICBjb25zdCBbIHN0YXRlLCBjb21tYW5kcyBdID0gYXBwLnVwZGF0ZSggZS5kZXRhaWwsIHZpZXdTdGF0ZSApXG5cbiAgICAgICAgY29uc29sZS5sb2coIFwiJWMgbmV4dCBzdGF0ZVwiLCBcImNvbG9yOiAjNENBRjUwOyBmb250LXdlaWdodDogYm9sZDtcIiwgc3RhdGUgKVxuICAgICAgICBjb25zb2xlLmxvZyggXCIlYyBjb21tYW5kc1wiLCBcImNvbG9yOiAjNENBRjUwOyBmb250LXdlaWdodDogYm9sZDtcIiwgY29tbWFuZHMgKVxuXG4gICAgICAgIHZpZXdTdGF0ZSA9IHN0YXRlXG4gICAgICAgIHZpZXcgPSBhcHAucmVuZGVyKCB2aWV3U3RhdGUgKVxuXG4gICAgICAgIERPTS51cGRhdGVDaGlsZHJlbiggd2luZG93LCB3aW5kb3cuZG9jdW1lbnQuYm9keSwgdmlldyApXG5cbiAgICAgICAgQ29tbWFuZC5wcm9jZXNzKCB3aW5kb3csIGNvbW1hbmRzIClcblxuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKClcbiAgICB9IClcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImhhc2hjaGFuZ2VcIiwgZnVuY3Rpb24gKCBlICkge1xuICAgICAgICB3aW5kb3cuZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgIG5ldyB3aW5kb3dbIFwiQ3VzdG9tRXZlbnRcIiBdKCBseW1waF9jb25maWcuYWN0aW9uTmFtZSwge1xuICAgICAgICAgICAgICAgIGRldGFpbDogeyBuYW1lOiBgOnJvdXRlLWNoYW5nZWRgLCBkYXRhOiB3aW5kb3cubG9jYXRpb24uaGFzaC5zbGljZSggMSApIH0sXG4gICAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgICAgICB9IClcbiAgICAgICAgKVxuICAgIH0gKVxuXG4gICAgLy8gYmVjYXVzZSB3ZSBuZXZlciB3YW50IHRvIGRvIHN0YW5kYXJkIHN1Ym1pdHMgaW4gU1BBc1xuICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcInN1Ym1pdFwiLCBlID0+IGUucHJldmVudERlZmF1bHQoKSwgdHJ1ZSApXG5cbiAgICBET00udXBkYXRlQ2hpbGRyZW4oIHdpbmRvdywgd2luZG93LmRvY3VtZW50LmJvZHksIHZpZXcgKVxuXG4gICAgQ29tbWFuZC5wcm9jZXNzKCB3aW5kb3csIGNvbW1hbmRzIClcbn1cblxuZXhwb3J0IHsgcnVuLCBVdGlscywgSFRNTCwgQ29tbWFuZCB9XG4iXX0=