import * as Utils from "./Utils";
import * as MessageRouter from "./MessageRouter";
describe("message routing", function () {
    const actions = {
        Action1: "action1",
        Action2: "action2",
        Action3: "action3",
        Action4: "action4"
    };
    const sub_actions = {
        Action1: "action1",
        Action2: "action2"
    };
    const sub_routes = MessageRouter.create({
        [sub_actions.Action1]: (message, state) => ["sub_action1"],
        [sub_actions.Action2]: (message, state) => ["sub_action2" + state]
    });
    const routes = MessageRouter.create({
        [actions.Action1]: (message, state) => [state + message.data],
        [actions.Action2]: (message, state) => [(state + message.data).toUpperCase()],
        [actions.Action3]: (message, state) => sub_routes(message, state),
        [actions.Action4]: (message, state) => [message.event]
    });
    test("unknown routes just returns the state", function () {
        expect(routes({ name: "unknown", data: "bar" }, "foo")).toEqual(["foo", undefined]);
    });
    test("handle static routes", function () {
        expect(routes({ name: ":action1", data: "bar" }, "foo")).toEqual(["foobar"]);
        expect(routes({ name: ":action2", data: "bar" }, "foo")).toEqual(["FOOBAR"]);
    });
    test("handle child routes", function () {
        expect(routes({ name: ":action3:action1", data: "" }, "")).toEqual(["sub_action1"]);
    });
    test("send state to child routes", function () {
        expect(routes({ name: ":action3:action2", data: "" }, "foo")).toEqual(["sub_action2foo"]);
    });
    test("pass an event object", function () {
        expect(routes({ name: ":action4", data: "", event: "event-object" }, "")).toEqual(["event-object"]);
    });
});
describe("utils", function () {
    it('maps an object to an array of things', function () {
        const result = Utils.mapObjectToArray({ "some-name": () => "some function" }, function (key, value) {
            return { name: key, fn: value };
        });
        expect(result[0].fn()).toEqual("some function");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZVJvdXRpbmdUZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9NZXNzYWdlUm91dGluZ1Rlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sU0FBUyxDQUFBO0FBQ2hDLE9BQU8sS0FBSyxhQUFhLE1BQU0saUJBQWlCLENBQUE7QUFFaEQsUUFBUSxDQUFFLGlCQUFpQixFQUFFO0lBRXpCLE1BQU0sT0FBTyxHQUFHO1FBQ1osT0FBTyxFQUFFLFNBQVM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7S0FDckIsQ0FBQTtJQUVELE1BQU0sV0FBVyxHQUFHO1FBQ2hCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLE9BQU8sRUFBRSxTQUFTO0tBQ3JCLENBQUE7SUFFRCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFFO1FBQ3JDLENBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBRSxFQUFFLENBQUUsT0FBTyxFQUFFLEtBQUssRUFBRyxFQUFFLENBQUMsQ0FBRSxhQUFhLENBQUU7UUFDaEUsQ0FBRSxXQUFXLENBQUMsT0FBTyxDQUFFLEVBQUUsQ0FBRSxPQUFPLEVBQUUsS0FBSyxFQUFHLEVBQUUsQ0FBQyxDQUFFLGFBQWEsR0FBRyxLQUFLLENBQUU7S0FDM0UsQ0FBRSxDQUFBO0lBRUgsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBRTtRQUNqQyxDQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLENBQUUsS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUU7UUFDbkUsQ0FBRSxPQUFPLENBQUMsT0FBTyxDQUFFLEVBQUUsQ0FBRSxPQUFPLEVBQUUsS0FBSyxFQUFHLEVBQUUsQ0FBQyxDQUFFLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBRTtRQUNuRixDQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBRSxPQUFPLEVBQUUsS0FBSyxDQUFFO1FBQ3ZFLENBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBRSxFQUFFLENBQUUsT0FBTyxFQUFFLEtBQUssRUFBRyxFQUFFLENBQUMsQ0FBRSxPQUFPLENBQUMsS0FBSyxDQUFFO0tBQy9ELENBQUUsQ0FBQTtJQUVILElBQUksQ0FBRSx1Q0FBdUMsRUFBRTtRQUMzQyxNQUFNLENBQUUsTUFBTSxDQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBRSxLQUFLLEVBQUUsU0FBUyxDQUFFLENBQUUsQ0FBQTtJQUMvRixDQUFDLENBQUUsQ0FBQTtJQUVILElBQUksQ0FBRSxzQkFBc0IsRUFBRTtRQUMxQixNQUFNLENBQUUsTUFBTSxDQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBRSxRQUFRLENBQUUsQ0FBRSxDQUFBO1FBQ3BGLE1BQU0sQ0FBRSxNQUFNLENBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxDQUFFLFFBQVEsQ0FBRSxDQUFFLENBQUE7SUFDeEYsQ0FBQyxDQUFFLENBQUE7SUFFSCxJQUFJLENBQUUscUJBQXFCLEVBQUU7UUFDekIsTUFBTSxDQUFFLE1BQU0sQ0FBRSxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBRSxhQUFhLENBQUUsQ0FBRSxDQUFBO0lBQy9GLENBQUMsQ0FBRSxDQUFBO0lBRUgsSUFBSSxDQUFFLDRCQUE0QixFQUFFO1FBQ2hDLE1BQU0sQ0FBRSxNQUFNLENBQUUsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBRSxDQUFFLENBQUMsT0FBTyxDQUFFLENBQUUsZ0JBQWdCLENBQUUsQ0FBRSxDQUFBO0lBQ3JHLENBQUMsQ0FBRSxDQUFBO0lBRUgsSUFBSSxDQUFFLHNCQUFzQixFQUFFO1FBQzFCLE1BQU0sQ0FBRSxNQUFNLENBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBRSxDQUFFLENBQUMsT0FBTyxDQUFFLENBQUUsY0FBYyxDQUFFLENBQUUsQ0FBQTtJQUMvRyxDQUFDLENBQUUsQ0FBQTtBQUVQLENBQUMsQ0FBRSxDQUFBO0FBRUgsUUFBUSxDQUFFLE9BQU8sRUFBRTtJQUVmLEVBQUUsQ0FBRSxzQ0FBc0MsRUFBRTtRQUN4QyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUUsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFLEVBQUUsVUFBVyxHQUFHLEVBQUUsS0FBSztZQUNoRyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQTtRQUNuQyxDQUFDLENBQUUsQ0FBQTtRQUVILE1BQU0sQ0FBRSxNQUFNLENBQUUsQ0FBQyxDQUFFLENBQUMsRUFBRSxFQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsZUFBZSxDQUFFLENBQUE7SUFDekQsQ0FBQyxDQUFFLENBQUM7QUFDUixDQUFDLENBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuL1V0aWxzXCJcbmltcG9ydCAqIGFzIE1lc3NhZ2VSb3V0ZXIgZnJvbSBcIi4vTWVzc2FnZVJvdXRlclwiXG5cbmRlc2NyaWJlKCBcIm1lc3NhZ2Ugcm91dGluZ1wiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICBjb25zdCBhY3Rpb25zID0ge1xuICAgICAgICBBY3Rpb24xOiBcImFjdGlvbjFcIixcbiAgICAgICAgQWN0aW9uMjogXCJhY3Rpb24yXCIsXG4gICAgICAgIEFjdGlvbjM6IFwiYWN0aW9uM1wiLFxuICAgICAgICBBY3Rpb240OiBcImFjdGlvbjRcIlxuICAgIH1cblxuICAgIGNvbnN0IHN1Yl9hY3Rpb25zID0ge1xuICAgICAgICBBY3Rpb24xOiBcImFjdGlvbjFcIixcbiAgICAgICAgQWN0aW9uMjogXCJhY3Rpb24yXCJcbiAgICB9XG5cbiAgICBjb25zdCBzdWJfcm91dGVzID0gTWVzc2FnZVJvdXRlci5jcmVhdGUoIHtcbiAgICAgICAgWyBzdWJfYWN0aW9ucy5BY3Rpb24xIF06ICggbWVzc2FnZSwgc3RhdGUgKSA9PiBbIFwic3ViX2FjdGlvbjFcIiBdLFxuICAgICAgICBbIHN1Yl9hY3Rpb25zLkFjdGlvbjIgXTogKCBtZXNzYWdlLCBzdGF0ZSApID0+IFsgXCJzdWJfYWN0aW9uMlwiICsgc3RhdGUgXVxuICAgIH0gKVxuXG4gICAgY29uc3Qgcm91dGVzID0gTWVzc2FnZVJvdXRlci5jcmVhdGUoIHtcbiAgICAgICAgWyBhY3Rpb25zLkFjdGlvbjEgXTogKCBtZXNzYWdlLCBzdGF0ZSApID0+IFsgc3RhdGUgKyBtZXNzYWdlLmRhdGEgXSxcbiAgICAgICAgWyBhY3Rpb25zLkFjdGlvbjIgXTogKCBtZXNzYWdlLCBzdGF0ZSApID0+IFsgKHN0YXRlICsgbWVzc2FnZS5kYXRhKS50b1VwcGVyQ2FzZSgpIF0sXG4gICAgICAgIFsgYWN0aW9ucy5BY3Rpb24zIF06ICggbWVzc2FnZSwgc3RhdGUgKSA9PiBzdWJfcm91dGVzKCBtZXNzYWdlLCBzdGF0ZSApLFxuICAgICAgICBbIGFjdGlvbnMuQWN0aW9uNCBdOiAoIG1lc3NhZ2UsIHN0YXRlICkgPT4gWyBtZXNzYWdlLmV2ZW50IF1cbiAgICB9IClcblxuICAgIHRlc3QoIFwidW5rbm93biByb3V0ZXMganVzdCByZXR1cm5zIHRoZSBzdGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV4cGVjdCggcm91dGVzKCB7IG5hbWU6IFwidW5rbm93blwiLCBkYXRhOiBcImJhclwiIH0sIFwiZm9vXCIgKSApLnRvRXF1YWwoIFsgXCJmb29cIiwgdW5kZWZpbmVkIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJoYW5kbGUgc3RhdGljIHJvdXRlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV4cGVjdCggcm91dGVzKCB7IG5hbWU6IFwiOmFjdGlvbjFcIiwgZGF0YTogXCJiYXJcIiB9LCBcImZvb1wiICkgKS50b0VxdWFsKCBbIFwiZm9vYmFyXCIgXSApXG4gICAgICAgIGV4cGVjdCggcm91dGVzKCB7IG5hbWU6IFwiOmFjdGlvbjJcIiwgZGF0YTogXCJiYXJcIiB9LCBcImZvb1wiICkgKS50b0VxdWFsKCBbIFwiRk9PQkFSXCIgXSApXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcImhhbmRsZSBjaGlsZCByb3V0ZXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QoIHJvdXRlcyggeyBuYW1lOiBcIjphY3Rpb24zOmFjdGlvbjFcIiwgZGF0YTogXCJcIiB9LCBcIlwiICkgKS50b0VxdWFsKCBbIFwic3ViX2FjdGlvbjFcIiBdIClcbiAgICB9IClcblxuICAgIHRlc3QoIFwic2VuZCBzdGF0ZSB0byBjaGlsZCByb3V0ZXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QoIHJvdXRlcyggeyBuYW1lOiBcIjphY3Rpb24zOmFjdGlvbjJcIiwgZGF0YTogXCJcIiB9LCBcImZvb1wiICkgKS50b0VxdWFsKCBbIFwic3ViX2FjdGlvbjJmb29cIiBdIClcbiAgICB9IClcblxuICAgIHRlc3QoIFwicGFzcyBhbiBldmVudCBvYmplY3RcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QoIHJvdXRlcyggeyBuYW1lOiBcIjphY3Rpb240XCIsIGRhdGE6IFwiXCIsIGV2ZW50OiBcImV2ZW50LW9iamVjdFwiIH0sIFwiXCIgKSApLnRvRXF1YWwoIFsgXCJldmVudC1vYmplY3RcIiBdIClcbiAgICB9IClcblxufSApXG5cbmRlc2NyaWJlKCBcInV0aWxzXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgIGl0KCAnbWFwcyBhbiBvYmplY3QgdG8gYW4gYXJyYXkgb2YgdGhpbmdzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBVdGlscy5tYXBPYmplY3RUb0FycmF5KCB7IFwic29tZS1uYW1lXCI6ICgpID0+IFwic29tZSBmdW5jdGlvblwiIH0sIGZ1bmN0aW9uICgga2V5LCB2YWx1ZSApIHtcbiAgICAgICAgICAgIHJldHVybiB7IG5hbWU6IGtleSwgZm46IHZhbHVlIH1cbiAgICAgICAgfSApXG5cbiAgICAgICAgZXhwZWN0KCByZXN1bHRbIDAgXS5mbigpICkudG9FcXVhbCggXCJzb21lIGZ1bmN0aW9uXCIgKVxuICAgIH0gKTtcbn0gKVxuIl19