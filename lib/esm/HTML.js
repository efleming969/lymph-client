var convertProperties = function (propsIn) {
    var propsOut = {};
    for (var propName in propsIn) {
        if (propName === "classes") {
            var classes = [];
            for (var className in propsIn.classes) {
                if (propsIn.classes[className]) {
                    classes.push(className);
                }
            }
            propsOut.className = classes.join(" ");
        }
        else {
            propsOut[propName] = propsIn[propName];
        }
    }
    return propsOut;
};
var convertChildren = function (children) {
    if (typeof children === "string") {
        return [children];
    }
    else {
        return children;
    }
};
var create = function (tagName) {
    tagName = tagName.toUpperCase();
    return function (properties, children) {
        if (properties === void 0) { properties = {}; }
        if (children === void 0) { children = []; }
        return {
            tagName: tagName,
            properties: convertProperties(properties),
            children: convertChildren(children)
        };
    };
};
export var h1 = create("h1");
export var h2 = create("h2");
export var h3 = create("h3");
export var hr = create("hr");
export var a = create("a");
export var p = create("p");
export var div = create("div");
export var span = create("span");
export var ul = create("ul");
export var li = create("li");
export var form = create("form");
export var input = create("input");
export var button = create("button");
export var select = create("select");
export var label = create("label");
export var fieldset = create("fieldset");
export var body = create("body");
export var section = create("section");
export var header = create("header");
export var footer = create("footer");
export var main = create("main");
export var canvas = create("canvas");
export var textBox = function (name, value) {
    return input({ type: "text", name: name, value: value });
};
export var link = function (href, text) {
    return a({ href: href }, [text]);
};
export var buildFormField = function (field) {
    return div({}, [
        label({ for: field.id }, [field.label]),
        input({ type: field.type, id: field.id, name: field.id, value: field.value || "" })
    ]);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSFRNTC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9IVE1MLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQU0saUJBQWlCLEdBQUcsVUFBVyxPQUFPO0lBQ3hDLElBQU0sUUFBUSxHQUFRLEVBQUUsQ0FBQTtJQUV4QixHQUFHLENBQUMsQ0FBRSxJQUFJLFFBQVEsSUFBSSxPQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzdCLEVBQUUsQ0FBQyxDQUFFLFFBQVEsS0FBSyxTQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzNCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQTtZQUNoQixHQUFHLENBQUMsQ0FBRSxJQUFJLFNBQVMsSUFBSSxPQUFPLENBQUMsT0FBUSxDQUFDLENBQUMsQ0FBQztnQkFDdEMsRUFBRSxDQUFDLENBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBRSxTQUFTLENBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUUsU0FBUyxDQUFFLENBQUE7Z0JBQzdCLENBQUM7WUFDTCxDQUFDO1lBQ0QsUUFBUSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFFLEdBQUcsQ0FBRSxDQUFBO1FBQzVDLENBQUM7UUFDRCxJQUFJLENBQUMsQ0FBQztZQUNGLFFBQVEsQ0FBRSxRQUFRLENBQUUsR0FBRyxPQUFPLENBQUUsUUFBUSxDQUFFLENBQUE7UUFDOUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFBO0FBQ25CLENBQUMsQ0FBQTtBQUVELElBQU0sZUFBZSxHQUFHLFVBQVcsUUFBUTtJQUN2QyxFQUFFLENBQUMsQ0FBRSxPQUFPLFFBQVEsS0FBSyxRQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxDQUFFLFFBQVEsQ0FBRSxDQUFBO0lBQ3ZCLENBQUM7SUFDRCxJQUFJLENBQUMsQ0FBQztRQUNGLE1BQU0sQ0FBQyxRQUFRLENBQUE7SUFDbkIsQ0FBQztBQUNM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QUksQ0FBRSxDQUFFO0FBQXZCLENBQXVCLENBQUE7QUFFM0IsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLFVBQVcsS0FBSztJQUMxQyxNQUFNLENBQUMsR0FBRyxDQUFFLEVBQUUsRUFBRTtRQUNaLEtBQUssQ0FBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBRSxLQUFLLENBQUMsS0FBSyxDQUFFLENBQUU7UUFDM0MsS0FBSyxDQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRSxFQUFFLENBQUU7S0FDeEYsQ0FBRSxDQUFBO0FBQ1AsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29udmVydFByb3BlcnRpZXMgPSBmdW5jdGlvbiAoIHByb3BzSW4gKSB7XG4gICAgY29uc3QgcHJvcHNPdXQ6IGFueSA9IHt9XG5cbiAgICBmb3IgKCBsZXQgcHJvcE5hbWUgaW4gcHJvcHNJbiApIHtcbiAgICAgICAgaWYgKCBwcm9wTmFtZSA9PT0gXCJjbGFzc2VzXCIgKSB7XG4gICAgICAgICAgICBsZXQgY2xhc3NlcyA9IFtdXG4gICAgICAgICAgICBmb3IgKCBsZXQgY2xhc3NOYW1lIGluIHByb3BzSW4uY2xhc3NlcyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHByb3BzSW4uY2xhc3Nlc1sgY2xhc3NOYW1lIF0gKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCggY2xhc3NOYW1lIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9wc091dC5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oIFwiIFwiIClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzT3V0WyBwcm9wTmFtZSBdID0gcHJvcHNJblsgcHJvcE5hbWUgXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzT3V0XG59XG5cbmNvbnN0IGNvbnZlcnRDaGlsZHJlbiA9IGZ1bmN0aW9uICggY2hpbGRyZW4gKSB7XG4gICAgaWYgKCB0eXBlb2YgY2hpbGRyZW4gPT09IFwic3RyaW5nXCIgKSB7XG4gICAgICAgIHJldHVybiBbIGNoaWxkcmVuIF1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlblxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbGVtZW50IHtcbiAgICB0YWdOYW1lOiBzdHJpbmcsXG4gICAgcHJvcGVydGllczogYW55LFxuICAgIGNoaWxkcmVuOiBFbGVtZW50W11cbn1cblxuY29uc3QgY3JlYXRlID0gZnVuY3Rpb24gKCB0YWdOYW1lICkge1xuICAgIHRhZ05hbWUgPSB0YWdOYW1lLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gZnVuY3Rpb24gKCBwcm9wZXJ0aWVzID0ge30sIGNoaWxkcmVuID0gW10gKTogRWxlbWVudCB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0YWdOYW1lLFxuICAgICAgICAgICAgcHJvcGVydGllczogY29udmVydFByb3BlcnRpZXMoIHByb3BlcnRpZXMgKSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBjb252ZXJ0Q2hpbGRyZW4oIGNoaWxkcmVuIClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGgxID0gY3JlYXRlKCBcImgxXCIgKVxuZXhwb3J0IGNvbnN0IGgyID0gY3JlYXRlKCBcImgyXCIgKVxuZXhwb3J0IGNvbnN0IGgzID0gY3JlYXRlKCBcImgzXCIgKVxuXG5leHBvcnQgY29uc3QgaHIgPSBjcmVhdGUoIFwiaHJcIiApXG5leHBvcnQgY29uc3QgYSA9IGNyZWF0ZSggXCJhXCIgKVxuXG5leHBvcnQgY29uc3QgcCA9IGNyZWF0ZSggXCJwXCIgKVxuZXhwb3J0IGNvbnN0IGRpdiA9IGNyZWF0ZSggXCJkaXZcIiApXG5leHBvcnQgY29uc3Qgc3BhbiA9IGNyZWF0ZSggXCJzcGFuXCIgKVxuXG5leHBvcnQgY29uc3QgdWwgPSBjcmVhdGUoIFwidWxcIiApXG5leHBvcnQgY29uc3QgbGkgPSBjcmVhdGUoIFwibGlcIiApXG5cbmV4cG9ydCBjb25zdCBmb3JtID0gY3JlYXRlKCBcImZvcm1cIiApXG5leHBvcnQgY29uc3QgaW5wdXQgPSBjcmVhdGUoIFwiaW5wdXRcIiApXG5leHBvcnQgY29uc3QgYnV0dG9uID0gY3JlYXRlKCBcImJ1dHRvblwiIClcbmV4cG9ydCBjb25zdCBzZWxlY3QgPSBjcmVhdGUoIFwic2VsZWN0XCIgKVxuZXhwb3J0IGNvbnN0IGxhYmVsID0gY3JlYXRlKCBcImxhYmVsXCIgKVxuZXhwb3J0IGNvbnN0IGZpZWxkc2V0ID0gY3JlYXRlKCBcImZpZWxkc2V0XCIgKVxuXG5leHBvcnQgY29uc3QgYm9keSA9IGNyZWF0ZSggXCJib2R5XCIgKVxuZXhwb3J0IGNvbnN0IHNlY3Rpb24gPSBjcmVhdGUoIFwic2VjdGlvblwiIClcbmV4cG9ydCBjb25zdCBoZWFkZXIgPSBjcmVhdGUoIFwiaGVhZGVyXCIgKVxuZXhwb3J0IGNvbnN0IGZvb3RlciA9IGNyZWF0ZSggXCJmb290ZXJcIiApXG5leHBvcnQgY29uc3QgbWFpbiA9IGNyZWF0ZSggXCJtYWluXCIgKVxuZXhwb3J0IGNvbnN0IGNhbnZhcyA9IGNyZWF0ZSggXCJjYW52YXNcIiApXG5cbmV4cG9ydCBjb25zdCB0ZXh0Qm94ID0gKCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgKSA9PlxuICAgIGlucHV0KCB7IHR5cGU6IFwidGV4dFwiLCBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSApXG5cbmV4cG9ydCBjb25zdCBsaW5rID0gKCBocmVmOiBzdHJpbmcsIHRleHQ6IHN0cmluZyApID0+XG4gICAgYSggeyBocmVmIH0sIFsgdGV4dCBdIClcblxuZXhwb3J0IGNvbnN0IGJ1aWxkRm9ybUZpZWxkID0gZnVuY3Rpb24gKCBmaWVsZCApIHtcbiAgICByZXR1cm4gZGl2KCB7fSwgW1xuICAgICAgICBsYWJlbCggeyBmb3I6IGZpZWxkLmlkIH0sIFsgZmllbGQubGFiZWwgXSApLFxuICAgICAgICBpbnB1dCggeyB0eXBlOiBmaWVsZC50eXBlLCBpZDogZmllbGQuaWQsIG5hbWU6IGZpZWxkLmlkLCB2YWx1ZTogZmllbGQudmFsdWUgfHwgXCJcIiB9IClcbiAgICBdIClcbn1cblxuIl19