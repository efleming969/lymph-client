const convertProperties = function (propsIn) {
    const propsOut = {};
    for (let propName in propsIn) {
        if (propName === "classes") {
            let classes = [];
            for (let className in propsIn.classes) {
                if (propsIn.classes[className]) {
                    classes.push(className);
                }
            }
            propsOut.className = classes.join(" ");
        }
        else {
            propsOut[propName] = propsIn[propName];
        }
    }
    return propsOut;
};
const convertChildren = function (children) {
    if (typeof children === "string") {
        return [children];
    }
    else {
        return children;
    }
};
const create = function (tagName) {
    tagName = tagName.toUpperCase();
    return function (properties = {}, children = []) {
        return {
            tagName,
            properties: convertProperties(properties),
            children: convertChildren(children)
        };
    };
};
export const h1 = create("h1");
export const h2 = create("h2");
export const h3 = create("h3");
export const hr = create("hr");
export const a = create("a");
export const p = create("p");
export const div = create("div");
export const span = create("span");
export const ul = create("ul");
export const li = create("li");
export const form = create("form");
export const input = create("input");
export const button = create("button");
export const select = create("select");
export const label = create("label");
export const fieldset = create("fieldset");
export const body = create("body");
export const section = create("section");
export const header = create("header");
export const footer = create("footer");
export const main = create("main");
export const canvas = create("canvas");
export const textBox = (name, value) => input({ type: "text", name: name, value: value });
export const link = (href, text) => a({ href }, [text]);
export const buildFormField = function (field) {
    return div({}, [
        label({ for: field.id }, [field.label]),
        input({ type: field.type, id: field.id, name: field.id, value: field.value || "" })
    ]);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSFRNTC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9IVE1MLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0saUJBQWlCLEdBQUcsVUFBVyxPQUFPO0lBQ3hDLE1BQU0sUUFBUSxHQUFRLEVBQUUsQ0FBQTtJQUV4QixHQUFHLENBQUMsQ0FBRSxJQUFJLFFBQVEsSUFBSSxPQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzdCLEVBQUUsQ0FBQyxDQUFFLFFBQVEsS0FBSyxTQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzNCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQTtZQUNoQixHQUFHLENBQUMsQ0FBRSxJQUFJLFNBQVMsSUFBSSxPQUFPLENBQUMsT0FBUSxDQUFDLENBQUMsQ0FBQztnQkFDdEMsRUFBRSxDQUFDLENBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBRSxTQUFTLENBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUUsU0FBUyxDQUFFLENBQUE7Z0JBQzdCLENBQUM7WUFDTCxDQUFDO1lBQ0QsUUFBUSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFFLEdBQUcsQ0FBRSxDQUFBO1FBQzVDLENBQUM7UUFDRCxJQUFJLENBQUMsQ0FBQztZQUNGLFFBQVEsQ0FBRSxRQUFRLENBQUUsR0FBRyxPQUFPLENBQUUsUUFBUSxDQUFFLENBQUE7UUFDOUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFBO0FBQ25CLENBQUMsQ0FBQTtBQUVELE1BQU0sZUFBZSxHQUFHLFVBQVcsUUFBUTtJQUN2QyxFQUFFLENBQUMsQ0FBRSxPQUFPLFFBQVEsS0FBSyxRQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxDQUFFLFFBQVEsQ0FBRSxDQUFBO0lBQ3ZCLENBQUM7SUFDRCxJQUFJLENBQUMsQ0FBQztRQUNGLE1BQU0sQ0FBQyxRQUFRLENBQUE7SUFDbkIsQ0FBQztBQUNM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QUFNLGNBQWMsR0FBRyxVQUFXLEtBQUs7SUFDMUMsTUFBTSxDQUFDLEdBQUcsQ0FBRSxFQUFFLEVBQUU7UUFDWixLQUFLLENBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUUsS0FBSyxDQUFDLEtBQUssQ0FBRSxDQUFFO1FBQzNDLEtBQUssQ0FBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRSxDQUFFO0tBQ3hGLENBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbnZlcnRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCBwcm9wc0luICkge1xuICAgIGNvbnN0IHByb3BzT3V0OiBhbnkgPSB7fVxuXG4gICAgZm9yICggbGV0IHByb3BOYW1lIGluIHByb3BzSW4gKSB7XG4gICAgICAgIGlmICggcHJvcE5hbWUgPT09IFwiY2xhc3Nlc1wiICkge1xuICAgICAgICAgICAgbGV0IGNsYXNzZXMgPSBbXVxuICAgICAgICAgICAgZm9yICggbGV0IGNsYXNzTmFtZSBpbiBwcm9wc0luLmNsYXNzZXMgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBwcm9wc0luLmNsYXNzZXNbIGNsYXNzTmFtZSBdICkge1xuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goIGNsYXNzTmFtZSApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvcHNPdXQuY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKCBcIiBcIiApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcm9wc091dFsgcHJvcE5hbWUgXSA9IHByb3BzSW5bIHByb3BOYW1lIF1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9wc091dFxufVxuXG5jb25zdCBjb252ZXJ0Q2hpbGRyZW4gPSBmdW5jdGlvbiAoIGNoaWxkcmVuICkge1xuICAgIGlmICggdHlwZW9mIGNoaWxkcmVuID09PSBcInN0cmluZ1wiICkge1xuICAgICAgICByZXR1cm4gWyBjaGlsZHJlbiBdXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW5cbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudCB7XG4gICAgdGFnTmFtZTogc3RyaW5nLFxuICAgIHByb3BlcnRpZXM6IGFueSxcbiAgICBjaGlsZHJlbjogRWxlbWVudFtdXG59XG5cbmNvbnN0IGNyZWF0ZSA9IGZ1bmN0aW9uICggdGFnTmFtZSApIHtcbiAgICB0YWdOYW1lID0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpXG4gICAgcmV0dXJuIGZ1bmN0aW9uICggcHJvcGVydGllcyA9IHt9LCBjaGlsZHJlbiA9IFtdICk6IEVsZW1lbnQge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGFnTmFtZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGNvbnZlcnRQcm9wZXJ0aWVzKCBwcm9wZXJ0aWVzICksXG4gICAgICAgICAgICBjaGlsZHJlbjogY29udmVydENoaWxkcmVuKCBjaGlsZHJlbiApXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBoMSA9IGNyZWF0ZSggXCJoMVwiIClcbmV4cG9ydCBjb25zdCBoMiA9IGNyZWF0ZSggXCJoMlwiIClcbmV4cG9ydCBjb25zdCBoMyA9IGNyZWF0ZSggXCJoM1wiIClcblxuZXhwb3J0IGNvbnN0IGhyID0gY3JlYXRlKCBcImhyXCIgKVxuZXhwb3J0IGNvbnN0IGEgPSBjcmVhdGUoIFwiYVwiIClcblxuZXhwb3J0IGNvbnN0IHAgPSBjcmVhdGUoIFwicFwiIClcbmV4cG9ydCBjb25zdCBkaXYgPSBjcmVhdGUoIFwiZGl2XCIgKVxuZXhwb3J0IGNvbnN0IHNwYW4gPSBjcmVhdGUoIFwic3BhblwiIClcblxuZXhwb3J0IGNvbnN0IHVsID0gY3JlYXRlKCBcInVsXCIgKVxuZXhwb3J0IGNvbnN0IGxpID0gY3JlYXRlKCBcImxpXCIgKVxuXG5leHBvcnQgY29uc3QgZm9ybSA9IGNyZWF0ZSggXCJmb3JtXCIgKVxuZXhwb3J0IGNvbnN0IGlucHV0ID0gY3JlYXRlKCBcImlucHV0XCIgKVxuZXhwb3J0IGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZSggXCJidXR0b25cIiApXG5leHBvcnQgY29uc3Qgc2VsZWN0ID0gY3JlYXRlKCBcInNlbGVjdFwiIClcbmV4cG9ydCBjb25zdCBsYWJlbCA9IGNyZWF0ZSggXCJsYWJlbFwiIClcbmV4cG9ydCBjb25zdCBmaWVsZHNldCA9IGNyZWF0ZSggXCJmaWVsZHNldFwiIClcblxuZXhwb3J0IGNvbnN0IGJvZHkgPSBjcmVhdGUoIFwiYm9keVwiIClcbmV4cG9ydCBjb25zdCBzZWN0aW9uID0gY3JlYXRlKCBcInNlY3Rpb25cIiApXG5leHBvcnQgY29uc3QgaGVhZGVyID0gY3JlYXRlKCBcImhlYWRlclwiIClcbmV4cG9ydCBjb25zdCBmb290ZXIgPSBjcmVhdGUoIFwiZm9vdGVyXCIgKVxuZXhwb3J0IGNvbnN0IG1haW4gPSBjcmVhdGUoIFwibWFpblwiIClcbmV4cG9ydCBjb25zdCBjYW52YXMgPSBjcmVhdGUoIFwiY2FudmFzXCIgKVxuXG5leHBvcnQgY29uc3QgdGV4dEJveCA9ICggbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nICkgPT5cbiAgICBpbnB1dCggeyB0eXBlOiBcInRleHRcIiwgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0gKVxuXG5leHBvcnQgY29uc3QgbGluayA9ICggaHJlZjogc3RyaW5nLCB0ZXh0OiBzdHJpbmcgKSA9PlxuICAgIGEoIHsgaHJlZiB9LCBbIHRleHQgXSApXG5cbmV4cG9ydCBjb25zdCBidWlsZEZvcm1GaWVsZCA9IGZ1bmN0aW9uICggZmllbGQgKSB7XG4gICAgcmV0dXJuIGRpdigge30sIFtcbiAgICAgICAgbGFiZWwoIHsgZm9yOiBmaWVsZC5pZCB9LCBbIGZpZWxkLmxhYmVsIF0gKSxcbiAgICAgICAgaW5wdXQoIHsgdHlwZTogZmllbGQudHlwZSwgaWQ6IGZpZWxkLmlkLCBuYW1lOiBmaWVsZC5pZCwgdmFsdWU6IGZpZWxkLnZhbHVlIHx8IFwiXCIgfSApXG4gICAgXSApXG59XG5cbiJdfQ==