import * as Utils from "./Utils";
import * as MessageRouter from "./MessageRouter";
describe("message routing", function () {
    const actions = {
        Action1: "action1",
        Action2: "action2",
        Action3: "action3",
        Action4: "action4"
    };
    const sub_actions = {
        Action1: "action1",
        Action2: "action2"
    };
    const sub_routes = MessageRouter.create({
        [sub_actions.Action1]: (message, state) => ["sub_action1"],
        [sub_actions.Action2]: (message, state) => ["sub_action2" + state]
    });
    const routes = MessageRouter.create({
        [actions.Action1]: (message, state) => [state + message.data],
        [actions.Action2]: (message, state) => [(state + message.data).toUpperCase()],
        [actions.Action3]: (message, state) => sub_routes(message, state),
        [actions.Action4]: (message, state) => [message.event]
    });
    test("unknown routes just returns the state", function () {
        expect(routes({ name: "unknown", data: "bar" }, "foo")).toEqual(["foo", undefined]);
    });
    test("handle static routes", function () {
        expect(routes({ name: ":action1", data: "bar" }, "foo")).toEqual(["foobar"]);
        expect(routes({ name: ":action2", data: "bar" }, "foo")).toEqual(["FOOBAR"]);
    });
    test("handle child routes", function () {
        expect(routes({ name: ":action3:action1", data: "" }, "")).toEqual(["sub_action1"]);
    });
    test("send state to child routes", function () {
        expect(routes({ name: ":action3:action2", data: "" }, "foo")).toEqual(["sub_action2foo"]);
    });
    test("pass an event object", function () {
        expect(routes({ name: ":action4", data: "", event: "event-object" }, "")).toEqual(["event-object"]);
    });
});
describe("utils", function () {
    it('maps an object to an array of things', function () {
        const result = Utils.mapObjectToArray({ "some-name": () => "some function" }, function (key, value) {
            return { name: key, fn: value };
        });
        expect(result[0].fn()).toEqual("some function");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZVJvdXRpbmcudGVzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvTWVzc2FnZVJvdXRpbmcudGVzdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxTQUFTLENBQUE7QUFDaEMsT0FBTyxLQUFLLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQTtBQUVoRCxRQUFRLENBQUUsaUJBQWlCLEVBQUU7SUFFekIsTUFBTSxPQUFPLEdBQUc7UUFDWixPQUFPLEVBQUUsU0FBUztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixPQUFPLEVBQUUsU0FBUztRQUNsQixPQUFPLEVBQUUsU0FBUztLQUNyQixDQUFBO0lBRUQsTUFBTSxXQUFXLEdBQUc7UUFDaEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsT0FBTyxFQUFFLFNBQVM7S0FDckIsQ0FBQTtJQUVELE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUU7UUFDckMsQ0FBRSxXQUFXLENBQUMsT0FBTyxDQUFFLEVBQUUsQ0FBRSxPQUFPLEVBQUUsS0FBSyxFQUFHLEVBQUUsQ0FBQyxDQUFFLGFBQWEsQ0FBRTtRQUNoRSxDQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLENBQUUsYUFBYSxHQUFHLEtBQUssQ0FBRTtLQUMzRSxDQUFFLENBQUE7SUFFSCxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFFO1FBQ2pDLENBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBRSxFQUFFLENBQUUsT0FBTyxFQUFFLEtBQUssRUFBRyxFQUFFLENBQUMsQ0FBRSxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBRTtRQUNuRSxDQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLENBQUUsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFFO1FBQ25GLENBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBRSxFQUFFLENBQUUsT0FBTyxFQUFFLEtBQUssRUFBRyxFQUFFLENBQUMsVUFBVSxDQUFFLE9BQU8sRUFBRSxLQUFLLENBQUU7UUFDdkUsQ0FBRSxPQUFPLENBQUMsT0FBTyxDQUFFLEVBQUUsQ0FBRSxPQUFPLEVBQUUsS0FBSyxFQUFHLEVBQUUsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUU7S0FDL0QsQ0FBRSxDQUFBO0lBRUgsSUFBSSxDQUFFLHVDQUF1QyxFQUFFO1FBQzNDLE1BQU0sQ0FBRSxNQUFNLENBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxDQUFFLEtBQUssRUFBRSxTQUFTLENBQUUsQ0FBRSxDQUFBO0lBQy9GLENBQUMsQ0FBRSxDQUFBO0lBRUgsSUFBSSxDQUFFLHNCQUFzQixFQUFFO1FBQzFCLE1BQU0sQ0FBRSxNQUFNLENBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxDQUFFLFFBQVEsQ0FBRSxDQUFFLENBQUE7UUFDcEYsTUFBTSxDQUFFLE1BQU0sQ0FBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssQ0FBRSxDQUFFLENBQUMsT0FBTyxDQUFFLENBQUUsUUFBUSxDQUFFLENBQUUsQ0FBQTtJQUN4RixDQUFDLENBQUUsQ0FBQTtJQUVILElBQUksQ0FBRSxxQkFBcUIsRUFBRTtRQUN6QixNQUFNLENBQUUsTUFBTSxDQUFFLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUUsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxDQUFFLGFBQWEsQ0FBRSxDQUFFLENBQUE7SUFDL0YsQ0FBQyxDQUFFLENBQUE7SUFFSCxJQUFJLENBQUUsNEJBQTRCLEVBQUU7UUFDaEMsTUFBTSxDQUFFLE1BQU0sQ0FBRSxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBRSxnQkFBZ0IsQ0FBRSxDQUFFLENBQUE7SUFDckcsQ0FBQyxDQUFFLENBQUE7SUFFSCxJQUFJLENBQUUsc0JBQXNCLEVBQUU7UUFDMUIsTUFBTSxDQUFFLE1BQU0sQ0FBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFFLENBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBRSxjQUFjLENBQUUsQ0FBRSxDQUFBO0lBQy9HLENBQUMsQ0FBRSxDQUFBO0FBRVAsQ0FBQyxDQUFFLENBQUE7QUFFSCxRQUFRLENBQUUsT0FBTyxFQUFFO0lBRWYsRUFBRSxDQUFFLHNDQUFzQyxFQUFFO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBRSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxVQUFXLEdBQUcsRUFBRSxLQUFLO1lBQ2hHLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFBO1FBQ25DLENBQUMsQ0FBRSxDQUFBO1FBRUgsTUFBTSxDQUFFLE1BQU0sQ0FBRSxDQUFDLENBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxlQUFlLENBQUUsQ0FBQTtJQUN6RCxDQUFDLENBQUUsQ0FBQztBQUNSLENBQUMsQ0FBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIlxuaW1wb3J0ICogYXMgTWVzc2FnZVJvdXRlciBmcm9tIFwiLi9NZXNzYWdlUm91dGVyXCJcblxuZGVzY3JpYmUoIFwibWVzc2FnZSByb3V0aW5nXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgIGNvbnN0IGFjdGlvbnMgPSB7XG4gICAgICAgIEFjdGlvbjE6IFwiYWN0aW9uMVwiLFxuICAgICAgICBBY3Rpb24yOiBcImFjdGlvbjJcIixcbiAgICAgICAgQWN0aW9uMzogXCJhY3Rpb24zXCIsXG4gICAgICAgIEFjdGlvbjQ6IFwiYWN0aW9uNFwiXG4gICAgfVxuXG4gICAgY29uc3Qgc3ViX2FjdGlvbnMgPSB7XG4gICAgICAgIEFjdGlvbjE6IFwiYWN0aW9uMVwiLFxuICAgICAgICBBY3Rpb24yOiBcImFjdGlvbjJcIlxuICAgIH1cblxuICAgIGNvbnN0IHN1Yl9yb3V0ZXMgPSBNZXNzYWdlUm91dGVyLmNyZWF0ZSgge1xuICAgICAgICBbIHN1Yl9hY3Rpb25zLkFjdGlvbjEgXTogKCBtZXNzYWdlLCBzdGF0ZSApID0+IFsgXCJzdWJfYWN0aW9uMVwiIF0sXG4gICAgICAgIFsgc3ViX2FjdGlvbnMuQWN0aW9uMiBdOiAoIG1lc3NhZ2UsIHN0YXRlICkgPT4gWyBcInN1Yl9hY3Rpb24yXCIgKyBzdGF0ZSBdXG4gICAgfSApXG5cbiAgICBjb25zdCByb3V0ZXMgPSBNZXNzYWdlUm91dGVyLmNyZWF0ZSgge1xuICAgICAgICBbIGFjdGlvbnMuQWN0aW9uMSBdOiAoIG1lc3NhZ2UsIHN0YXRlICkgPT4gWyBzdGF0ZSArIG1lc3NhZ2UuZGF0YSBdLFxuICAgICAgICBbIGFjdGlvbnMuQWN0aW9uMiBdOiAoIG1lc3NhZ2UsIHN0YXRlICkgPT4gWyAoc3RhdGUgKyBtZXNzYWdlLmRhdGEpLnRvVXBwZXJDYXNlKCkgXSxcbiAgICAgICAgWyBhY3Rpb25zLkFjdGlvbjMgXTogKCBtZXNzYWdlLCBzdGF0ZSApID0+IHN1Yl9yb3V0ZXMoIG1lc3NhZ2UsIHN0YXRlICksXG4gICAgICAgIFsgYWN0aW9ucy5BY3Rpb240IF06ICggbWVzc2FnZSwgc3RhdGUgKSA9PiBbIG1lc3NhZ2UuZXZlbnQgXVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJ1bmtub3duIHJvdXRlcyBqdXN0IHJldHVybnMgdGhlIHN0YXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KCByb3V0ZXMoIHsgbmFtZTogXCJ1bmtub3duXCIsIGRhdGE6IFwiYmFyXCIgfSwgXCJmb29cIiApICkudG9FcXVhbCggWyBcImZvb1wiLCB1bmRlZmluZWQgXSApXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcImhhbmRsZSBzdGF0aWMgcm91dGVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KCByb3V0ZXMoIHsgbmFtZTogXCI6YWN0aW9uMVwiLCBkYXRhOiBcImJhclwiIH0sIFwiZm9vXCIgKSApLnRvRXF1YWwoIFsgXCJmb29iYXJcIiBdIClcbiAgICAgICAgZXhwZWN0KCByb3V0ZXMoIHsgbmFtZTogXCI6YWN0aW9uMlwiLCBkYXRhOiBcImJhclwiIH0sIFwiZm9vXCIgKSApLnRvRXF1YWwoIFsgXCJGT09CQVJcIiBdIClcbiAgICB9IClcblxuICAgIHRlc3QoIFwiaGFuZGxlIGNoaWxkIHJvdXRlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV4cGVjdCggcm91dGVzKCB7IG5hbWU6IFwiOmFjdGlvbjM6YWN0aW9uMVwiLCBkYXRhOiBcIlwiIH0sIFwiXCIgKSApLnRvRXF1YWwoIFsgXCJzdWJfYWN0aW9uMVwiIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJzZW5kIHN0YXRlIHRvIGNoaWxkIHJvdXRlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV4cGVjdCggcm91dGVzKCB7IG5hbWU6IFwiOmFjdGlvbjM6YWN0aW9uMlwiLCBkYXRhOiBcIlwiIH0sIFwiZm9vXCIgKSApLnRvRXF1YWwoIFsgXCJzdWJfYWN0aW9uMmZvb1wiIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJwYXNzIGFuIGV2ZW50IG9iamVjdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV4cGVjdCggcm91dGVzKCB7IG5hbWU6IFwiOmFjdGlvbjRcIiwgZGF0YTogXCJcIiwgZXZlbnQ6IFwiZXZlbnQtb2JqZWN0XCIgfSwgXCJcIiApICkudG9FcXVhbCggWyBcImV2ZW50LW9iamVjdFwiIF0gKVxuICAgIH0gKVxuXG59IClcblxuZGVzY3JpYmUoIFwidXRpbHNcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgaXQoICdtYXBzIGFuIG9iamVjdCB0byBhbiBhcnJheSBvZiB0aGluZ3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFV0aWxzLm1hcE9iamVjdFRvQXJyYXkoIHsgXCJzb21lLW5hbWVcIjogKCkgPT4gXCJzb21lIGZ1bmN0aW9uXCIgfSwgZnVuY3Rpb24gKCBrZXksIHZhbHVlICkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbmFtZToga2V5LCBmbjogdmFsdWUgfVxuICAgICAgICB9IClcblxuICAgICAgICBleHBlY3QoIHJlc3VsdFsgMCBdLmZuKCkgKS50b0VxdWFsKCBcInNvbWUgZnVuY3Rpb25cIiApXG4gICAgfSApO1xufSApXG4iXX0=