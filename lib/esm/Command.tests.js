import * as Command from "./Command";
import { createFakeFetch, createWindow } from "./TestUtils";
import { WindowEnvironment } from "./Environment";
describe("how commands interact with browser environment", function () {
    let fake_environment;
    let window;
    const expectAction = function (name, data, done) {
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({ name, data });
            done();
        });
    };
    beforeEach(function () {
        window = createWindow();
        window.fetch = createFakeFetch("/foo", { status: 200, data: {} });
        fake_environment = new WindowEnvironment(window);
    });
    xtest("execute command fires action", function (done) {
        Command.execute("/foo", {}, "action-name").executeIn(fake_environment);
        expectAction("action-name", {}, done);
    });
    xtest("query command fires action with fetched data", function (done) {
        Command.query("/foo", "action-name").executeIn(fake_environment);
        expectAction("action-name", {}, done);
    });
    xtest("write data to local storage", function (done) {
        fake_environment.writeStorage = jest.fn();
        const data_to_write = { name: "foo" };
        Command.write("location", data_to_write, "action-name")
            .executeIn(fake_environment);
        expect(fake_environment.writeStorage)
            .toHaveBeenCalledWith("location", JSON.stringify(data_to_write));
        expectAction("action-name", {}, done);
    });
    xtest("load data from local storage", function (done) {
        fake_environment.readStorage = () => JSON.stringify({ name: "foo" });
        Command.read("some-data", "action-done").executeIn(fake_environment);
        expectAction("action-done", { name: "foo" }, done);
    });
    xtest("redirect", function () {
        fake_environment.changeLocation = jest.fn();
        Command.redirect("/some/path").executeIn(fake_environment);
        expect(fake_environment.changeLocation).toHaveBeenCalledWith("/some/path");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZC50ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21tYW5kLnRlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxPQUFPLE1BQU0sV0FBVyxDQUFBO0FBQ3BDLE9BQU8sRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBZSxNQUFNLGVBQWUsQ0FBQTtBQUU5RCxRQUFRLENBQUUsZ0RBQWdELEVBQUU7SUFFeEQsSUFBSSxnQkFBNkIsQ0FBQTtJQUNqQyxJQUFJLE1BQU0sQ0FBQTtJQUVWLE1BQU0sWUFBWSxHQUFHLFVBQVcsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1FBQzVDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFRLEVBQUUsVUFBVyxDQUFDO1lBQzNDLE1BQU0sQ0FBRSxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsT0FBTyxDQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFFLENBQUE7WUFDNUMsSUFBSSxFQUFFLENBQUE7UUFDVixDQUFDLENBQUUsQ0FBQTtJQUNQLENBQUMsQ0FBQTtJQUVELFVBQVUsQ0FBRTtRQUNSLE1BQU0sR0FBRyxZQUFZLEVBQUUsQ0FBQTtRQUN2QixNQUFNLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBRSxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBRSxDQUFBO1FBQ25FLGdCQUFnQixHQUFHLElBQUksaUJBQWlCLENBQUUsTUFBTSxDQUFFLENBQUE7SUFDdEQsQ0FBQyxDQUFFLENBQUE7SUFFSCxLQUFLLENBQUUsOEJBQThCLEVBQUUsVUFBVyxJQUFJO1FBQ2xELE9BQU8sQ0FBQyxPQUFPLENBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxhQUFhLENBQUUsQ0FBQyxTQUFTLENBQUUsZ0JBQWdCLENBQUUsQ0FBQTtRQUMxRSxZQUFZLENBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUUsQ0FBQTtJQUMzQyxDQUFDLENBQUUsQ0FBQTtJQUVILEtBQUssQ0FBRSw4Q0FBOEMsRUFBRSxVQUFXLElBQUk7UUFDbEUsT0FBTyxDQUFDLEtBQUssQ0FBRSxNQUFNLEVBQUUsYUFBYSxDQUFFLENBQUMsU0FBUyxDQUFFLGdCQUFnQixDQUFFLENBQUE7UUFDcEUsWUFBWSxDQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFFLENBQUE7SUFDM0MsQ0FBQyxDQUFFLENBQUE7SUFFSCxLQUFLLENBQUUsNkJBQTZCLEVBQUUsVUFBVyxJQUFJO1FBQ2pELGdCQUFnQixDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUE7UUFFekMsTUFBTSxhQUFhLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUE7UUFFckMsT0FBTyxDQUFDLEtBQUssQ0FBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBRTthQUNwRCxTQUFTLENBQUUsZ0JBQWdCLENBQUUsQ0FBQTtRQUVsQyxNQUFNLENBQUUsZ0JBQWdCLENBQUMsWUFBWSxDQUFFO2FBQ2xDLG9CQUFvQixDQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFFLGFBQWEsQ0FBRSxDQUFFLENBQUE7UUFFeEUsWUFBWSxDQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFFLENBQUE7SUFDM0MsQ0FBQyxDQUFFLENBQUE7SUFFSCxLQUFLLENBQUUsOEJBQThCLEVBQUUsVUFBVyxJQUFJO1FBQ2xELGdCQUFnQixDQUFDLFdBQVcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFFLENBQUE7UUFFdEUsT0FBTyxDQUFDLElBQUksQ0FBRSxXQUFXLEVBQUUsYUFBYSxDQUFFLENBQUMsU0FBUyxDQUFFLGdCQUFnQixDQUFFLENBQUE7UUFFeEUsWUFBWSxDQUFFLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLENBQUUsQ0FBQTtJQUN4RCxDQUFDLENBQUUsQ0FBQTtJQUVILEtBQUssQ0FBRSxVQUFVLEVBQUU7UUFDZixnQkFBZ0IsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO1FBQzNDLE9BQU8sQ0FBQyxRQUFRLENBQUUsWUFBWSxDQUFFLENBQUMsU0FBUyxDQUFFLGdCQUFnQixDQUFFLENBQUE7UUFDOUQsTUFBTSxDQUFFLGdCQUFnQixDQUFDLGNBQWMsQ0FBRSxDQUFDLG9CQUFvQixDQUFFLFlBQVksQ0FBRSxDQUFBO0lBQ2xGLENBQUMsQ0FBRSxDQUFBO0FBQ1AsQ0FBQyxDQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBDb21tYW5kIGZyb20gXCIuL0NvbW1hbmRcIlxuaW1wb3J0IHsgY3JlYXRlRmFrZUZldGNoLCBjcmVhdGVXaW5kb3cgfSBmcm9tIFwiLi9UZXN0VXRpbHNcIlxuaW1wb3J0IHsgV2luZG93RW52aXJvbm1lbnQsIEVudmlyb25tZW50IH0gZnJvbSBcIi4vRW52aXJvbm1lbnRcIlxuXG5kZXNjcmliZSggXCJob3cgY29tbWFuZHMgaW50ZXJhY3Qgd2l0aCBicm93c2VyIGVudmlyb25tZW50XCIsIGZ1bmN0aW9uICgpIHtcblxuICAgIGxldCBmYWtlX2Vudmlyb25tZW50OiBFbnZpcm9ubWVudFxuICAgIGxldCB3aW5kb3dcblxuICAgIGNvbnN0IGV4cGVjdEFjdGlvbiA9IGZ1bmN0aW9uICggbmFtZSwgZGF0YSwgZG9uZSApIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwiYWN0aW9uXCIsIGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgIGV4cGVjdCggZS5kZXRhaWwgKS50b0VxdWFsKCB7IG5hbWUsIGRhdGEgfSApXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSApXG4gICAgfVxuXG4gICAgYmVmb3JlRWFjaCggZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cgPSBjcmVhdGVXaW5kb3coKVxuICAgICAgICB3aW5kb3cuZmV0Y2ggPSBjcmVhdGVGYWtlRmV0Y2goIFwiL2Zvb1wiLCB7IHN0YXR1czogMjAwLCBkYXRhOiB7fSB9IClcbiAgICAgICAgZmFrZV9lbnZpcm9ubWVudCA9IG5ldyBXaW5kb3dFbnZpcm9ubWVudCggd2luZG93IClcbiAgICB9IClcblxuICAgIHh0ZXN0KCBcImV4ZWN1dGUgY29tbWFuZCBmaXJlcyBhY3Rpb25cIiwgZnVuY3Rpb24gKCBkb25lICkge1xuICAgICAgICBDb21tYW5kLmV4ZWN1dGUoIFwiL2Zvb1wiLCB7fSwgXCJhY3Rpb24tbmFtZVwiICkuZXhlY3V0ZUluKCBmYWtlX2Vudmlyb25tZW50IClcbiAgICAgICAgZXhwZWN0QWN0aW9uKCBcImFjdGlvbi1uYW1lXCIsIHt9LCBkb25lIClcbiAgICB9IClcblxuICAgIHh0ZXN0KCBcInF1ZXJ5IGNvbW1hbmQgZmlyZXMgYWN0aW9uIHdpdGggZmV0Y2hlZCBkYXRhXCIsIGZ1bmN0aW9uICggZG9uZSApIHtcbiAgICAgICAgQ29tbWFuZC5xdWVyeSggXCIvZm9vXCIsIFwiYWN0aW9uLW5hbWVcIiApLmV4ZWN1dGVJbiggZmFrZV9lbnZpcm9ubWVudCApXG4gICAgICAgIGV4cGVjdEFjdGlvbiggXCJhY3Rpb24tbmFtZVwiLCB7fSwgZG9uZSApXG4gICAgfSApXG5cbiAgICB4dGVzdCggXCJ3cml0ZSBkYXRhIHRvIGxvY2FsIHN0b3JhZ2VcIiwgZnVuY3Rpb24gKCBkb25lICkge1xuICAgICAgICBmYWtlX2Vudmlyb25tZW50LndyaXRlU3RvcmFnZSA9IGplc3QuZm4oKVxuXG4gICAgICAgIGNvbnN0IGRhdGFfdG9fd3JpdGUgPSB7IG5hbWU6IFwiZm9vXCIgfVxuXG4gICAgICAgIENvbW1hbmQud3JpdGUoIFwibG9jYXRpb25cIiwgZGF0YV90b193cml0ZSwgXCJhY3Rpb24tbmFtZVwiIClcbiAgICAgICAgICAgIC5leGVjdXRlSW4oIGZha2VfZW52aXJvbm1lbnQgKVxuXG4gICAgICAgIGV4cGVjdCggZmFrZV9lbnZpcm9ubWVudC53cml0ZVN0b3JhZ2UgKVxuICAgICAgICAgICAgLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCBcImxvY2F0aW9uXCIsIEpTT04uc3RyaW5naWZ5KCBkYXRhX3RvX3dyaXRlICkgKVxuXG4gICAgICAgIGV4cGVjdEFjdGlvbiggXCJhY3Rpb24tbmFtZVwiLCB7fSwgZG9uZSApXG4gICAgfSApXG5cbiAgICB4dGVzdCggXCJsb2FkIGRhdGEgZnJvbSBsb2NhbCBzdG9yYWdlXCIsIGZ1bmN0aW9uICggZG9uZSApIHtcbiAgICAgICAgZmFrZV9lbnZpcm9ubWVudC5yZWFkU3RvcmFnZSA9ICgpID0+IEpTT04uc3RyaW5naWZ5KCB7IG5hbWU6IFwiZm9vXCIgfSApXG5cbiAgICAgICAgQ29tbWFuZC5yZWFkKCBcInNvbWUtZGF0YVwiLCBcImFjdGlvbi1kb25lXCIgKS5leGVjdXRlSW4oIGZha2VfZW52aXJvbm1lbnQgKVxuXG4gICAgICAgIGV4cGVjdEFjdGlvbiggXCJhY3Rpb24tZG9uZVwiLCB7IG5hbWU6IFwiZm9vXCIgfSwgZG9uZSApXG4gICAgfSApXG5cbiAgICB4dGVzdCggXCJyZWRpcmVjdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZha2VfZW52aXJvbm1lbnQuY2hhbmdlTG9jYXRpb24gPSBqZXN0LmZuKClcbiAgICAgICAgQ29tbWFuZC5yZWRpcmVjdCggXCIvc29tZS9wYXRoXCIgKS5leGVjdXRlSW4oIGZha2VfZW52aXJvbm1lbnQgKVxuICAgICAgICBleHBlY3QoIGZha2VfZW52aXJvbm1lbnQuY2hhbmdlTG9jYXRpb24gKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCggXCIvc29tZS9wYXRoXCIgKVxuICAgIH0gKVxufSApIl19