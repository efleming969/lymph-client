import * as Command from "./Command";
import { createFakeFetch, createWindow } from "./TestUtils";
describe("Command", function () {
    test("execute remote command", function (done) {
        const command = Command.execute("/api/post1", { name: "foobar" }, "command-done");
        const window = createWindow();
        window.fetch = createFakeFetch("/api/post1", { status: 200, data: {} });
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({ name: "command-done", data: {} });
            done();
        });
        Command.process(window, [command]);
    });
    test("execute remote query", function (done) {
        const command = Command.query("/api/get1", "query-done");
        const window = createWindow();
        window.fetch = createFakeFetch("/api/get1", {
            status: 200,
            data: { name: "response-data" }
        });
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({
                name: "query-done",
                data: { name: "response-data" }
            });
            done();
        });
        Command.process(window, [command]);
    });
    test("save data to local storage", function (done) {
        const command = Command.save("some-data", { name: "some-data" }, "save-done");
        const window = createWindow();
        window.localStorage = { setItem: jest.fn() };
        window.addEventListener("action", function (e) {
            expect(window.localStorage.setItem)
                .toHaveBeenCalledWith("some-data", JSON.stringify({ name: "some-data" }));
            done();
        });
        Command.process(window, [command]);
    });
    test("load data from local storage", function (done) {
        const command = Command.load("some-data", "load-done");
        const window = createWindow();
        window.localStorage = { getItem: () => JSON.stringify({ name: "some-data" }) };
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({
                name: "load-done",
                data: { name: "some-data" }
            });
            done();
        });
        Command.process(window, [command]);
    });
    test("redirect", function () {
        const window = { location: { assign: jest.fn() } };
        Command.process(window, [Command.redirect("/some/path")]);
        expect(window.location.assign).toHaveBeenCalledWith("/some/path");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZC50ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21tYW5kLnRlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxPQUFPLE1BQU0sV0FBVyxDQUFBO0FBQ3BDLE9BQU8sRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBRTNELFFBQVEsQ0FBRSxTQUFTLEVBQUU7SUFFakIsSUFBSSxDQUFFLHdCQUF3QixFQUFFLFVBQVcsSUFBSTtRQUMzQyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFFLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxjQUFjLENBQUUsQ0FBQTtRQUNuRixNQUFNLE1BQU0sR0FBRyxZQUFZLEVBQUUsQ0FBQTtRQUU3QixNQUFNLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBRSxZQUFZLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBRSxDQUFBO1FBRXpFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFRLEVBQUUsVUFBVyxDQUFDO1lBQzNDLE1BQU0sQ0FBRSxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsT0FBTyxDQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUUsQ0FBQTtZQUNoRSxJQUFJLEVBQUUsQ0FBQTtRQUNWLENBQUMsQ0FBRSxDQUFBO1FBRUgsT0FBTyxDQUFDLE9BQU8sQ0FBRSxNQUFNLEVBQUUsQ0FBRSxPQUFPLENBQUUsQ0FBRSxDQUFBO0lBQzFDLENBQUMsQ0FBRSxDQUFBO0lBRUgsSUFBSSxDQUFFLHNCQUFzQixFQUFFLFVBQVcsSUFBSTtRQUN6QyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFFLFdBQVcsRUFBRSxZQUFZLENBQUUsQ0FBQTtRQUMxRCxNQUFNLE1BQU0sR0FB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QVksQ0FBRSxDQUFBO0lBQ3pFLENBQUMsQ0FBRSxDQUFBO0FBQ1AsQ0FBQyxDQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBDb21tYW5kIGZyb20gXCIuL0NvbW1hbmRcIlxuaW1wb3J0IHsgY3JlYXRlRmFrZUZldGNoLCBjcmVhdGVXaW5kb3cgfSBmcm9tIFwiLi9UZXN0VXRpbHNcIlxuXG5kZXNjcmliZSggXCJDb21tYW5kXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgIHRlc3QoIFwiZXhlY3V0ZSByZW1vdGUgY29tbWFuZFwiLCBmdW5jdGlvbiAoIGRvbmUgKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBDb21tYW5kLmV4ZWN1dGUoIFwiL2FwaS9wb3N0MVwiLCB7IG5hbWU6IFwiZm9vYmFyXCIgfSwgXCJjb21tYW5kLWRvbmVcIiApXG4gICAgICAgIGNvbnN0IHdpbmRvdyA9IGNyZWF0ZVdpbmRvdygpXG5cbiAgICAgICAgd2luZG93LmZldGNoID0gY3JlYXRlRmFrZUZldGNoKCBcIi9hcGkvcG9zdDFcIiwgeyBzdGF0dXM6IDIwMCwgZGF0YToge30gfSApXG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwiYWN0aW9uXCIsIGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgIGV4cGVjdCggZS5kZXRhaWwgKS50b0VxdWFsKCB7IG5hbWU6IFwiY29tbWFuZC1kb25lXCIsIGRhdGE6IHt9IH0gKVxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBbIGNvbW1hbmQgXSApXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcImV4ZWN1dGUgcmVtb3RlIHF1ZXJ5XCIsIGZ1bmN0aW9uICggZG9uZSApIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IENvbW1hbmQucXVlcnkoIFwiL2FwaS9nZXQxXCIsIFwicXVlcnktZG9uZVwiIClcbiAgICAgICAgY29uc3Qgd2luZG93ID0gY3JlYXRlV2luZG93KClcblxuICAgICAgICB3aW5kb3cuZmV0Y2ggPSBjcmVhdGVGYWtlRmV0Y2goIFwiL2FwaS9nZXQxXCIsIHtcbiAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgZGF0YTogeyBuYW1lOiBcInJlc3BvbnNlLWRhdGFcIiB9XG4gICAgICAgIH0gKVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImFjdGlvblwiLCBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICBleHBlY3QoIGUuZGV0YWlsICkudG9FcXVhbCgge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwicXVlcnktZG9uZVwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IHsgbmFtZTogXCJyZXNwb25zZS1kYXRhXCIgfVxuICAgICAgICAgICAgfSApXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSApXG5cbiAgICAgICAgQ29tbWFuZC5wcm9jZXNzKCB3aW5kb3csIFsgY29tbWFuZCBdIClcbiAgICB9IClcblxuICAgIHRlc3QoIFwic2F2ZSBkYXRhIHRvIGxvY2FsIHN0b3JhZ2VcIiwgZnVuY3Rpb24gKCBkb25lICkge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gQ29tbWFuZC5zYXZlKCBcInNvbWUtZGF0YVwiLCB7IG5hbWU6IFwic29tZS1kYXRhXCIgfSwgXCJzYXZlLWRvbmVcIiApXG4gICAgICAgIGNvbnN0IHdpbmRvdyA9IGNyZWF0ZVdpbmRvdygpXG5cbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZSA9IHsgc2V0SXRlbTogamVzdC5mbigpIH1cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJhY3Rpb25cIiwgZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgZXhwZWN0KCB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0gKVxuICAgICAgICAgICAgICAgIC50b0hhdmVCZWVuQ2FsbGVkV2l0aCggXCJzb21lLWRhdGFcIiwgSlNPTi5zdHJpbmdpZnkoIHsgbmFtZTogXCJzb21lLWRhdGFcIiB9ICkgKVxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBbIGNvbW1hbmQgXSApXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcImxvYWQgZGF0YSBmcm9tIGxvY2FsIHN0b3JhZ2VcIiwgZnVuY3Rpb24gKCBkb25lICkge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gQ29tbWFuZC5sb2FkKCBcInNvbWUtZGF0YVwiLCBcImxvYWQtZG9uZVwiIClcbiAgICAgICAgY29uc3Qgd2luZG93ID0gY3JlYXRlV2luZG93KClcblxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlID0geyBnZXRJdGVtOiAoKSA9PiBKU09OLnN0cmluZ2lmeSggeyBuYW1lOiBcInNvbWUtZGF0YVwiIH0gKSB9XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwiYWN0aW9uXCIsIGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgIGV4cGVjdCggZS5kZXRhaWwgKS50b0VxdWFsKCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJsb2FkLWRvbmVcIixcbiAgICAgICAgICAgICAgICBkYXRhOiB7IG5hbWU6IFwic29tZS1kYXRhXCIgfVxuICAgICAgICAgICAgfSApXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSApXG5cbiAgICAgICAgQ29tbWFuZC5wcm9jZXNzKCB3aW5kb3csIFsgY29tbWFuZCBdIClcbiAgICB9IClcblxuICAgIHRlc3QoIFwicmVkaXJlY3RcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCB3aW5kb3cgPSB7IGxvY2F0aW9uOiB7IGFzc2lnbjogamVzdC5mbigpIH0gfVxuXG4gICAgICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBbIENvbW1hbmQucmVkaXJlY3QoIFwiL3NvbWUvcGF0aFwiICkgXSApXG5cbiAgICAgICAgZXhwZWN0KCB3aW5kb3cubG9jYXRpb24uYXNzaWduICkudG9IYXZlQmVlbkNhbGxlZFdpdGgoIFwiL3NvbWUvcGF0aFwiIClcbiAgICB9IClcbn0gKSJdfQ==