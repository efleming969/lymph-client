import * as JSDOM from "jsdom";
import * as DOM from "./DOM";
export const createTarget = function (html) {
    const template = `<!DOCTYPE html><head></head><body>${html}</body>`;
    const document = new JSDOM.JSDOM(template).window.document;
    return document.body.firstChild;
};
export const createWindow = function () {
    const template = `<!DOCTYPE html><head></head><body></body>`;
    return new JSDOM.JSDOM(template).window;
};
export const createTestContext = function () {
    const window = createWindow();
    return {
        onAction: function (callback) {
            window.document.addEventListener("action", function (e) {
                const { name, data, event } = e.detail;
                event.preventDefault();
                callback(name, data, event);
            });
        },
        dispatch: function (event_type, selector) {
            const event = event_type === "click" ?
                new window.MouseEvent("click", {
                    bubbles: true,
                    cancelable: true
                }) : new window.Event(event_type);
            window.document.querySelector(selector).dispatchEvent(event);
        },
        render: function (view) {
            DOM.updateChildren(window, window.document.body, view);
        },
        find: function (selector) {
            return window.document.querySelector(selector);
        }
    };
};
export const createFakeFetch = function (path, response) {
    return jest.fn(function (url, options) {
        return new Promise(function (res, rej) {
            const responseToForward = {
                status: response.status,
                json: () => Promise.resolve(response.data)
            };
            if (url === path) {
                res(responseToForward);
            }
            else {
                rej(responseToForward);
            }
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1Rlc3RVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUU5QixPQUFPLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQTtBQUU1QixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsVUFBVyxJQUFJO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLHFDQUFzQyxJQUFLLFNBQVMsQ0FBQTtJQUNyRSxNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUUsUUFBUSxDQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQTtJQUM1RCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7QUFDbkMsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQ3hCLE1BQU0sUUFBUSxHQUFHLDJDQUEyQyxDQUFBO0lBQzVELE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUUsUUFBUSxDQUFFLENBQUMsTUFBTSxDQUFBO0FBQzdDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQzdCLE1BQU0sTUFBTSxHQUFHLFlBQVksRUFBRSxDQUFBO0lBRTdCLE1BQU0sQ0FBQztRQUNILFFBQVEsRUFBRSxVQUFXLFFBQVE7WUFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFRLEVBQUUsVUFBVyxDQUFjO2dCQUNqRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFBO2dCQUN0QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUE7Z0JBQ3RCLFFBQVEsQ0FBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxDQUFBO1lBQ2pDLENBQUMsQ0FBRSxDQUFBO1FBQ1AsQ0FBQztRQUVELFFBQVEsRUFBRSxVQUFXLFVBQVUsRUFBRSxRQUFRO1lBQ3JDLE1BQU0sS0FBSyxHQUFHLFVBQVUsS0FBSyxPQUFPLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFFLE9BQU8sRUFBRTtvQkFDNUIsT0FBTyxFQUFFLElBQUk7b0JBQ2IsVUFBVSxFQUFFLElBQUk7aUJBQ25CLENBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFFLFVBQVUsQ0FBRSxDQUFBO1lBRXhDLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFFLFFBQVEsQ0FBRSxDQUFDLGFBQWEsQ0FBRSxLQUFLLENBQUUsQ0FBQTtRQUNwRSxDQUFDO1FBRUQsTUFBTSxFQUFFLFVBQVcsSUFBSTtZQUNuQixHQUFHLENBQUMsY0FBYyxDQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQTtRQUM1RCxDQUFDO1FBRUQsSUFBSSxFQUFFLFVBQVcsUUFBUTtZQUNyQixNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUUsUUFBUSxDQUFFLENBQUE7UUFDcEQsQ0FBQztLQUNKLENBQUE7QUFDTCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsVUFBVyxJQUFJLEVBQUUsUUFBUTtJQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBRSxVQUFXLEdBQUcsRUFBRSxPQUFPO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBRSxVQUFXLEdBQUcsRUFBRSxHQUFHO1lBQ25DLE1BQU0saUJBQWlCLEdBQUc7Z0JBQ3RCLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTTtnQkFDdkIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUUsUUFBUSxDQUFDLElBQUksQ0FBRTthQUMvQyxDQUFBO1lBRUQsRUFBRSxDQUFDLENBQUUsR0FBRyxLQUFLLElBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLEdBQUcsQ0FBRSxpQkFBaUIsQ0FBRSxDQUFBO1lBQzVCLENBQUM7WUFDRCxJQUFJLENBQUMsQ0FBQztnQkFDRixHQUFHLENBQUUsaUJBQWlCLENBQUUsQ0FBQTtZQUM1QixDQUFDO1FBQ0wsQ0FBQyxDQUFFLENBQUE7SUFDUCxDQUFDLENBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEpTRE9NIGZyb20gXCJqc2RvbVwiXG5cbmltcG9ydCAqIGFzIERPTSBmcm9tIFwiLi9ET01cIlxuXG5leHBvcnQgY29uc3QgY3JlYXRlVGFyZ2V0ID0gZnVuY3Rpb24gKCBodG1sICkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gYDwhRE9DVFlQRSBodG1sPjxoZWFkPjwvaGVhZD48Ym9keT4keyBodG1sIH08L2JvZHk+YFxuICAgIGNvbnN0IGRvY3VtZW50ID0gbmV3IEpTRE9NLkpTRE9NKCB0ZW1wbGF0ZSApLndpbmRvdy5kb2N1bWVudFxuICAgIHJldHVybiBkb2N1bWVudC5ib2R5LmZpcnN0Q2hpbGRcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVdpbmRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGA8IURPQ1RZUEUgaHRtbD48aGVhZD48L2hlYWQ+PGJvZHk+PC9ib2R5PmBcbiAgICByZXR1cm4gbmV3IEpTRE9NLkpTRE9NKCB0ZW1wbGF0ZSApLndpbmRvd1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlVGVzdENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgd2luZG93ID0gY3JlYXRlV2luZG93KClcblxuICAgIHJldHVybiB7XG4gICAgICAgIG9uQWN0aW9uOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiYWN0aW9uXCIsIGZ1bmN0aW9uICggZTogQ3VzdG9tRXZlbnQgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBkYXRhLCBldmVudCB9ID0gZS5kZXRhaWxcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soIG5hbWUsIGRhdGEsIGV2ZW50IClcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9LFxuXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiAoIGV2ZW50X3R5cGUsIHNlbGVjdG9yICkge1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBldmVudF90eXBlID09PSBcImNsaWNrXCIgP1xuICAgICAgICAgICAgICAgIG5ldyB3aW5kb3cuTW91c2VFdmVudCggXCJjbGlja1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9ICkgOiBuZXcgd2luZG93LkV2ZW50KCBldmVudF90eXBlIClcblxuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIHNlbGVjdG9yICkuZGlzcGF0Y2hFdmVudCggZXZlbnQgKVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCB2aWV3ICkge1xuICAgICAgICAgICAgRE9NLnVwZGF0ZUNoaWxkcmVuKCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudC5ib2R5LCB2aWV3IClcbiAgICAgICAgfSxcblxuICAgICAgICBmaW5kOiBmdW5jdGlvbiAoIHNlbGVjdG9yICkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVGYWtlRmV0Y2ggPSBmdW5jdGlvbiAoIHBhdGgsIHJlc3BvbnNlICkge1xuICAgIHJldHVybiBqZXN0LmZuKCBmdW5jdGlvbiAoIHVybCwgb3B0aW9ucyApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCBmdW5jdGlvbiAoIHJlcywgcmVqICkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VUb0ZvcndhcmQgPSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCByZXNwb25zZS5kYXRhIClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB1cmwgPT09IHBhdGggKSB7XG4gICAgICAgICAgICAgICAgcmVzKCByZXNwb25zZVRvRm9yd2FyZCApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWooIHJlc3BvbnNlVG9Gb3J3YXJkIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSApXG4gICAgfSApXG59XG5cbiJdfQ==