import * as JSDOM from "jsdom";
import * as DOM from "./DOM";
export const createTarget = function (html) {
    const template = `<!DOCTYPE html><head></head><body>${html}</body>`;
    const document = new JSDOM.JSDOM(template).window.document;
    return document.body.firstChild;
};
export const createWindow = function () {
    const template = `<!DOCTYPE html><head></head><body></body>`;
    return new JSDOM.JSDOM(template).window;
};
export const createTestContext = function () {
    const window = createWindow();
    return {
        onAction: function (callback) {
            window.document.addEventListener("action", function (e) {
                const { name, data, event } = e.detail;
                event.preventDefault();
                callback(name, data, event);
            });
        },
        dispatch: function (event_type, selector) {
            const event = event_type === "click" ?
                new window.MouseEvent("click", {
                    bubbles: true,
                    cancelable: true
                }) : new window.Event(event_type);
            window.document.querySelector(selector).dispatchEvent(event);
        },
        render: function (view) {
            DOM.updateChildren(window, window.document.body, view);
        },
        find: function (selector) {
            return window.document.querySelector(selector);
        }
    };
};
export const createFakeFetch = function (path, response) {
    return jest.fn(function (url, options) {
        return new Promise(function (res, rej) {
            const responseToForward = {
                status: response.status,
                json: () => Promise.resolve(response.data)
            };
            if (url === path) {
                res(responseToForward);
            }
            else {
                rej(responseToForward);
            }
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1Rlc3RVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUU5QixPQUFPLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQTtBQUk1QixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsVUFBVyxJQUFJO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLHFDQUFzQyxJQUFLLFNBQVMsQ0FBQTtJQUNyRSxNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUUsUUFBUSxDQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQTtJQUM1RCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7QUFDbkMsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQ3hCLE1BQU0sUUFBUSxHQUFHLDJDQUEyQyxDQUFBO0lBQzVELE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUUsUUFBUSxDQUFFLENBQUMsTUFBTSxDQUFBO0FBQzdDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHO0lBQzdCLE1BQU0sTUFBTSxHQUFHLFlBQVksRUFBRSxDQUFBO0lBRTdCLE1BQU0sQ0FBQztRQUNILFFBQVEsRUFBRSxVQUFXLFFBQVE7WUFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFRLEVBQUUsVUFBVyxDQUFjO2dCQUNqRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFBO2dCQUN0QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUE7Z0JBQ3RCLFFBQVEsQ0FBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxDQUFBO1lBQ2pDLENBQUMsQ0FBRSxDQUFBO1FBQ1AsQ0FBQztRQUVELFFBQVEsRUFBRSxVQUFXLFVBQVUsRUFBRSxRQUFRO1lBQ3JDLE1BQU0sS0FBSyxHQUFHLFVBQVUsS0FBSyxPQUFPLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFFLE9BQU8sRUFBRTtvQkFDNUIsT0FBTyxFQUFFLElBQUk7b0JBQ2IsVUFBVSxFQUFFLElBQUk7aUJBQ25CLENBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFFLFVBQVUsQ0FBRSxDQUFBO1lBRXhDLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFFLFFBQVEsQ0FBRSxDQUFDLGFBQWEsQ0FBRSxLQUFLLENBQUUsQ0FBQTtRQUNwRSxDQUFDO1FBRUQsTUFBTSxFQUFFLFVBQVcsSUFBSTtZQUNuQixHQUFHLENBQUMsY0FBYyxDQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQTtRQUM1RCxDQUFDO1FBRUQsSUFBSSxFQUFFLFVBQVcsUUFBUTtZQUNyQixNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUUsUUFBUSxDQUFFLENBQUE7UUFDcEQsQ0FBQztLQUNKLENBQUE7QUFDTCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsVUFBVyxJQUFJLEVBQUUsUUFBUTtJQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBRSxVQUFXLEdBQUcsRUFBRSxPQUFPO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBRSxVQUFXLEdBQUcsRUFBRSxHQUFHO1lBQ25DLE1BQU0saUJBQWlCLEdBQUc7Z0JBQ3RCLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTTtnQkFDdkIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUUsUUFBUSxDQUFDLElBQUksQ0FBRTthQUMvQyxDQUFBO1lBRUQsRUFBRSxDQUFDLENBQUUsR0FBRyxLQUFLLElBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLEdBQUcsQ0FBRSxpQkFBaUIsQ0FBRSxDQUFBO1lBQzVCLENBQUM7WUFDRCxJQUFJLENBQUMsQ0FBQztnQkFDRixHQUFHLENBQUUsaUJBQWlCLENBQUUsQ0FBQTtZQUM1QixDQUFDO1FBQ0wsQ0FBQyxDQUFFLENBQUE7SUFDUCxDQUFDLENBQUUsQ0FBQTtBQUNQLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEpTRE9NIGZyb20gXCJqc2RvbVwiXG5cbmltcG9ydCAqIGFzIERPTSBmcm9tIFwiLi9ET01cIlxuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tIFwiLi9FbnZpcm9ubWVudFwiXG5pbXBvcnQgSFRUUCBmcm9tIFwiLi9IVFRQXCJcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRhcmdldCA9IGZ1bmN0aW9uICggaHRtbCApIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGA8IURPQ1RZUEUgaHRtbD48aGVhZD48L2hlYWQ+PGJvZHk+JHsgaHRtbCB9PC9ib2R5PmBcbiAgICBjb25zdCBkb2N1bWVudCA9IG5ldyBKU0RPTS5KU0RPTSggdGVtcGxhdGUgKS53aW5kb3cuZG9jdW1lbnRcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5maXJzdENoaWxkXG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVXaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBgPCFET0NUWVBFIGh0bWw+PGhlYWQ+PC9oZWFkPjxib2R5PjwvYm9keT5gXG4gICAgcmV0dXJuIG5ldyBKU0RPTS5KU0RPTSggdGVtcGxhdGUgKS53aW5kb3dcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRlc3RDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHdpbmRvdyA9IGNyZWF0ZVdpbmRvdygpXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBvbkFjdGlvbjogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcImFjdGlvblwiLCBmdW5jdGlvbiAoIGU6IEN1c3RvbUV2ZW50ICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgZGF0YSwgZXZlbnQgfSA9IGUuZGV0YWlsXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCBuYW1lLCBkYXRhLCBldmVudCApXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSxcblxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gKCBldmVudF90eXBlLCBzZWxlY3RvciApIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRfdHlwZSA9PT0gXCJjbGlja1wiID9cbiAgICAgICAgICAgICAgICBuZXcgd2luZG93Lk1vdXNlRXZlbnQoIFwiY2xpY2tcIiwge1xuICAgICAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSApIDogbmV3IHdpbmRvdy5FdmVudCggZXZlbnRfdHlwZSApXG5cbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApLmRpc3BhdGNoRXZlbnQoIGV2ZW50IClcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICggdmlldyApIHtcbiAgICAgICAgICAgIERPTS51cGRhdGVDaGlsZHJlbiggd2luZG93LCB3aW5kb3cuZG9jdW1lbnQuYm9keSwgdmlldyApXG4gICAgICAgIH0sXG5cbiAgICAgICAgZmluZDogZnVuY3Rpb24gKCBzZWxlY3RvciApIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3Rvciggc2VsZWN0b3IgKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlRmFrZUZldGNoID0gZnVuY3Rpb24gKCBwYXRoLCByZXNwb25zZSApIHtcbiAgICByZXR1cm4gamVzdC5mbiggZnVuY3Rpb24gKCB1cmwsIG9wdGlvbnMgKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSggZnVuY3Rpb24gKCByZXMsIHJlaiApIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlVG9Gb3J3YXJkID0ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSggcmVzcG9uc2UuZGF0YSApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggdXJsID09PSBwYXRoICkge1xuICAgICAgICAgICAgICAgIHJlcyggcmVzcG9uc2VUb0ZvcndhcmQgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqKCByZXNwb25zZVRvRm9yd2FyZCApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gKVxuICAgIH0gKVxufVxuXG4iXX0=