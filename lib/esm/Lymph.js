import * as DOM from "./DOM";
import * as Utils from "./Utils";
import * as Command from "./Command";
export var run = function (window, app_component, app_name) {
    var context = Utils.createContext();
    var app = context.createComponent(app_component, app_name);
    var _a = app.init(window.location.hash.slice(1)), viewState = _a[0], commands = _a[1];
    var view = app.render(viewState);
    var lymph_config = window["lymphConfig"] || {
        actionName: "action"
    };
    window.addEventListener(lymph_config.actionName, function (e) {
        console.group("%c", "color: gray; font-weight: lighter;", e.detail.name);
        console.log("%c prev state", "color: #9E9E9E; font-weight: bold;", viewState);
        console.log("%c message", "color: #03A9F4; font-weight: bold;", e.detail);
        var _a = app.update(e.detail, viewState), state = _a[0], commands = _a[1];
        console.log("%c next state", "color: #4CAF50; font-weight: bold;", state);
        console.log("%c commands", "color: #4CAF50; font-weight: bold;", commands);
        viewState = state;
        view = app.render(viewState);
        DOM.updateChildren(window, window.document.body, view);
        Command.process(window, commands);
        console.groupEnd();
    });
    window.addEventListener("hashchange", function (e) {
        window.document.dispatchEvent(new window["CustomEvent"](lymph_config.actionName, {
            detail: { name: ":route-changed", data: window.location.hash.slice(1) },
            bubbles: true,
            cancelable: true
        }));
    });
    // because we never want to do standard submits in SPAs
    window.document.addEventListener("submit", function (e) { return e.preventDefault(); }, true);
    DOM.updateChildren(window, window.document.body, view);
    Command.process(window, commands);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTHltcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvTHltcGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUE7QUFDNUIsT0FBTyxLQUFLLEtBQUssTUFBTSxTQUFTLENBQUE7QUFDaEMsT0FBTyxLQUFLLE9BQU8sTUFBTSxXQUFXLENBQUE7QUFFcEMsTUFBTSxDQUFDLElBQU0sR0FBRyxHQUFHLFVBQVcsTUFBTSxFQUFFLGFBQWEsRUFBRSxRQUFRO0lBQ3pELElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUNyQyxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFFLGFBQWEsRUFBRSxRQUFRLENBQUUsQ0FBQTtJQUUxRCxJQUFBLDRDQUFxRSxFQUFuRSxpQkFBUyxFQUFFLGdCQUFRLENBQWdEO0lBRXpFLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUUsU0FBUyxDQUFFLENBQUE7SUFFbEMsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFFLGFBQWEsQ0FBRSxJQUFJO1FBQzVDLFVBQVUsRUFBRSxRQUFRO0tBQ3ZCLENBQUE7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUUsWUFBWSxDQUFDLFVBQVUsRUFBRSxVQUFXLENBQWM7UUFDdkUsT0FBTyxDQUFDLEtBQUssQ0FBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUUsQ0FBQTtRQUUxRSxPQUFPLENBQUMsR0FBRyxDQUFFLGVBQWUsRUFBRSxvQ0FBb0MsRUFBRSxTQUFTLENBQUUsQ0FBQTtRQUMvRSxPQUFPLENBQUMsR0FBRyxDQUFFLFlBQVksRUFBRSxvQ0FBb0MsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUE7UUFFckUsSUFBQSxvQ0FBdUQsRUFBckQsYUFBSyxFQUFFLGdCQUFRLENBQXNDO1FBRTdELE9BQU8sQ0FBQyxHQUFHLENBQUUsZUFBZSxFQUFFLG9DQUFvQyxFQUFFLEtBQUssQ0FBRSxDQUFBO1FBQzNFLE9BQU8sQ0FBQyxHQUFHLENBQUUsYUFBYSxFQUFFLG9DQUFvQyxFQUFFLFFBQVEsQ0FBRSxDQUFBO1FBRTVFLFNBQVMsR0FBRyxLQUFLLENBQUE7UUFDakIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUUsU0FBUyxDQUFFLENBQUE7UUFFOUIsR0FBRyxDQUFDLGNBQWMsQ0FBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFFLENBQUE7UUFFeEQsT0FBTyxDQUFDLE9BQU8sQ0FBRSxNQUFNLEVBQUUsUUFBUSxDQUFFLENBQUE7UUFFbkMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQ3RCLENBQUMsQ0FBRSxDQUFBO0lBRUgsTUFBTSxDQUFDLGdCQUFnQixDQUFFLFlBQVksRUFBRSxVQUFXLENBQUM7UUFDL0MsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQ3pCLElBQUksTUFBTSxDQUFFLGFBQWEsQ0FBRSxDQUFFLFlBQVksQ0FBQyxVQUFVLEVBQUU7WUFDbEQsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUUsQ0FBQyxDQUFFLEVBQUU7WUFDekUsT0FBTyxFQUFFLElBQUk7WUFDYixVQUFVLEVBQUUsSUFBSTtTQUNuQixDQUFFLENBQ04sQ0FBQTtJQUNMLENBQUMsQ0FBRSxDQUFBO0lBRUgsdURBQXVEO0lBQ3ZELE1BQU0sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUUsUUFBUSxFQUFFLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFsQixDQUFrQixFQUFFLElBQUksQ0FBRSxDQUFBO0lBRTNFLEdBQUcsQ0FBQyxjQUFjLENBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBRSxDQUFBO0lBRXhELE9BQU8sQ0FBQyxPQUFPLENBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBRSxDQUFBO0FBQ3ZDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIERPTSBmcm9tIFwiLi9ET01cIlxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIlxuaW1wb3J0ICogYXMgQ29tbWFuZCBmcm9tIFwiLi9Db21tYW5kXCJcblxuZXhwb3J0IGNvbnN0IHJ1biA9IGZ1bmN0aW9uICggd2luZG93LCBhcHBfY29tcG9uZW50LCBhcHBfbmFtZSApIHtcbiAgICBjb25zdCBjb250ZXh0ID0gVXRpbHMuY3JlYXRlQ29udGV4dCgpXG4gICAgY29uc3QgYXBwID0gY29udGV4dC5jcmVhdGVDb21wb25lbnQoIGFwcF9jb21wb25lbnQsIGFwcF9uYW1lIClcblxuICAgIGxldCBbIHZpZXdTdGF0ZSwgY29tbWFuZHMgXSA9IGFwcC5pbml0KCB3aW5kb3cubG9jYXRpb24uaGFzaC5zbGljZSggMSApIClcblxuICAgIGxldCB2aWV3ID0gYXBwLnJlbmRlciggdmlld1N0YXRlIClcblxuICAgIGNvbnN0IGx5bXBoX2NvbmZpZyA9IHdpbmRvd1sgXCJseW1waENvbmZpZ1wiIF0gfHwge1xuICAgICAgICBhY3Rpb25OYW1lOiBcImFjdGlvblwiXG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIGx5bXBoX2NvbmZpZy5hY3Rpb25OYW1lLCBmdW5jdGlvbiAoIGU6IEN1c3RvbUV2ZW50ICkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKCBcIiVjXCIsIFwiY29sb3I6IGdyYXk7IGZvbnQtd2VpZ2h0OiBsaWdodGVyO1wiLCBlLmRldGFpbC5uYW1lIClcblxuICAgICAgICBjb25zb2xlLmxvZyggXCIlYyBwcmV2IHN0YXRlXCIsIFwiY29sb3I6ICM5RTlFOUU7IGZvbnQtd2VpZ2h0OiBib2xkO1wiLCB2aWV3U3RhdGUgKVxuICAgICAgICBjb25zb2xlLmxvZyggXCIlYyBtZXNzYWdlXCIsIFwiY29sb3I6ICMwM0E5RjQ7IGZvbnQtd2VpZ2h0OiBib2xkO1wiLCBlLmRldGFpbCApXG5cbiAgICAgICAgY29uc3QgWyBzdGF0ZSwgY29tbWFuZHMgXSA9IGFwcC51cGRhdGUoIGUuZGV0YWlsLCB2aWV3U3RhdGUgKVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCBcIiVjIG5leHQgc3RhdGVcIiwgXCJjb2xvcjogIzRDQUY1MDsgZm9udC13ZWlnaHQ6IGJvbGQ7XCIsIHN0YXRlIClcbiAgICAgICAgY29uc29sZS5sb2coIFwiJWMgY29tbWFuZHNcIiwgXCJjb2xvcjogIzRDQUY1MDsgZm9udC13ZWlnaHQ6IGJvbGQ7XCIsIGNvbW1hbmRzIClcblxuICAgICAgICB2aWV3U3RhdGUgPSBzdGF0ZVxuICAgICAgICB2aWV3ID0gYXBwLnJlbmRlciggdmlld1N0YXRlIClcblxuICAgICAgICBET00udXBkYXRlQ2hpbGRyZW4oIHdpbmRvdywgd2luZG93LmRvY3VtZW50LmJvZHksIHZpZXcgKVxuXG4gICAgICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBjb21tYW5kcyApXG5cbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpXG4gICAgfSApXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJoYXNoY2hhbmdlXCIsIGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgd2luZG93LmRvY3VtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICBuZXcgd2luZG93WyBcIkN1c3RvbUV2ZW50XCIgXSggbHltcGhfY29uZmlnLmFjdGlvbk5hbWUsIHtcbiAgICAgICAgICAgICAgICBkZXRhaWw6IHsgbmFtZTogYDpyb3V0ZS1jaGFuZ2VkYCwgZGF0YTogd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoIDEgKSB9LFxuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSApXG4gICAgICAgIClcbiAgICB9IClcblxuICAgIC8vIGJlY2F1c2Ugd2UgbmV2ZXIgd2FudCB0byBkbyBzdGFuZGFyZCBzdWJtaXRzIGluIFNQQXNcbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJzdWJtaXRcIiwgZSA9PiBlLnByZXZlbnREZWZhdWx0KCksIHRydWUgKVxuXG4gICAgRE9NLnVwZGF0ZUNoaWxkcmVuKCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudC5ib2R5LCB2aWV3IClcblxuICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBjb21tYW5kcyApXG59XG4iXX0=