import { merge } from "./Utils";
const fetchHeaders = {
    "Content-Type": "application/json",
    "Accept": "application/json"
};
const createFetchOptions = function (method, token, data) {
    const headers = merge(fetchHeaders, token ? { "Authorization": token } : {});
    const body = JSON.stringify(data);
    return { method, headers, body };
};
export default class {
    constructor(fetch) {
        this.fetch = fetch;
    }
    execute(path, data, auth_token) {
        const options = createFetchOptions("POST", auth_token, data);
        return this.fetch(path, options).then(function (response) {
            return response.json().then(function (data) {
                if (response.status === 400)
                    throw data;
                return data;
            });
        });
    }
    query(path, auth_token) {
        const options = createFetchOptions("GET", auth_token, null);
        return this.fetch(path, options).then(function (response) {
            return response.json().then(function (data) {
                if (response.status === 400)
                    throw data;
                return data;
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSFRUUC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9IVFRQLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFFL0IsTUFBTSxZQUFZLEdBQUc7SUFDakIsY0FBYyxFQUFFLGtCQUFrQjtJQUNsQyxRQUFRLEVBQUUsa0JBQWtCO0NBQy9CLENBQUE7QUFFRCxNQUFNLGtCQUFrQixHQUFHLFVBQVcsTUFBYyxFQUFFLEtBQWEsRUFBRSxJQUFTO0lBQzFFLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFFLENBQUE7SUFDOUUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUUsQ0FBQTtJQUVuQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFBO0FBQ3BDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxPQUFPO0lBQ1YsWUFBc0IsS0FBSztRQUFMLFVBQUssR0FBTCxLQUFLLENBQUE7SUFDM0IsQ0FBQztJQUVELE9BQU8sQ0FBRyxJQUFZLEVBQUUsSUFBUyxFQUFFLFVBQW1CO1FBQ2xELE1BQU0sT0FBTyxHQUFHLGtCQUFrQixDQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFFLENBQUE7UUFFOUQsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFXLFFBQVE7WUFDeEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUUsVUFBVyxJQUFJO2dCQUN4QyxFQUFFLENBQUMsQ0FBRSxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUksQ0FBQztvQkFBQyxNQUFNLElBQUksQ0FBQTtnQkFDekMsTUFBTSxDQUFDLElBQUksQ0FBQTtZQUNmLENBQUMsQ0FBRSxDQUFBO1FBQ1AsQ0FBQyxDQUFFLENBQUE7SUFDUCxDQUFDO0lBRUQsS0FBSyxDQUFHLElBQVksRUFBRSxVQUFtQjtRQUNyQyxNQUFNLE9BQU8sR0FBRyxrQkFBa0IsQ0FBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBRSxDQUFBO1FBRTdELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksRUFBRSxPQUFPLENBQUUsQ0FBQyxJQUFJLENBQUUsVUFBVyxRQUFRO1lBQ3hELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFFLFVBQVcsSUFBSTtnQkFDeEMsRUFBRSxDQUFDLENBQUUsUUFBUSxDQUFDLE1BQU0sS0FBSyxHQUFJLENBQUM7b0JBQUMsTUFBTSxJQUFJLENBQUE7Z0JBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUE7WUFDZixDQUFDLENBQUUsQ0FBQTtRQUNQLENBQUMsQ0FBRSxDQUFBO0lBQ1AsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVyZ2UgfSBmcm9tIFwiLi9VdGlsc1wiXG5cbmNvbnN0IGZldGNoSGVhZGVycyA9IHtcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBcIkFjY2VwdFwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxufVxuXG5jb25zdCBjcmVhdGVGZXRjaE9wdGlvbnMgPSBmdW5jdGlvbiAoIG1ldGhvZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nLCBkYXRhOiBhbnkgKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IG1lcmdlKCBmZXRjaEhlYWRlcnMsIHRva2VuID8geyBcIkF1dGhvcml6YXRpb25cIjogdG9rZW4gfSA6IHt9IClcbiAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoIGRhdGEgKVxuXG4gICAgcmV0dXJuIHsgbWV0aG9kLCBoZWFkZXJzLCBib2R5IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yICggcHJpdmF0ZSBmZXRjaCApIHtcbiAgICB9XG5cbiAgICBleGVjdXRlICggcGF0aDogc3RyaW5nLCBkYXRhOiBhbnksIGF1dGhfdG9rZW4/OiBzdHJpbmcgKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjcmVhdGVGZXRjaE9wdGlvbnMoIFwiUE9TVFwiLCBhdXRoX3Rva2VuLCBkYXRhIClcblxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCggcGF0aCwgb3B0aW9ucyApLnRoZW4oIGZ1bmN0aW9uICggcmVzcG9uc2UgKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oIGZ1bmN0aW9uICggZGF0YSApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAwICkgdGhyb3cgZGF0YVxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfSApXG4gICAgfVxuXG4gICAgcXVlcnkgKCBwYXRoOiBzdHJpbmcsIGF1dGhfdG9rZW4/OiBzdHJpbmcgKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjcmVhdGVGZXRjaE9wdGlvbnMoIFwiR0VUXCIsIGF1dGhfdG9rZW4sIG51bGwgKVxuXG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKCBwYXRoLCBvcHRpb25zICkudGhlbiggZnVuY3Rpb24gKCByZXNwb25zZSApIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCkudGhlbiggZnVuY3Rpb24gKCBkYXRhICkge1xuICAgICAgICAgICAgICAgIGlmICggcmVzcG9uc2Uuc3RhdHVzID09PSA0MDAgKSB0aHJvdyBkYXRhXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9IClcbiAgICB9XG59XG4iXX0=