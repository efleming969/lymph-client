import * as Command from "./Command";
import { createFakeFetch, createWindow } from "./TestUtils";
describe("Command", function () {
    test("execute remote command", function (done) {
        var command = Command.execute("/api/post1", { name: "foobar" }, "command-done");
        var window = createWindow();
        window.fetch = createFakeFetch({ status: 200, data: {} });
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({ name: "command-done", data: {} });
            done();
        });
        Command.process(window, [command]);
    });
    test("execute remote query", function (done) {
        var command = Command.query("/api/get1", "query-done");
        var window = createWindow();
        window.fetch = createFakeFetch({ status: 200, data: { name: "response-data" } });
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({ name: "query-done", data: { name: "response-data" } });
            done();
        });
        Command.process(window, [command]);
    });
    test("save data to local storage", function (done) {
        var command = Command.save("some-data", { name: "some-data" }, "save-done");
        var window = createWindow();
        window.localStorage = { setItem: jest.fn() };
        window.addEventListener("action", function (e) {
            expect(window.localStorage.setItem)
                .toHaveBeenCalledWith("some-data", JSON.stringify({ name: "some-data" }));
            done();
        });
        Command.process(window, [command]);
    });
    test("load data from local storage", function (done) {
        var command = Command.load("some-data", "load-done");
        var window = createWindow();
        window.localStorage = { getItem: function () { return JSON.stringify({ name: "some-data" }); } };
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({ name: "load-done", data: { name: "some-data" } });
            done();
        });
        Command.process(window, [command]);
    });
    test("redirect", function () {
        var window = { location: { assign: jest.fn() } };
        Command.process(window, [Command.redirect("/some/path")]);
        expect(window.location.assign).toHaveBeenCalledWith("/some/path");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZFRlc3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0NvbW1hbmRUZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLFdBQVcsQ0FBQTtBQUNwQyxPQUFPLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUUzRCxRQUFRLENBQUUsU0FBUyxFQUFFO0lBRWpCLElBQUksQ0FBRSx3QkFBd0IsRUFBRSxVQUFXLElBQUk7UUFDM0MsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsY0FBYyxDQUFFLENBQUE7UUFDbkYsSUFBTSxNQUFNLEdBQUcsWUFBWSxFQUFFLENBQUE7UUFFN0IsTUFBTSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBRSxDQUFBO1FBRTNELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFRLEVBQUUsVUFBVyxDQUFDO1lBQzNDLE1BQU0sQ0FBRSxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsT0FBTyxDQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUUsQ0FBQTtZQUNoRSxJQUFJLEVBQUUsQ0FBQTtRQUNWLENBQUMsQ0FBRSxDQUFBO1FBRUgsT0FBTyxDQUFDLE9BQU8sQ0FBRSxNQUFNLEVBQUUsQ0FBRSxPQUFPLENBQUUsQ0FBRSxDQUFBO0lBQzFDLENBQUMsQ0FBRSxDQUFBO0lBRUgsSUFBSSxDQUFFLHNCQUFzQixFQUFFLFVBQVcsSUFBSTtRQUN6QyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFFLFdBQVcsRUFBRSxZQUFZLENBQUUsQ0FBQTtRQUMxRCxJQUFNLE1BQU0sR0FBRyxZQUFZLEVBQUUs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Q0FBRSxDQUFBO0FBQ1AsQ0FBQyxDQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBDb21tYW5kIGZyb20gXCIuL0NvbW1hbmRcIlxuaW1wb3J0IHsgY3JlYXRlRmFrZUZldGNoLCBjcmVhdGVXaW5kb3cgfSBmcm9tIFwiLi9UZXN0VXRpbHNcIlxuXG5kZXNjcmliZSggXCJDb21tYW5kXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgIHRlc3QoIFwiZXhlY3V0ZSByZW1vdGUgY29tbWFuZFwiLCBmdW5jdGlvbiAoIGRvbmUgKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBDb21tYW5kLmV4ZWN1dGUoIFwiL2FwaS9wb3N0MVwiLCB7IG5hbWU6IFwiZm9vYmFyXCIgfSwgXCJjb21tYW5kLWRvbmVcIiApXG4gICAgICAgIGNvbnN0IHdpbmRvdyA9IGNyZWF0ZVdpbmRvdygpXG5cbiAgICAgICAgd2luZG93LmZldGNoID0gY3JlYXRlRmFrZUZldGNoKCB7IHN0YXR1czogMjAwLCBkYXRhOiB7fSB9IClcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJhY3Rpb25cIiwgZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgZXhwZWN0KCBlLmRldGFpbCApLnRvRXF1YWwoIHsgbmFtZTogXCJjb21tYW5kLWRvbmVcIiwgZGF0YToge30gfSApXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSApXG5cbiAgICAgICAgQ29tbWFuZC5wcm9jZXNzKCB3aW5kb3csIFsgY29tbWFuZCBdIClcbiAgICB9IClcblxuICAgIHRlc3QoIFwiZXhlY3V0ZSByZW1vdGUgcXVlcnlcIiwgZnVuY3Rpb24gKCBkb25lICkge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gQ29tbWFuZC5xdWVyeSggXCIvYXBpL2dldDFcIiwgXCJxdWVyeS1kb25lXCIgKVxuICAgICAgICBjb25zdCB3aW5kb3cgPSBjcmVhdGVXaW5kb3coKVxuXG4gICAgICAgIHdpbmRvdy5mZXRjaCA9IGNyZWF0ZUZha2VGZXRjaCggeyBzdGF0dXM6IDIwMCwgZGF0YTogeyBuYW1lOiBcInJlc3BvbnNlLWRhdGFcIiB9IH0gKVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImFjdGlvblwiLCBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICBleHBlY3QoIGUuZGV0YWlsICkudG9FcXVhbCggeyBuYW1lOiBcInF1ZXJ5LWRvbmVcIiwgZGF0YTogeyBuYW1lOiBcInJlc3BvbnNlLWRhdGFcIiB9IH0gKVxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0gKVxuXG4gICAgICAgIENvbW1hbmQucHJvY2Vzcyggd2luZG93LCBbIGNvbW1hbmQgXSApXG4gICAgfSApXG5cbiAgICB0ZXN0KCBcInNhdmUgZGF0YSB0byBsb2NhbCBzdG9yYWdlXCIsIGZ1bmN0aW9uICggZG9uZSApIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IENvbW1hbmQuc2F2ZSggXCJzb21lLWRhdGFcIiwgeyBuYW1lOiBcInNvbWUtZGF0YVwiIH0sIFwic2F2ZS1kb25lXCIgKVxuICAgICAgICBjb25zdCB3aW5kb3cgPSBjcmVhdGVXaW5kb3coKVxuXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UgPSB7IHNldEl0ZW06IGplc3QuZm4oKSB9XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwiYWN0aW9uXCIsIGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgIGV4cGVjdCggd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtIClcbiAgICAgICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZFdpdGgoIFwic29tZS1kYXRhXCIsIEpTT04uc3RyaW5naWZ5KCB7IG5hbWU6IFwic29tZS1kYXRhXCIgfSApIClcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9IClcblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgWyBjb21tYW5kIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJsb2FkIGRhdGEgZnJvbSBsb2NhbCBzdG9yYWdlXCIsIGZ1bmN0aW9uICggZG9uZSApIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IENvbW1hbmQubG9hZCggXCJzb21lLWRhdGFcIiwgXCJsb2FkLWRvbmVcIiApXG4gICAgICAgIGNvbnN0IHdpbmRvdyA9IGNyZWF0ZVdpbmRvdygpXG5cbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZSA9IHsgZ2V0SXRlbTogKCkgPT4gSlNPTi5zdHJpbmdpZnkoIHsgbmFtZTogXCJzb21lLWRhdGFcIiB9ICkgfVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImFjdGlvblwiLCBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICBleHBlY3QoIGUuZGV0YWlsICkudG9FcXVhbCggeyBuYW1lOiBcImxvYWQtZG9uZVwiLCBkYXRhOiB7IG5hbWU6IFwic29tZS1kYXRhXCIgfSB9IClcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9IClcblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgWyBjb21tYW5kIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJyZWRpcmVjdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHdpbmRvdyA9IHsgbG9jYXRpb246IHsgYXNzaWduOiBqZXN0LmZuKCkgfSB9XG5cbiAgICAgICAgQ29tbWFuZC5wcm9jZXNzKCB3aW5kb3csIFsgQ29tbWFuZC5yZWRpcmVjdCggXCIvc29tZS9wYXRoXCIgKSBdIClcblxuICAgICAgICBleHBlY3QoIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24gKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCggXCIvc29tZS9wYXRoXCIgKVxuICAgIH0gKVxufSApIl19