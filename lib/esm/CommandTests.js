import * as Command from "./Command";
import { createFakeFetch, createWindow } from "./TestUtils";
describe("Command", function () {
    test("execute remote command", function (done) {
        var command = Command.execute("/api/post1", { name: "foobar" }, "command-done");
        var window = createWindow();
        window.fetch = createFakeFetch({ status: 200, data: {} });
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({ name: "command-done", data: {} });
            done();
        });
        Command.process(window, [command]);
    });
    test("execute remote query", function (done) {
        var command = Command.query("/api/get1", "query-done");
        var window = createWindow();
        window.fetch = createFakeFetch({ status: 200, data: { name: "response-data" } });
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({
                name: "query-done",
                data: { name: "response-data" }
            });
            done();
        });
        Command.process(window, [command]);
    });
    test("save data to local storage", function (done) {
        var command = Command.save("some-data", { name: "some-data" }, "save-done");
        var window = createWindow();
        window.localStorage = { setItem: jest.fn() };
        window.addEventListener("action", function (e) {
            expect(window.localStorage.setItem)
                .toHaveBeenCalledWith("some-data", JSON.stringify({ name: "some-data" }));
            done();
        });
        Command.process(window, [command]);
    });
    test("load data from local storage", function (done) {
        var command = Command.load("some-data", "load-done");
        var window = createWindow();
        window.localStorage = { getItem: function () { return JSON.stringify({ name: "some-data" }); } };
        window.addEventListener("action", function (e) {
            expect(e.detail).toEqual({
                name: "load-done",
                data: { name: "some-data" }
            });
            done();
        });
        Command.process(window, [command]);
    });
    test("redirect", function () {
        var window = { location: { assign: jest.fn() } };
        Command.process(window, [Command.redirect("/some/path")]);
        expect(window.location.assign).toHaveBeenCalledWith("/some/path");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZFRlc3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0NvbW1hbmRUZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLFdBQVcsQ0FBQTtBQUNwQyxPQUFPLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUUzRCxRQUFRLENBQUUsU0FBUyxFQUFFO0lBRWpCLElBQUksQ0FBRSx3QkFBd0IsRUFBRSxVQUFXLElBQUk7UUFDM0MsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsY0FBYyxDQUFFLENBQUE7UUFDbkYsSUFBTSxNQUFNLEdBQUcsWUFBWSxFQUFFLENBQUE7UUFFN0IsTUFBTSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBRSxDQUFBO1FBRTNELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFRLEVBQUUsVUFBVyxDQUFDO1lBQzNDLE1BQU0sQ0FBRSxDQUFDLENBQUMsTUFBTSxDQUFFLENBQUMsT0FBTyxDQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUUsQ0FBQTtZQUNoRSxJQUFJLEVBQUUsQ0FBQTtRQUNWLENBQUMsQ0FBRSxDQUFBO1FBRUgsT0FBTyxDQUFDLE9BQU8sQ0FBRSxNQUFNLEVBQUUsQ0FBRSxPQUFPLENBQUUsQ0FBRSxDQUFBO0lBQzFDLENBQUMsQ0FBRSxDQUFBO0lBRUgsSUFBSSxDQUFFLHNCQUFzQixFQUFFLFVBQVcsSUFBSTtRQUN6QyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFFLFdBQVcsRUFBRSxZQUFZLENBQUUsQ0FBQTtRQUMxRCxJQUFNLE1BQU0sR0FBRyxZQUFZLEVBQUUs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ekUsQ0FBQyxDQUFFLENBQUE7QUFDUCxDQUFDLENBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIENvbW1hbmQgZnJvbSBcIi4vQ29tbWFuZFwiXG5pbXBvcnQgeyBjcmVhdGVGYWtlRmV0Y2gsIGNyZWF0ZVdpbmRvdyB9IGZyb20gXCIuL1Rlc3RVdGlsc1wiXG5cbmRlc2NyaWJlKCBcIkNvbW1hbmRcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgdGVzdCggXCJleGVjdXRlIHJlbW90ZSBjb21tYW5kXCIsIGZ1bmN0aW9uICggZG9uZSApIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IENvbW1hbmQuZXhlY3V0ZSggXCIvYXBpL3Bvc3QxXCIsIHsgbmFtZTogXCJmb29iYXJcIiB9LCBcImNvbW1hbmQtZG9uZVwiIClcbiAgICAgICAgY29uc3Qgd2luZG93ID0gY3JlYXRlV2luZG93KClcblxuICAgICAgICB3aW5kb3cuZmV0Y2ggPSBjcmVhdGVGYWtlRmV0Y2goIHsgc3RhdHVzOiAyMDAsIGRhdGE6IHt9IH0gKVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImFjdGlvblwiLCBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICBleHBlY3QoIGUuZGV0YWlsICkudG9FcXVhbCggeyBuYW1lOiBcImNvbW1hbmQtZG9uZVwiLCBkYXRhOiB7fSB9IClcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9IClcblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgWyBjb21tYW5kIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJleGVjdXRlIHJlbW90ZSBxdWVyeVwiLCBmdW5jdGlvbiAoIGRvbmUgKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBDb21tYW5kLnF1ZXJ5KCBcIi9hcGkvZ2V0MVwiLCBcInF1ZXJ5LWRvbmVcIiApXG4gICAgICAgIGNvbnN0IHdpbmRvdyA9IGNyZWF0ZVdpbmRvdygpXG5cbiAgICAgICAgd2luZG93LmZldGNoID0gY3JlYXRlRmFrZUZldGNoKCB7IHN0YXR1czogMjAwLCBkYXRhOiB7IG5hbWU6IFwicmVzcG9uc2UtZGF0YVwiIH0gfSApXG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwiYWN0aW9uXCIsIGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgIGV4cGVjdCggZS5kZXRhaWwgKS50b0VxdWFsKCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJxdWVyeS1kb25lXCIsXG4gICAgICAgICAgICAgICAgZGF0YTogeyBuYW1lOiBcInJlc3BvbnNlLWRhdGFcIiB9XG4gICAgICAgICAgICB9IClcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9IClcblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgWyBjb21tYW5kIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJzYXZlIGRhdGEgdG8gbG9jYWwgc3RvcmFnZVwiLCBmdW5jdGlvbiAoIGRvbmUgKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBDb21tYW5kLnNhdmUoIFwic29tZS1kYXRhXCIsIHsgbmFtZTogXCJzb21lLWRhdGFcIiB9LCBcInNhdmUtZG9uZVwiIClcbiAgICAgICAgY29uc3Qgd2luZG93ID0gY3JlYXRlV2luZG93KClcblxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlID0geyBzZXRJdGVtOiBqZXN0LmZuKCkgfVxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImFjdGlvblwiLCBmdW5jdGlvbiAoIGUgKSB7XG4gICAgICAgICAgICBleHBlY3QoIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSApXG4gICAgICAgICAgICAgICAgLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCBcInNvbWUtZGF0YVwiLCBKU09OLnN0cmluZ2lmeSggeyBuYW1lOiBcInNvbWUtZGF0YVwiIH0gKSApXG4gICAgICAgICAgICBkb25lKClcbiAgICAgICAgfSApXG5cbiAgICAgICAgQ29tbWFuZC5wcm9jZXNzKCB3aW5kb3csIFsgY29tbWFuZCBdIClcbiAgICB9IClcblxuICAgIHRlc3QoIFwibG9hZCBkYXRhIGZyb20gbG9jYWwgc3RvcmFnZVwiLCBmdW5jdGlvbiAoIGRvbmUgKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBDb21tYW5kLmxvYWQoIFwic29tZS1kYXRhXCIsIFwibG9hZC1kb25lXCIgKVxuICAgICAgICBjb25zdCB3aW5kb3cgPSBjcmVhdGVXaW5kb3coKVxuXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UgPSB7IGdldEl0ZW06ICgpID0+IEpTT04uc3RyaW5naWZ5KCB7IG5hbWU6IFwic29tZS1kYXRhXCIgfSApIH1cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJhY3Rpb25cIiwgZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgZXhwZWN0KCBlLmRldGFpbCApLnRvRXF1YWwoIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImxvYWQtZG9uZVwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IHsgbmFtZTogXCJzb21lLWRhdGFcIiB9XG4gICAgICAgICAgICB9IClcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICB9IClcblxuICAgICAgICBDb21tYW5kLnByb2Nlc3MoIHdpbmRvdywgWyBjb21tYW5kIF0gKVxuICAgIH0gKVxuXG4gICAgdGVzdCggXCJyZWRpcmVjdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHdpbmRvdyA9IHsgbG9jYXRpb246IHsgYXNzaWduOiBqZXN0LmZuKCkgfSB9XG5cbiAgICAgICAgQ29tbWFuZC5wcm9jZXNzKCB3aW5kb3csIFsgQ29tbWFuZC5yZWRpcmVjdCggXCIvc29tZS9wYXRoXCIgKSBdIClcblxuICAgICAgICBleHBlY3QoIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24gKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCggXCIvc29tZS9wYXRoXCIgKVxuICAgIH0gKVxufSApIl19