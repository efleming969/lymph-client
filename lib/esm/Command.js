import HTTP from "./HTTP";
import * as Utils from "./Utils";
export const process = function (window, command) {
    const http = new HTTP(window.fetch);
    const dispatchAction = Utils.dispatchAction(window);
    if (command != null) {
        if (command.type === "execute") {
            http.execute(command.url, command.data, command.token).then(function (response) {
                dispatchAction({
                    name: command.action,
                    data: { body: response.data, status: response.status }
                });
            });
        }
        else if (command.type === "query") {
            http.query(command.url, command.token).then(function (response) {
                dispatchAction({
                    name: command.action,
                    data: { body: response.data, status: response.status }
                });
            });
        }
        else if (command.type === "load") {
            setTimeout(function () {
                const data = JSON.parse(window.localStorage.getItem(command.location));
                dispatchAction({ name: command.action, data });
            }, 0);
        }
        else if (command.type === "save") {
            setTimeout(function () {
                window.localStorage.setItem(command.location, JSON.stringify(command.data));
                if (command.action)
                    dispatchAction({ name: command.action });
            }, 0);
        }
        else if (command.type === "redirect") {
            console.log("redirecting", command.path);
            setTimeout(function () {
                window.location.assign(command.path);
            }, 0);
        }
        // else if ( window.config.commands && window.config.commands[ command.type ] ) {
        //     window.config.commands[ command.type ]( command )
        // }
    }
};
export const execute = function (url, data, action, token) {
    return { type: "execute", url, data, action, token };
};
export const query = function (url, action, token) {
    return { type: "query", url, action, token };
};
export const redirect = function (path) {
    return { type: "redirect", path };
};
export const load = function (location, action) {
    return { type: "load", location, action };
};
export const save = function (location, data, action) {
    return { type: "save", location, data, action };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQTtBQUN6QixPQUFPLEtBQUssS0FBSyxNQUFNLFNBQVMsQ0FBQTtBQUVoQyxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsVUFBVyxNQUFNLEVBQUUsT0FBTztJQUM3QyxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUE7SUFDckMsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBRSxNQUFNLENBQUUsQ0FBQTtJQUVyRCxFQUFFLENBQUMsQ0FBRSxPQUFPLElBQUksSUFBSyxDQUFDLENBQUMsQ0FBQztRQUNwQixFQUFFLENBQUMsQ0FBRSxPQUFPLENBQUMsSUFBSSxLQUFLLFNBQVUsQ0FBQyxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBRSxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFXLFFBQVE7Z0JBQzlFLGNBQWMsQ0FBRTtvQkFDWixJQUFJLEVBQUUsT0FBTyxDQUFDLE1BQU07b0JBQ3BCLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTSxFQUFFO2lCQUN6RCxDQUFFLENBQUE7WUFDUCxDQUFDLENBQUUsQ0FBQTtRQUNQLENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUUsT0FBTyxDQUFDLElBQUksS0FBSyxPQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFFLENBQUMsSUFBSSxDQUFFLFVBQVcsUUFB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RUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUE7QUFDbkQsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhUVFAgZnJvbSBcIi4vSFRUUFwiXG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiXG5cbmV4cG9ydCBjb25zdCBwcm9jZXNzID0gZnVuY3Rpb24gKCB3aW5kb3csIGNvbW1hbmQgKSB7XG4gICAgY29uc3QgaHR0cCA9IG5ldyBIVFRQKCB3aW5kb3cuZmV0Y2ggKVxuICAgIGNvbnN0IGRpc3BhdGNoQWN0aW9uID0gVXRpbHMuZGlzcGF0Y2hBY3Rpb24oIHdpbmRvdyApXG5cbiAgICBpZiAoIGNvbW1hbmQgIT0gbnVsbCApIHtcbiAgICAgICAgaWYgKCBjb21tYW5kLnR5cGUgPT09IFwiZXhlY3V0ZVwiICkge1xuICAgICAgICAgICAgaHR0cC5leGVjdXRlKCBjb21tYW5kLnVybCwgY29tbWFuZC5kYXRhLCBjb21tYW5kLnRva2VuICkudGhlbiggZnVuY3Rpb24gKCByZXNwb25zZSApIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEFjdGlvbigge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBjb21tYW5kLmFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBib2R5OiByZXNwb25zZS5kYXRhLCBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyB9XG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9IClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggY29tbWFuZC50eXBlID09PSBcInF1ZXJ5XCIgKSB7XG4gICAgICAgICAgICBodHRwLnF1ZXJ5KCBjb21tYW5kLnVybCwgY29tbWFuZC50b2tlbiApLnRoZW4oIGZ1bmN0aW9uICggcmVzcG9uc2UgKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hBY3Rpb24oIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogY29tbWFuZC5hY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgYm9keTogcmVzcG9uc2UuZGF0YSwgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMgfVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIGNvbW1hbmQudHlwZSA9PT0gXCJsb2FkXCIgKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSggY29tbWFuZC5sb2NhdGlvbiApIClcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEFjdGlvbiggeyBuYW1lOiBjb21tYW5kLmFjdGlvbiwgZGF0YSB9IClcbiAgICAgICAgICAgIH0sIDAgKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCBjb21tYW5kLnR5cGUgPT09IFwic2F2ZVwiICkge1xuICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSggY29tbWFuZC5sb2NhdGlvbiwgSlNPTi5zdHJpbmdpZnkoIGNvbW1hbmQuZGF0YSApIClcbiAgICAgICAgICAgICAgICBpZiAoIGNvbW1hbmQuYWN0aW9uIClcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hBY3Rpb24oIHsgbmFtZTogY29tbWFuZC5hY3Rpb24gfSApXG4gICAgICAgICAgICB9LCAwIClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggY29tbWFuZC50eXBlID09PSBcInJlZGlyZWN0XCIgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyggXCJyZWRpcmVjdGluZ1wiLCBjb21tYW5kLnBhdGggKVxuICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oIGNvbW1hbmQucGF0aCApXG4gICAgICAgICAgICB9LCAwIClcbiAgICAgICAgfVxuICAgICAgICAvLyBlbHNlIGlmICggd2luZG93LmNvbmZpZy5jb21tYW5kcyAmJiB3aW5kb3cuY29uZmlnLmNvbW1hbmRzWyBjb21tYW5kLnR5cGUgXSApIHtcbiAgICAgICAgLy8gICAgIHdpbmRvdy5jb25maWcuY29tbWFuZHNbIGNvbW1hbmQudHlwZSBdKCBjb21tYW5kIClcbiAgICAgICAgLy8gfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGUgPSBmdW5jdGlvbiAoIHVybCwgZGF0YSwgYWN0aW9uLCB0b2tlbj8gKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJleGVjdXRlXCIsIHVybCwgZGF0YSwgYWN0aW9uLCB0b2tlbiB9XG59XG5cbmV4cG9ydCBjb25zdCBxdWVyeSA9IGZ1bmN0aW9uICggdXJsLCBhY3Rpb24sIHRva2VuPyApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcInF1ZXJ5XCIsIHVybCwgYWN0aW9uLCB0b2tlbiB9XG59XG5cbmV4cG9ydCBjb25zdCByZWRpcmVjdCA9IGZ1bmN0aW9uICggcGF0aCApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcInJlZGlyZWN0XCIsIHBhdGggfVxufVxuXG5leHBvcnQgY29uc3QgbG9hZCA9IGZ1bmN0aW9uICggbG9jYXRpb24sIGFjdGlvbiApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcImxvYWRcIiwgbG9jYXRpb24sIGFjdGlvbiB9XG59XG5cbmV4cG9ydCBjb25zdCBzYXZlID0gZnVuY3Rpb24gKCBsb2NhdGlvbiwgZGF0YSwgYWN0aW9uPyApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcInNhdmVcIiwgbG9jYXRpb24sIGRhdGEsIGFjdGlvbiB9XG59XG5cbiJdfQ==