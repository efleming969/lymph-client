import * as Utils from "./Utils";
import * as HTTP from "./HTTP";
export var process = function (window, command) {
    var dispatchAction = Utils.dispatchAction(window);
    var sendCommand = HTTP.sendCommand(window.fetch);
    var sendQuery = HTTP.sendQuery(window.fetch);
    if (command != null) {
        if (command.type === "execute") {
            sendCommand(command.url, command.data, command.token).then(function (response) {
                dispatchAction({
                    name: command.action,
                    data: { body: response.data, status: response.status }
                });
            });
        }
        else if (command.type === "query") {
            sendQuery(command.url, command.token).then(function (response) {
                dispatchAction({
                    name: command.action,
                    data: { body: response.data, status: response.status }
                });
            });
        }
        else if (command.type === "load") {
            setTimeout(function () {
                var data = JSON.parse(window.localStorage.getItem(command.location));
                dispatchAction({ name: command.action, data: data });
            }, 0);
        }
        else if (command.type === "save") {
            setTimeout(function () {
                window.localStorage.setItem(command.location, JSON.stringify(command.data));
                if (command.action)
                    dispatchAction({ name: command.action });
            }, 0);
        }
        else if (command.type === "redirect") {
            console.log("redirecting", command.path);
            setTimeout(function () {
                window.location.assign(command.path);
            }, 0);
        }
        // else if ( window.config.commands && window.config.commands[ command.type ] ) {
        //     window.config.commands[ command.type ]( command )
        // }
    }
};
export var execute = function (url, data, action, token) {
    return { type: "execute", url: url, data: data, action: action, token: token };
};
export var query = function (url, action, token) {
    return { type: "query", url: url, action: action, token: token };
};
export var redirect = function (path) {
    return { type: "redirect", path: path };
};
export var load = function (location, action) {
    return { type: "load", location: location, action: action };
};
export var save = function (location, data, action) {
    return { type: "save", location: location, data: data, action: action };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sU0FBUyxDQUFBO0FBQ2hDLE9BQU8sS0FBSyxJQUFJLE1BQU0sUUFBUSxDQUFBO0FBRTlCLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRyxVQUFXLE1BQU0sRUFBRSxPQUFPO0lBQzdDLElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUUsTUFBTSxDQUFFLENBQUE7SUFDckQsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUE7SUFDcEQsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUE7SUFFaEQsRUFBRSxDQUFDLENBQUUsT0FBTyxJQUFJLElBQUssQ0FBQyxDQUFDLENBQUM7UUFDcEIsRUFBRSxDQUFDLENBQUUsT0FBTyxDQUFDLElBQUksS0FBSyxTQUFVLENBQUMsQ0FBQyxDQUFDO1lBQy9CLFdBQVcsQ0FBRSxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBRSxDQUFDLElBQUksQ0FBRSxVQUFXLFFBQVE7Z0JBQzdFLGNBQWMsQ0FBRTtvQkFDWixJQUFJLEVBQUUsT0FBTyxDQUFDLE1BQU07b0JBQ3BCLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTSxFQUFFO2lCQUN6RCxDQUFFLENBQUE7WUFDUCxDQUFDLENBQUUsQ0FBQTtRQUNQLENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUUsT0FBTyxDQUFDLElBQUksS0FBSyxPQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLFNBQVMsQ0FBRSxPQUFPLENB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Q0FBQTtBQUVELE1BQU0sQ0FBQyxJQUFNLElBQUksR0FBRyxVQUFXLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTztJQUNsRCxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsVUFBQSxFQUFFLElBQUksTUFBQSxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUE7QUFDbkQsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIlxuaW1wb3J0ICogYXMgSFRUUCBmcm9tIFwiLi9IVFRQXCJcblxuZXhwb3J0IGNvbnN0IHByb2Nlc3MgPSBmdW5jdGlvbiAoIHdpbmRvdywgY29tbWFuZCApIHtcbiAgICBjb25zdCBkaXNwYXRjaEFjdGlvbiA9IFV0aWxzLmRpc3BhdGNoQWN0aW9uKCB3aW5kb3cgKVxuICAgIGNvbnN0IHNlbmRDb21tYW5kID0gSFRUUC5zZW5kQ29tbWFuZCggd2luZG93LmZldGNoIClcbiAgICBjb25zdCBzZW5kUXVlcnkgPSBIVFRQLnNlbmRRdWVyeSggd2luZG93LmZldGNoIClcblxuICAgIGlmICggY29tbWFuZCAhPSBudWxsICkge1xuICAgICAgICBpZiAoIGNvbW1hbmQudHlwZSA9PT0gXCJleGVjdXRlXCIgKSB7XG4gICAgICAgICAgICBzZW5kQ29tbWFuZCggY29tbWFuZC51cmwsIGNvbW1hbmQuZGF0YSwgY29tbWFuZC50b2tlbiApLnRoZW4oIGZ1bmN0aW9uICggcmVzcG9uc2UgKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hBY3Rpb24oIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogY29tbWFuZC5hY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgYm9keTogcmVzcG9uc2UuZGF0YSwgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMgfVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIGNvbW1hbmQudHlwZSA9PT0gXCJxdWVyeVwiICkge1xuICAgICAgICAgICAgc2VuZFF1ZXJ5KCBjb21tYW5kLnVybCwgY29tbWFuZC50b2tlbiApLnRoZW4oIGZ1bmN0aW9uICggcmVzcG9uc2UgKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hBY3Rpb24oIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogY29tbWFuZC5hY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgYm9keTogcmVzcG9uc2UuZGF0YSwgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMgfVxuICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgfSApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIGNvbW1hbmQudHlwZSA9PT0gXCJsb2FkXCIgKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSggY29tbWFuZC5sb2NhdGlvbiApIClcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEFjdGlvbiggeyBuYW1lOiBjb21tYW5kLmFjdGlvbiwgZGF0YSB9IClcbiAgICAgICAgICAgIH0sIDAgKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCBjb21tYW5kLnR5cGUgPT09IFwic2F2ZVwiICkge1xuICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSggY29tbWFuZC5sb2NhdGlvbiwgSlNPTi5zdHJpbmdpZnkoIGNvbW1hbmQuZGF0YSApIClcbiAgICAgICAgICAgICAgICBpZiAoIGNvbW1hbmQuYWN0aW9uIClcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hBY3Rpb24oIHsgbmFtZTogY29tbWFuZC5hY3Rpb24gfSApXG4gICAgICAgICAgICB9LCAwIClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggY29tbWFuZC50eXBlID09PSBcInJlZGlyZWN0XCIgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyggXCJyZWRpcmVjdGluZ1wiLCBjb21tYW5kLnBhdGggKVxuICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oIGNvbW1hbmQucGF0aCApXG4gICAgICAgICAgICB9LCAwIClcbiAgICAgICAgfVxuICAgICAgICAvLyBlbHNlIGlmICggd2luZG93LmNvbmZpZy5jb21tYW5kcyAmJiB3aW5kb3cuY29uZmlnLmNvbW1hbmRzWyBjb21tYW5kLnR5cGUgXSApIHtcbiAgICAgICAgLy8gICAgIHdpbmRvdy5jb25maWcuY29tbWFuZHNbIGNvbW1hbmQudHlwZSBdKCBjb21tYW5kIClcbiAgICAgICAgLy8gfVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGUgPSBmdW5jdGlvbiAoIHVybCwgZGF0YSwgYWN0aW9uLCB0b2tlbj8gKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJleGVjdXRlXCIsIHVybCwgZGF0YSwgYWN0aW9uLCB0b2tlbiB9XG59XG5cbmV4cG9ydCBjb25zdCBxdWVyeSA9IGZ1bmN0aW9uICggdXJsLCBhY3Rpb24sIHRva2VuPyApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcInF1ZXJ5XCIsIHVybCwgYWN0aW9uLCB0b2tlbiB9XG59XG5cbmV4cG9ydCBjb25zdCByZWRpcmVjdCA9IGZ1bmN0aW9uICggcGF0aCApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcInJlZGlyZWN0XCIsIHBhdGggfVxufVxuXG5leHBvcnQgY29uc3QgbG9hZCA9IGZ1bmN0aW9uICggbG9jYXRpb24sIGFjdGlvbiApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcImxvYWRcIiwgbG9jYXRpb24sIGFjdGlvbiB9XG59XG5cbmV4cG9ydCBjb25zdCBzYXZlID0gZnVuY3Rpb24gKCBsb2NhdGlvbiwgZGF0YSwgYWN0aW9uPyApIHtcbiAgICByZXR1cm4geyB0eXBlOiBcInNhdmVcIiwgbG9jYXRpb24sIGRhdGEsIGFjdGlvbiB9XG59XG5cbiJdfQ==