import * as Utils from "./Utils";
import * as HTTP from "./HTTP";
export var process = function (window, commands) {
    var dispatchAction = Utils.dispatchAction(window);
    var sendCommand = HTTP.sendCommand(window.fetch);
    var sendQuery = HTTP.sendQuery(window.fetch);
    if (commands !== undefined) {
        var _loop_1 = function (i) {
            var command = commands[i];
            if (command.type === "execute") {
                sendCommand(command.url, command.data, command.token).then(function (response) {
                    dispatchAction({ name: command.action, data: response.data });
                });
            }
            else if (command.type === "query") {
                sendQuery(command.url, command.token).then(function (response) {
                    dispatchAction({ name: command.action, data: response.data });
                });
            }
            else if (command.type === "load") {
                setTimeout(function () {
                    var data = JSON.parse(window.localStorage.getItem(command.location));
                    dispatchAction({ name: command.action, data: data });
                }, 0);
            }
            else if (command.type === "save") {
                setTimeout(function () {
                    window.localStorage.setItem(command.location, JSON.stringify(command.data));
                    if (command.action)
                        dispatchAction({ name: command.action });
                }, 0);
            }
            else if (command.type === "redirect") {
                console.log("redirecting", command.path);
                setTimeout(function () {
                    window.location.assign(command.path);
                }, 0);
            }
            else if (window.config.commands && window.config.commands[command.type]) {
                window.config.commands[command.type](command);
            }
        };
        for (var i = 0; i < commands.length; i++) {
            _loop_1(i);
        }
    }
};
export var execute = function (url, data, action, token) {
    return { type: "execute", url: url, data: data, action: action, token: token };
};
export var query = function (url, action, token) {
    return { type: "query", url: url, action: action, token: token };
};
export var redirect = function (path) {
    return { type: "redirect", path: path };
};
export var load = function (location, action) {
    return { type: "load", location: location, action: action };
};
export var save = function (location, data, action) {
    return { type: "save", location: location, data: data, action: action };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Db21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sU0FBUyxDQUFBO0FBQ2hDLE9BQU8sS0FBSyxJQUFJLE1BQU0sUUFBUSxDQUFBO0FBRTlCLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRyxVQUFXLE1BQU0sRUFBRSxRQUFRO0lBQzlDLElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUUsTUFBTSxDQUFFLENBQUE7SUFDckQsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUE7SUFDcEQsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFFLENBQUE7SUFFaEQsRUFBRSxDQUFDLENBQUUsUUFBUSxLQUFLLFNBQVUsQ0FBQyxDQUFDLENBQUM7Z0NBQ2pCLENBQUM7WUFDUCxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUUsQ0FBQyxDQUFFLENBQUE7WUFFN0IsRUFBRSxDQUFDLENBQUUsT0FBTyxDQUFDLElBQUksS0FBSyxTQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixXQUFXLENBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUUsQ0FBQyxJQUFJLENBQUUsVUFBVyxRQUFRO29CQUM3RSxjQUFjLENBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFFLENBQUE7Z0JBQ25FLENBQUMsQ0FBRSxDQUFBO1lBQ1AsQ0FBQztZQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBRSxPQUFPLENBQUMsSUFBSSxLQUFLLE9BQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xDLFNBQVMsQ0FBRSxPQUFP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QUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsVUFBVyxJQUFJO0lBQ25DLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxNQUFBLEVBQUUsQ0FBQTtBQUNyQyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsSUFBTSxJQUFJLEdBQUcsVUFBVyxRQUFRLEVBQUUsTUFBTTtJQUMzQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsVUFBQSxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUE7QUFDN0MsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFHLFVBQVcsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFPO0lBQ2xELE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxVQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQTtBQUNuRCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlsc1wiXG5pbXBvcnQgKiBhcyBIVFRQIGZyb20gXCIuL0hUVFBcIlxuXG5leHBvcnQgY29uc3QgcHJvY2VzcyA9IGZ1bmN0aW9uICggd2luZG93LCBjb21tYW5kcyApIHtcbiAgICBjb25zdCBkaXNwYXRjaEFjdGlvbiA9IFV0aWxzLmRpc3BhdGNoQWN0aW9uKCB3aW5kb3cgKVxuICAgIGNvbnN0IHNlbmRDb21tYW5kID0gSFRUUC5zZW5kQ29tbWFuZCggd2luZG93LmZldGNoIClcbiAgICBjb25zdCBzZW5kUXVlcnkgPSBIVFRQLnNlbmRRdWVyeSggd2luZG93LmZldGNoIClcblxuICAgIGlmICggY29tbWFuZHMgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgY29tbWFuZHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gY29tbWFuZHNbIGkgXVxuXG4gICAgICAgICAgICBpZiAoIGNvbW1hbmQudHlwZSA9PT0gXCJleGVjdXRlXCIgKSB7XG4gICAgICAgICAgICAgICAgc2VuZENvbW1hbmQoIGNvbW1hbmQudXJsLCBjb21tYW5kLmRhdGEsIGNvbW1hbmQudG9rZW4gKS50aGVuKCBmdW5jdGlvbiAoIHJlc3BvbnNlICkge1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaEFjdGlvbiggeyBuYW1lOiBjb21tYW5kLmFjdGlvbiwgZGF0YTogcmVzcG9uc2UuZGF0YSB9IClcbiAgICAgICAgICAgICAgICB9IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCBjb21tYW5kLnR5cGUgPT09IFwicXVlcnlcIiApIHtcbiAgICAgICAgICAgICAgICBzZW5kUXVlcnkoIGNvbW1hbmQudXJsLCBjb21tYW5kLnRva2VuICkudGhlbiggZnVuY3Rpb24gKCByZXNwb25zZSApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hBY3Rpb24oIHsgbmFtZTogY29tbWFuZC5hY3Rpb24sIGRhdGE6IHJlc3BvbnNlLmRhdGEgfSApXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICggY29tbWFuZC50eXBlID09PSBcImxvYWRcIiApIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKCB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oIGNvbW1hbmQubG9jYXRpb24gKSApXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoQWN0aW9uKCB7IG5hbWU6IGNvbW1hbmQuYWN0aW9uLCBkYXRhIH0gKVxuICAgICAgICAgICAgICAgIH0sIDAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIGNvbW1hbmQudHlwZSA9PT0gXCJzYXZlXCIgKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oIGNvbW1hbmQubG9jYXRpb24sIEpTT04uc3RyaW5naWZ5KCBjb21tYW5kLmRhdGEgKSApXG4gICAgICAgICAgICAgICAgICAgIGlmICggY29tbWFuZC5hY3Rpb24gKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hBY3Rpb24oIHsgbmFtZTogY29tbWFuZC5hY3Rpb24gfSApXG4gICAgICAgICAgICAgICAgfSwgMCApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICggY29tbWFuZC50eXBlID09PSBcInJlZGlyZWN0XCIgKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coIFwicmVkaXJlY3RpbmdcIiwgY29tbWFuZC5wYXRoIClcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24oIGNvbW1hbmQucGF0aCApXG4gICAgICAgICAgICAgICAgfSwgMCApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICggd2luZG93LmNvbmZpZy5jb21tYW5kcyAmJiB3aW5kb3cuY29uZmlnLmNvbW1hbmRzWyBjb21tYW5kLnR5cGUgXSApIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY29uZmlnLmNvbW1hbmRzWyBjb21tYW5kLnR5cGUgXSggY29tbWFuZCApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlID0gZnVuY3Rpb24gKCB1cmwsIGRhdGEsIGFjdGlvbiwgdG9rZW4/ICkge1xuICAgIHJldHVybiB7IHR5cGU6IFwiZXhlY3V0ZVwiLCB1cmwsIGRhdGEsIGFjdGlvbiwgdG9rZW4gfVxufVxuXG5leHBvcnQgY29uc3QgcXVlcnkgPSBmdW5jdGlvbiAoIHVybCwgYWN0aW9uLCB0b2tlbj8gKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJxdWVyeVwiLCB1cmwsIGFjdGlvbiwgdG9rZW4gfVxufVxuXG5leHBvcnQgY29uc3QgcmVkaXJlY3QgPSBmdW5jdGlvbiAoIHBhdGggKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJyZWRpcmVjdFwiLCBwYXRoIH1cbn1cblxuZXhwb3J0IGNvbnN0IGxvYWQgPSBmdW5jdGlvbiAoIGxvY2F0aW9uLCBhY3Rpb24gKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJsb2FkXCIsIGxvY2F0aW9uLCBhY3Rpb24gfVxufVxuXG5leHBvcnQgY29uc3Qgc2F2ZSA9IGZ1bmN0aW9uICggbG9jYXRpb24sIGRhdGEsIGFjdGlvbj8gKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJzYXZlXCIsIGxvY2F0aW9uLCBkYXRhLCBhY3Rpb24gfVxufVxuXG4iXX0=